{"version":3,"sources":["store/user/selectors.js","store/user/constants.js","store/user/actions.js","store/common/selectors.js","components/InformationToasts.js","pages/HomePage.js","pages/LoginPage.js","pages/PatientHomePage.js","pages/RegPage.js","pages/DoctorHomePage.js","pages/NurseHomePage.js","pages/ClinicCenterAdminProfile.js","components/HolidayAproval.js","components/PasswordChanger.js","components/ClinicAdmin/CA.js","store/rooms/selectors.js","store/rooms/constants.js","store/rooms/actions.js","components/Room/RoomAllAtOnce.js","store/sur_req/selectors.js","store/sur_req/constants.js","store/sur_req/actions.js","components/Room/RoomList.js","components/SurgeryRequirement/PickedSurReq.js","components/Room/RoomSearch.js","components/PrivateRoute.js","store/doctors/selectors.js","store/doctors/constants.js","store/doctors/actions.js","components/ClinicAdmin/DoctorAllAtOnce.js","components/ClinicAdmin/ClinicsProfileInfo.js","components/ClinicAdmin/ClinicProfile.js","components/ClinicAdmin/AvgClinicRating.js","components/ClinicAdmin/AvgDoctorRatng.js","components/ClinicAdmin/Graphs.js","components/ClinicAdmin/Incomes.js","components/ClinicAdmin/BusinessReport.js","components/UserProfile.js","components/ClinicAdmin/FreeApointment.js","store/appointments/constants.js","store/appointments/actions.js","store/appointments/selectors.js","components/ClinicAdmin/AppointmentTypeAllAtOnce.js","components/ClinicAdmin/Pricelist.js","components/SurgeryRequirement/SurgeryReq.js","components/Unauthorized.js","store/patients/constants.js","store/patients/actions.js","store/patients/selectors.js","components/Patient/PatientList.js","components/Patient/PatientPagination.js","store/calendar/constants.js","store/calendar/actions.js","store/calendar/selectors.js","components/Appointment/AppointmentDetails.js","components/Calendar/WorkCalendar.js","store/absence_holiday/constants.js","store/absence_holiday/actions.js","store/absence_holiday/selectors.js","components/HolidayAbsence/HolAbsRequestsTable.js","components/HolidayAbsence/HolAbsRequest.js","components/BookingDoc.js","components/ApointmentInfo.js","components/SurgeryRequirement/SurReqDoctors.js","store/medicine_diagnose/constants.js","store/medicine_diagnose/actions.js","store/medicine_diagnose/selectors.js","components/MedicineDiagnose/DiagnoseTable.js","components/MedicineDiagnose/PaginationDiagnose.js","components/MedicineDiagnose/AddDiagnose.js","components/MedicineDiagnose/MedicineTable.js","components/MedicineDiagnose/PaginationMedicine.js","components/MedicineDiagnose/AddMedicine.js","store/reg_req/constants.js","store/reg_req/actions.js","store/reg_req/selectors.js","components/RegistrationReq/RegTable.js","components/RegistrationReq/RegistrationAproval.js","store/clinics/constants.js","store/clinics/actions.js","store/clinics/selectors.js","components/Clinic/ClinicTable.js","components/Clinic/ClinicPagination.js","components/Clinic/ClinicReg.js","components/ClinicCenterAdmin/AdminReg.js","components/ClinicAdmin/ClinicAdminReg.js","store/medical_record/selectors.js","store/medical_record/constants.js","store/medical_record/actions.js","store/medical_report/constants.js","store/medical_report/actions.js","components/Common/AppSurReq.js","components/MedicalReport/MedicalReport.js","components/MedicalRecord/MedicalRecord.js","components/Clinic/ClinicList.js","components/Clinic/ClinicSearch.js","components/Doctor/DoctorList.js","components/Doctor/DoctorSearch.js","components/Patient/History.js","store/prescriptions/selectors.js","store/prescriptions/constants.js","store/prescriptions/actions.js","components/Prescriptions/RewritePrescription.js","store/medical_report/selectors.js","components/MedicalReport/DoctorMedicalReport.js","AppRouter.js","components/Footer.js","store/user/reducer/index.js","store/user/reducer/computation-functions.js","store/reg_req/reducer/index.js","store/reg_req/reducer/computation-functions.js","store/patients/reducer/index.js","store/patients/reducer/computation-functions.js","store/calendar/reducer/index.js","store/calendar/reducer/computation-functions.js","store/absence_holiday/reducer/index.js","store/absence_holiday/reducer/computation-functions.js","store/prescriptions/reducer/index.js","store/prescriptions/reducer/computation-functions.js","store/medicine_diagnose/reducer/index.js","store/medicine_diagnose/reducer/computation-functions.js","store/clinics/reducer/index.js","store/clinics/reducer/computation-functions.js","store/appointments/reducer/index.js","store/appointments/reducer/computation-functions.js","store/doctors/reducer/index.js","store/doctors/reducer/computation-functions.js","store/rooms/reducer/index.js","store/rooms/reducer/computation-functions.js","store/sur_req/reducer/index.js","store/sur_req/reducer/computation-functions.js","store/common/reducer/index.js","store/common/constants.js","store/common/reducer/computation-functions.js","store/medical_record/reducer/index.js","store/medical_record/reducer/computation-functions.js","store/medical_report/reducer/index.js","store/medical_report/reducer/computation-functions.js","store/app_req/constants.js","store/app_req/reducer/index.js","store/reducers-index.js","store/common/actions.js","constants/api.js","services/HttpBaseClient.js","services/AuthSecurity.js","services/CCAdminService.js","services/NurseService.js","services/CAdminService.js","services/PatientService.js","services/DoctorService.js","store/user/saga.js","store/reg_req/saga.js","store/patients/saga.js","services/PersonnelService.js","store/calendar/saga.js","store/absence_holiday/saga.js","store/prescriptions/saga.js","services/MedDiagService.js","store/medicine_diagnose/saga.js","services/ClinicService.js","store/clinics/saga.js","services/AppointmentTypeService.js","store/appointments/saga.js","store/doctors/saga.js","services/RoomService.js","store/rooms/saga.js","services/SurgeryRequirementService.js","store/sur_req/saga.js","services/MedicalRecordService.js","store/medical_record/saga.js","services/MedicalReportService.js","store/medical_report/saga.js","services/AppointmentRequirementService.js","store/app_req/saga.js","store/sagas-index.js","store/index.js","index.js","components/NavBar.js"],"names":["reducer","userDataSelector","state","data","userTokenSelector","token","isFetchUserDataSelector","isFetchUserData","userIdSelector","id","LOGIN","REGISTRATION","CHANGE_PASSWORD","SIGN_OUT","FETCH_CCADMIN_DATA","REG_CC_ADMIN","FETCH_NURSE_DATA","FETCH_CADMIN_DATA","FETCH_PATIENT_DATA","FETCH_DOCTOR_DATA","EDIT_USER_INFORMATION","fetchCAdminData","payload","type","putUserId","putIsFetchUserData","signOut","putUserData","putUserToken","errorSelector","error","successSelector","success","warnSeletor","warn","infoSelector","info","pageCntSelector","pageCnt","pageSelCntSelector","selPageCnt","InformationToasts","useSelector","addToast","useToasts","useEffect","appearance","autoDismiss","HomePage","Container","Row","Col","md","span","offset","xs","Carousel","Item","className","src","alt","Caption","LoginPage","dispatch","useDispatch","useState","username","setUsername","password","setPassword","validated","setValidated","userId","history","push","Form","noValidate","onSubmit","event","form","currentTarget","preventDefault","checkValidity","stopPropagation","Group","Label","Control","required","placeholder","onChange","value","pattern","Feedback","Button","variant","PatientHomePage","patientId","Card","style","width","Body","Title","Text","onClick","Spinner","animation","role","RegPage","email","setEmail","password2","setPassword2","firstName","setFirstName","lastName","setLastName","address","setAddress","country","setCountry","city","setCity","phoneNum","setPhoneNum","unoip","setUnoip","as","controlId","DoctorHomePage","NurseHomePage","ClinicCenterAdminProfile","ccAdminId","userData","predefined","HolidayAproval","show","setShow","handleClose","handleShow","Modal","onHide","Header","closeButton","Footer","Table","responsive","PasswordChanger","oldPassword","setOldPassword","newPassword","setNewPassword","confNewPassword","setConfNewPassword","msg","setMsg","align","CA","clinicId","roomsDataSelector","rooms","isFetchRoomsSelector","isFetchRooms","pageCountSelector","pageCount","FETCH_ROOMS_DATA","DELETE_ROOM","ADD_ROOM","SEARCH_ROOMS_DATA","SEARCH_ROOMS","EDIT_ROOM","putPageCount","putRoomsData","putIsFetchRooms","searchRoomsData","RoomAllAtOnce","match","params","isFetchRoomsData","setPageCnt","name","setName","roomNum","setRoomNum","setType","roomId","setRoomId","handleDelitingRooms","room","handelAddRoom","setShow2rAdd","handleEdit","setShow1rEdit","items","number","Pagination","key","active","show1rEdit","show2rAdd","map","index","handleEditShow","e","target","text","undefined","includes","First","Prev","Next","Last","surReqDataSelector","surgeryReq","isFetchSurReqDataSelector","isFetchSurgeryReq","surReqPageCountSelector","pickSurReqSelector","pickSurReq","pickedSurReqSelector","pickedSurReq","pickTermSelector","pickTerm","pickedTermSelector","pickedTerm","pickedRoomSelector","pickedRoom","FETCH_SUR_REQ_DATA","FETCH_PICK_SUR_ROOM","FETCH_PICK_DOC","FETCH_FINISH_RESERVATION","putPickedRoom","putPickTerm","putPickedTerm","fetchPickDoc","putPickedSurReq","putPickSurReq","putSurReqPageCount","putIsFetchSurReqData","putSurReqData","RoomList","filterTerm","cnt","reason","setPickedTerm","preTermins","preTerminsApp","filter","roomsDto","alert","validate","defaultValue","termin","flag","termins","disabled","date","firstFreeTermin","handleFirst","PickedSurReq","patientName","doctorName","RoomSearch","moment","Date","add","format","today","setDate","setFilterTerm","min","onKeyDown","PrivateRoute","Component","component","accessRole","rest","userToken","render","props","roles","val","length","firstLogin","to","doctorsDataSelector","doctors","isFetchDoctorsSelector","isFetchDoctors","FETCH_DOCTORS_DATA","ADD_DOCTOR","DELETE_DOCTOR","SEARCH_DOCTOR","FETCH_DOCTORS_BY_CLINICID","SEARCH_DOCTORS","putIsFetchDoctors","putDoctorsData","searchDoctor","DoctorAllAtOnce","password1","setPassword1","startTime","setStartTime","endTime","setEndTime","handleDelete","doctor","handleAddDoctor","ClinicsProfileInfo","ClinicProfile","Tab","sm","Nav","Link","eventKey","Content","Pane","AvgClinicRating","AvgDocctorRating","Graphs","Incomes","BusinessReport","UserProfile","href","colSpan","FreeApointment","FETCH_APPOINTMENT_TYPE","ADD_APPOINTMENT_TYPE","DELETE_APPOINTMENT_TYPE","EDIT_APPOINTMENT_TYPE","SEARCH_APPOINTMENT_TYPE","FETCH_APPOINTMENT","putIsFetchAppointment","putAppointment","putAppointmentTypes","putIsFetchAppointmentTypes","appointmentTypeSelector","appointmentTypes","isFetchAppointmentTypeSelector","isFetchAppointmentTypes","appointmentSelector","appointment","isFetchAppointmentSelector","isFetchAppointment","AppointmentTypAllAtOnce","typeId","setTypeId","setCliId","show1","setShow1","show2","setShow2","handleAddAppointmentType","Pricelist","SurgeryReq","isFetchSurReqData","surReqs","handlePickRoom","surReq","Unauthorized","setTimeout","FETCH_PATIENTS_DATA_BY_CLINIC_ID","FETCH_PATIENT_BY_APP","FETCH_PATIENTS_PAGINATION","fetchPatientsPagination","putPatient","putPatientsData","putIsFetchPatients","patientsSelector","patients","isFetchPatientsSelector","isFetchPatients","patientSelector","patient","PatientList","PatientPagination","patientPageCnt","selpageCnt","sort","setSort","FETCH_CALENDAR","putIsFetchCalendar","putCalendarData","calendarDataSelector","calendar","isFetchCalendarSelector","isFetchCalendar","AppointmentDetails","start","appState","localizer","momentLocalizer","WorkCalendar","personnelId","selEvent","setSelEvent","title","end","setEvent","handleCalendarClick","calEvent","events","calendarItemResponses","startAccessor","endAccessor","height","onSelectEvent","ABS_HOL_REQUEST","FETCH_ABS_HOL_REQUESTS","putAbsHolRequest","putIsFetchAbsHolRequests","absHolRequestDataSelector","absholrequests","isFetchAbsHolRequestsSelector","isFetchAbsHolRequests","HolAbsRequestsTable","req","status","startDate","endDate","HolAbsRequest","setStartDate","setEndDate","BookingDoc","ApointmentInfo","SurReqDoctors","chosenDoc","setChosenDoc","multiple","options","vals","i","selected","doctorId","ADD_MEDICINE","ADD_DIAGNOSE","FETCH_MEDICINE_DATA","FETCH_DIAGNOSE_DATA","FETCH_MEDICINES_ALL","FETCH_DIAGNOSES_ALL","fetchDiagnosesAll","putIsFetchDiagnose","putIsFetchMedicine","putMedicineData","putDiagnoseData","diagnosesSelector","diagnoses","isFetchDiagnosesSelector","isFetchDiagnoses","medicinesSelector","medicines","isFetchMedicinesSelector","isFetchMedicines","DiagnoseTable","diagnose","code","description","PaginationDiagnose","diagnosePageCnt","AddMedicine","setDescription","setCode","rows","MedicineTable","medicine","PaginationMedicine","medicinePageCnt","FETCH_REG_REQS_DATA","APPROVE_REG_REQ","REJECT_REG_REQ","putRegReqsData","putIsFetchRegReqs","regReqsDataSelector","reqs","isFetchRegReqs","RegTable","reqId","setReqId","message","setMessage","regReqs","isFetchReqs","handleApprove","regReqId","max","RegistrationAproval","regReqsPageCnt","REG_CLINIC","FETCH_CLINICS_DATA","REG_CLINIC_ADMIN","SEARCH_CLINIC","FETCH_CLINIC_PAGINATION_DATA","putClinicsData","putIsFetchClinicsData","searchClinic","clinicsDataSelector","clinics","isFetchClinicsDataSelector","isFetchClinics","ClinicTable","clinic","ClinicPagination","ClinicReg","AdminReg","ccaId","ClinicAdminReg","setClinicId","medicalRecordSelector","medicalRecord","isFetchMedicalRecordSelector","isFetchMedicalRecord","FETCH_MEDICAL_RECORD","FETCH_MEDICAL_RECORD_BY_APP","EDIT_MEDICAL_RECORD","putMedicalRecord","putIsFetchMedicalRecord","ADD_MEDICAL_REPORT","FETCH_DOCTORS_MEDICAL_REPORTS","EDIT_MEDICAL_REPORT","putIsFetchMedicalReport","putDoctorsMedicalReports","AppSurReq","medRep","MedicalReport","medRecId","setDiagnose","medicinesSel","setMedicinesSel","appId","MedicalRecord","isFetchPatient","bloodType","setBloodType","weight","setWeight","setHeight","fetchPatientByApp","step","ClinicList","clinicsDto","averageRating","price","ClinicSearch","rating","setRating","DoctorList","DoctorSearch","setAverageRating","History","InputGroup","FormControl","aria-describedby","DropdownButton","Append","Dropdown","prescriptionsDataSelector","prescriptions","FETCH_PRESCRIPTIONS","REWRITE_PRESCRIPTION","putPrescriptionsData","putIsFetchPrescriptions","RewritePrescription","nurseId","handleRewrite","prescriptionId","prescription","medicineCode","medicineName","isFetchMedicalReportSelector","isFetchMedicalReport","medicalReportsSelector","medicalReports","DoctorMedicalReport","isFetchDiagnose","setId","diagnoseNam","setDiagnoseNam","diagnoseId","setDiagnoseId","maxlength","appDate","diagnoseName","medName","diabled","medRepId","AppRouter","exact","path","AddDiagnose","AppointmentInfo","FreeAppointment","ClinicAdmin","from","initialState","window","localStorage","getItem","JSON","parse","actionHandler","userReducer","hasOwnProperty","regReqsReducer","patientsReducer","calendarReducer","absenceHolidayReducer","isFetchPrescriptions","prescriptionReducer","medicineDiagnoseReducer","clinicReducer","appointmentReducer","doctorsReducer","roomsReducer","surReqReducer","commonReducer","medicalRecordReducer","medicalReport","medicalReportReducer","ADD_APPOINTEMNT_REQUIREMENT","appointmentReqs","isFetchAppointmentReqs","appReqReducer","rootReducer","combineReducers","putPageCnt","putSelPageCnt","putWarnMsg","putSuccessMsg","putErrorMsg","API_BASE","URL","HttpBaseClient","setInterceptor","client","interceptors","request","use","config","Object","assign","headers","Authorization","response","this","axios","create","baseURL","defaults","headerKey","FINALPOINTS","login","credentials","a","async","getApiClient","post","setItem","stringify","console","log","registration","changePassword","FETCH_CLINICS","fetchCCAdminData","get","fetchRegReqsData","reqData","approveRegReq","rejectRegReq","regCCAdmin","fetchClinicsData","HttpClient","FETCH_RECEPIES","fetchNurseData","fetchPrescriptions","reweritePrescription","FETCH_ADMINC_DATA","editUserInformation","FETCH_DOCTORS_DATA_PATIENT","FETCH_PATIENTS","FETCH_PATIENTS_BY_CLINIC_ID","fetchPatientsByClinicId","fetchDoctorsDataPatient","fetchPatientData","fetchPatinentsPagination","fetchDoctorsByClinicId","fetchDoctorData","fetchDoctorsData","addDoctor","searchDoctors","deleteDoctor","take","put","call","PatientService","CAdminService","DoctorService","NurseService","CCAdminService","clear","authService","select","fetchPatientsDataByClinicId","FETCH_ABS_HOL_REQUEST","absHolRequest","fetchAbsHolRequests","fetchCalendar","forEach","element","allday","PersonnelService","fetchAbsHolRequest","rewritePrescription","FETCH_MEDICINE_ALL","FETCH_DIAGNOSE_ALL","fetchMedicineData","fetchDiagnoseData","fetchMedicineAll","fetchDiagnoseAll","addMedicine","addDiagnose","fetchMedicinesAll","MedDiagService","regClinic","regClinicAdmin","fetchClinicPaginationData","clinicPag","ClinicService","FETCH_APPOINTMENT_TYPES","DELETE_APPOINTMENTS_TYPE","fetchAppointmentType","addAppointmentType","deleteAppointmentType","editAppointmentType","appointmentType","fetchAppointment","searchAppointmentType","AppointmentTypeService","DELETE_ROOMS_DATA","fetchRoomsData","addRoomsDate","ADD_ROOMS_DATA","deleteRoomsData","delete","editRoomsData","EDIT_ROOMS_DATA","searchRooms","addRoom","editRoom","deleteRoom","RoomService","FETCH_SUR_REQ","fetchSurReqData","fetchFinishReservation","fetchSurReqs","fetchPickSurRoom","SurgeryRequirementService","surgeryRequirements","fetchMedicalRecord","fetchMedicalRecordByApp","editMedicalRecord","edit","MedicalRecordService","addMedicalReport","fetchDoctorsMedicalReports","editMedicalReport","MedicalReportService","ADD_APPOINTMENT_REQUIREMENT","addAppointmentRequirement","AppointmentRequirementService","rootSaga","sagas","flatten","userSaga","regReqsSaga","patientsSaga","calendarSaga","absenceHolidaySaga","prescriptionSaga","medicineDiagnoseSaga","clinicSaga","appointmentsSaga","doctorsSaga","roomsSaga","surReqSaga","medicalRecordSaga","medicalReportSaga","appReqSaga","saga","keys","sagaFunctionName","all","spawn","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","applyMiddleware","run","createBrowserHistory","ReactDOM","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","document","getElementById"],"mappings":"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","file":"static/js/main.e103b4f5.chunk.js","sourcesContent":["const reducer = 'userReducer';\n\n//user selectors\nexport const userDataSelector = state => state[reducer].data;\nexport const userTokenSelector = state => state[reducer].token;\nexport const isFetchUserDataSelector = state => state[reducer].isFetchUserData;\nexport const userIdSelector = state => state[reducer].id;\n","//user constants\nexport const LOGIN = 'login';\nexport const REGISTRATION = 'registration';\nexport const PUT_USER_DATA = 'put_user_data';\nexport const PUT_USER_TOKEN = 'put_user_token';\nexport const CHANGE_PASSWORD = 'change_password';\nexport const PUT_USER_ID = 'put_user_id';\nexport const SIGN_OUT = 'sign_out';\nexport const PUT_IS_FETCH_USER_DATA = 'put_is_fetch_user_data';\n//clinic center admin constants\nexport const FETCH_CCADMIN_DATA = 'fetch_ccadmin_data';\nexport const REG_CC_ADMIN = 'register_cc_admin';\n//nurse constants\nexport const FETCH_NURSE_DATA = 'fetch_nurse_data';\n//clinic admin constants\nexport const FETCH_CADMIN_DATA = 'fetch_cadmin_data';\n//patient constants\nexport const FETCH_PATIENT_DATA = 'fetch_patient_data';\n//doctor constants\nexport const FETCH_DOCTOR_DATA = 'fetch_doctor_data';\nexport const EDIT_USER_INFORMATION = 'edit_user_information';\n","import {\n    LOGIN,\n    REGISTRATION,\n    PUT_USER_DATA,\n    PUT_USER_TOKEN,\n    CHANGE_PASSWORD,\n    SIGN_OUT,\n    FETCH_CCADMIN_DATA,\n    REG_CC_ADMIN,\n    FETCH_NURSE_DATA,\n    FETCH_CADMIN_DATA,\n    FETCH_PATIENT_DATA,\n    FETCH_DOCTOR_DATA,\n    PUT_IS_FETCH_USER_DATA,\n    PUT_USER_ID,\n    EDIT_USER_INFORMATION\n} from './constants';\n\n//patient actions\nexport const fetchPatientData = payload => ({\n    type: FETCH_PATIENT_DATA,\n    payload\n});\n\n//cadmin actions\nexport const fetchCAdminData = payload => ({\n    type: FETCH_CADMIN_DATA,\n    payload\n});\n\n//doctor actions\nexport const fetchDoctorData = payload => ({\n    type: FETCH_DOCTOR_DATA,\n    payload\n});\n\n//nurse actions\nexport const fetchNurseData = payload => ({\n    type: FETCH_NURSE_DATA,\n    payload\n});\n\n//clinic center admin actions\nexport const fetchCCAdminData = payload => ({\n    type: FETCH_CCADMIN_DATA,\n    payload\n});\n\nexport const regCCAdmin = payload => ({\n    type: REG_CC_ADMIN,\n    payload\n});\n\n//user actions\nexport const putUserId = payload => ({\n    type: PUT_USER_ID,\n    payload\n});\n\nexport const putIsFetchUserData = payload => ({\n    type: PUT_IS_FETCH_USER_DATA,\n    payload\n});\n\nexport const signOut = payload => ({\n    type: SIGN_OUT,\n    payload\n});\n\nexport const loginUser = payload => ({\n    type: LOGIN,\n    payload\n});\n\nexport const registerUser = payload => ({\n    type: REGISTRATION,\n    payload\n});\n\nexport const putUserData = payload => ({\n    type: PUT_USER_DATA,\n    payload\n});\n\nexport const putUserToken = payload => ({\n    type: PUT_USER_TOKEN,\n    payload\n});\n\nexport const changePassword = payload => ({\n    type: CHANGE_PASSWORD,\n    payload\n});\n\nexport const editUserInformation = payload => ({\n    type: EDIT_USER_INFORMATION,\n    payload\n});\n","const reducer = 'commonReducer';\n\nexport const errorSelector = state => state[reducer].error;\nexport const successSelector = state => state[reducer].success;\nexport const warnSeletor = state => state[reducer].warn;\nexport const infoSelector = state => state[reducer].info;\nexport const pageCntSelector = state => state[reducer].pageCnt;\nexport const pageSelCntSelector = state => state[reducer].selPageCnt;","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useToasts } from 'react-toast-notifications'\nimport { errorSelector, successSelector, warnSeletor, infoSelector } from '../store/common/selectors';\n\nconst InformationToasts = () => {\n    const error = useSelector(errorSelector);\n    const success = useSelector(successSelector);\n    const warn = useSelector(warnSeletor);\n    const info = useSelector(infoSelector);\n\n    const { addToast } = useToasts();\n\n    useEffect(() => {\n        if (error != null) {\n            addToast(error, {\n                appearance: 'error',\n                autoDismiss: true,\n            });\n        }\n    }, [error]);\n\n    useEffect(() => {\n        if (success != null) {\n            addToast(success, {\n                appearance: 'success',\n                autoDismiss: true,\n            });\n        }\n    }, [success]);\n\n    useEffect(() => {\n        if (warn != null) {\n            addToast(warn, {\n                appearance: 'warning',\n                autoDismiss: true,\n            });\n        }\n    }, [warn]);\n\n    useEffect(() => {\n        if (info != null) {\n            addToast(info, {\n                appearance: 'info',\n                autoDismiss: true,\n            });\n        }\n    }, [info]);\n\n    return (\n        <div id=\"toastMsg\">\n        </div>\n    );\n};\n\nexport default InformationToasts;\n","import React from 'react';\nimport { Row, Col, Container, Carousel} from 'react-bootstrap';\n\n\nfunction HomePage() {\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span:10, offset: 1 }} xs={12}>\n                    <Carousel>\n                        <Carousel.Item>\n                            <img\n                            className=\"d-block w-100\"\n                            src=\"img/home_img.jpg\"\n                            alt=\"First slide\"\n                            />\n                            <Carousel.Caption>\n                            <h3>Welecome to Clinic Center System!</h3>\n                            </Carousel.Caption>\n                        </Carousel.Item>\n                        <Carousel.Item>\n                            <img\n                            className=\"d-block w-100\"\n                            src=\"img/dom_zdravlja.jpg\"\n                            alt=\"Second slide\"\n                            />\n\n                            <Carousel.Caption>\n                            <h3>Our community health centre</h3>\n                            </Carousel.Caption>\n                        </Carousel.Item>\n                        <Carousel.Item>\n                            <img\n                            className=\"d-block w-100\"\n                            src=\"img/hitna_pomoc.jpg\"\n                            alt=\"Third slide\"\n                            />\n\n                            <Carousel.Caption>\n                            <h3>Our ambulance</h3>\n                            </Carousel.Caption>\n                        </Carousel.Item>                \n                    </Carousel>\n                    \n                </Col>\n            </Row>\n        </Container>\n    );\n  }\n  \n  export default HomePage;","import React, { useState, useEffect } from 'react';\nimport { history } from '../index';\nimport { Form, Button, Container, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loginUser } from '../store/user/actions';\nimport { userIdSelector } from '../store/user/selectors';\n\nconst LoginPage = () => {\n    const dispatch = useDispatch();\n    const [username, setUsername] = useState();\n    const [password, setPassword] = useState();\n    const [validated, setValidated] = useState(false);\n    const userId = useSelector(userIdSelector);\n\n    useEffect(() => {\n        if (userId != null && userId != '') {\n            history.push('/');\n        }\n    }, []);\n\n\n    const handleLogin = (event) => {\n        const form = event.currentTarget;\n        event.preventDefault();\n        if (form.checkValidity() === false) {\n            event.stopPropagation();\n            setValidated(true);\n        } else {\n            dispatch(\n                loginUser({\n                    username,\n                    password\n                })\n            );\n            setValidated(false);\n        }\n    };\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 3, offset: 4 }} xs={12}>\n                    <h2 className=\"border-bottom\">Login</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 4 }} xs={12}>\n                    <Form noValidate validated={validated} id=\"logForm\" onSubmit={handleLogin}>\n                        <Form.Group >\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control required type=\"email\" id=\"txtEmail\" placeholder=\"Enter email\"\n                                onChange={({ currentTarget }) => {\n                                    setUsername(currentTarget.value);\n                                }} />\n                        </Form.Group>\n\n                        <Form.Group >\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control required type=\"password\" id=\"txtPass\" pattern=\".{3,25}\" placeholder=\"Password\"\n                                onChange={({ currentTarget }) => {\n                                    setPassword(currentTarget.value);\n                                }} />\n                            <Form.Control.Feedback type=\"invalid\">\n                                min 5 max 25 characters\n                                </Form.Control.Feedback>\n                        </Form.Group>\n                        <Button variant=\"primary\" id=\"btnLogin\" type=\"submit\">\n                            Login\n                        </Button>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default LoginPage;\n","import React, { useEffect } from 'react';\nimport { history } from '../index';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Card, Button, Col, Row, Container, Spinner } from 'react-bootstrap';\nimport { fetchPatientData } from '../store/user/actions';\nimport { userIdSelector, userDataSelector, isFetchUserDataSelector } from '../store/user/selectors';\n\n\nconst PatientHomePage = () => {\n    const dispatch = useDispatch();\n    const patientId = useSelector(userIdSelector);\n    const isFetchUserData = useSelector(isFetchUserDataSelector);\n\n    useEffect(() => {\n        if (patientId != null) {\n            dispatch(\n                fetchPatientData({\n                    patientId\n                })\n            );\n        }\n    }, [patientId]);\n\n    if (!isFetchUserData) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h2 className=\"border-bottom\">Patient home page</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 1 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Search clinics</Card.Title>\n                            <Card.Text>\n                                You can search clinics.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/pat/search-cli'); }}>Clinic</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 3 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Search doctors</Card.Title>\n                            <Card.Text>\n                                You can search doctors.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/pat/search-doc'); }}>Doctor</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 4 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>History</Card.Title>\n                            <Card.Text>\n                                You can see history of surgeries and examinations.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/pat/history'); }}>History</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 1 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Medical record</Card.Title>\n                            <Card.Text>\n                                You can see medical record.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/medical-rec'); }} >Medical record</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 3 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Profile</Card.Title>\n                            <Card.Text>\n                                You can see profile.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/user-prof'); }}>Profile</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            \n            </Row>\n        </Container>\n    );\n}\n \nexport default PatientHomePage;","import React, { useState } from 'react';\nimport { Form, Button, Row, Col, Container } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { registerUser } from '../store/user/actions';\n\nconst RegPage = () => {\n    const dispatch = useDispatch();\n    const [email, setEmail] = useState();\n    const [password, setPassword] = useState();\n    const [password2, setPassword2] = useState();\n    const [firstName, setFirstName] = useState();\n    const [lastName, setLastName] = useState();\n    const [address, setAddress] = useState();\n    const [country, setCountry] = useState();\n    const [city, setCity] = useState();\n    const [phoneNum, setPhoneNum] = useState();\n    const [unoip, setUnoip] = useState();\n\n    const handleRegister = () => {\n        dispatch(\n            registerUser({\n                email,\n                password,\n                password2,\n                firstName,\n                lastName,\n                address,\n                city,\n                country,\n                phoneNum,\n                unoip\n            })\n        );\n    };\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h1 className=\"border-bottom\">Registration</h1>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Form>\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"formBasicEmail\">\n                                <Form.Label>E-mail address</Form.Label>\n                                <Form.Control type=\"email\" placeholder=\"E-mail\"\n                                    onChange={({ currentTarget }) => {\n                                        setEmail(currentTarget.value);\n                                    }} />\n                                <Form.Text className=\"text-muted\">\n                                    We'll never share your email with anyone else.\n                                </Form.Text>\n                            </Form.Group>\n                            <Form.Group as={Col} controlId=\"formCity\">\n                                <Form.Label>City</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"City\"\n                                    onChange={({ currentTarget }) => { setCity(currentTarget.value); }} />\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"formBasicPassword\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Password\"\n                                    onChange={({ currentTarget }) => {\n                                        setPassword(currentTarget.value);\n                                    }} />\n                            </Form.Group>\n                            <Form.Group as={Col} controlId=\"formConfirmPassword\">\n                                <Form.Label>Confirm password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Confirm your password\"\n                                    onChange={({ currentTarget }) => {\n                                        setPassword2(currentTarget.value);\n                                    }} />\n                            </Form.Group>\n\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"formAddressd\">\n                                <Form.Label>Address</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Address\"\n                                    onChange={({ currentTarget }) => {\n                                        setAddress(currentTarget.value);\n                                    }} />\n                            </Form.Group>\n                            <Form.Group as={Col} controlId=\"formCountry\">\n                                <Form.Label>Country</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Country\"\n                                    onChange={({ currentTarget }) => {\n                                        setCountry(currentTarget.value);\n                                    }} />\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"formFirstName\">\n                                <Form.Label>First name</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"First name\"\n                                    onChange={({ currentTarget }) => {\n                                        setFirstName(currentTarget.value);\n                                    }} />\n                            </Form.Group>\n                            <Form.Group as={Col} controlId=\"formContact\">\n                                <Form.Label>Contact</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Contact\"\n                                    onChange={({ currentTarget }) => {\n                                        setPhoneNum(currentTarget.value);\n                                    }} />\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"formLastName\">\n                                <Form.Label>Last name</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Last name\"\n                                    onChange={({ currentTarget }) => {\n                                        setLastName(currentTarget.value);\n                                    }} />\n                            </Form.Group>\n                            <Form.Group as={Col} controlId=\"formUNOIP\">\n                                <Form.Label>Unique number of insured persons</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"UNOIP\"\n                                    onChange={({ currentTarget }) => {\n                                        setUnoip(currentTarget.value);\n                                    }} />\n                            </Form.Group>\n                        </Form.Row>\n                        <Button variant=\"primary\" className=\"mb-4\" onClick={handleRegister}>\n                            Sign-up\n                        </Button>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default RegPage;","import React, { useEffect } from 'react';\nimport { history } from '../index';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Spinner, Card, Button, Col, Row, Container } from 'react-bootstrap';\nimport { userIdSelector, isFetchUserDataSelector } from '../store/user/selectors';\nimport { fetchDoctorData } from '../store/user/actions';\n\n\nconst DoctorHomePage = () => {\n    const dispatch = useDispatch();\n    const id = useSelector(userIdSelector);\n    const isFetchUserData = useSelector(isFetchUserDataSelector);\n\n    useEffect(() => {\n        if (id != null) {\n            dispatch(\n                fetchDoctorData({\n                    id\n                })\n            );\n        }\n    }, [id]);\n\n    if (!isFetchUserData) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h2 className=\"border-bottom\">Doctor admin profile</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 1 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Patient list</Card.Title>\n                            <Card.Text>\n                                You can see patient list.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/pers/pat-list'); }}>Patients</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 3 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Appointment info</Card.Title>\n                            <Card.Text>\n                                You can see appointments info\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/doc/app-info'); }}>Info</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 4 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Work Calendar</Card.Title>\n                            <Card.Text>\n                                You can access work calendar.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/pers/work-cal'); }}>Calendar</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 1 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Holiday and absence</Card.Title>\n                            <Card.Text>\n                                You can make holiday or absence requirement\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/pers/hol-abs'); }} >Go to</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 3 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Booking</Card.Title>\n                            <Card.Text>\n                                You can easily book.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/doc/bok-doc'); }}>Search rooms</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 3 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Medical reports</Card.Title>\n                            <Card.Text>\n                                You can edit medical reports\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/doc/med-reps'); }}>Edit</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default DoctorHomePage;","import React, { useEffect } from 'react';\nimport { history } from '../index';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchNurseData } from '../store/user/actions';\nimport { Spinner, Row, Col, Container, Card, Button } from 'react-bootstrap';\nimport { userIdSelector, isFetchUserDataSelector } from '../store/user/selectors';\n\nconst NurseHomePage = () => {\n    const dispatch = useDispatch();\n    const id = useSelector(userIdSelector);\n    const isFetchUserData = useSelector(isFetchUserDataSelector);\n\n    useEffect(() => {\n        if (id != null) {\n            dispatch(\n                fetchNurseData({\n                    id\n                })\n            );\n        }\n    }, [id]);\n\n    if (!isFetchUserData) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h2 className=\"border-bottom\">Doctor admin profile</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 1 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Patient list</Card.Title>\n                            <Card.Text>\n                                You can see patient list.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/pers/pat-list'); }}>Patients</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 3 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Work Calendar</Card.Title>\n                            <Card.Text>\n                                You can access work calendar.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/pers/work-cal'); }}>Calendar</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 3 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Holiday and absence</Card.Title>\n                            <Card.Text>\n                                You can make holiday or absence requirement\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/pers/hol-abs'); }} >Go to</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 1 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Rewrite prescriptions</Card.Title>\n                            <Card.Text>\n                                Page for prescription rewrite\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/nurse-page/rew-presc'); }} >Go to</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 3 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>User profile</Card.Title>\n                            <Card.Text>\n                                You can access your profile\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/user-prof'); }}>Profile</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default NurseHomePage;","import React, { useEffect } from 'react';\nimport { history } from '../index';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Card, Button, Col, Row, Container, Spinner } from 'react-bootstrap';\nimport { fetchCCAdminData } from '../store/user/actions';\nimport { userIdSelector, userDataSelector, isFetchUserDataSelector } from '../store/user/selectors';\n\n\nconst ClinicCenterAdminProfile = () => {\n    const dispatch = useDispatch();\n    const ccAdminId = useSelector(userIdSelector);\n    const isFetchUserData = useSelector(isFetchUserDataSelector);\n    const userData = useSelector(userDataSelector);\n\n    useEffect(() => {\n        if (ccAdminId != null) {\n            dispatch(\n                fetchCCAdminData({\n                    ccAdminId\n                })\n            );\n        }\n    }, [ccAdminId]);\n\n    if (!isFetchUserData) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h2 className=\"border-bottom\">Clinic center admin profile</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 1 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Registration reqs</Card.Title>\n                            <Card.Text>\n                                You can see registration requirements.\n                            </Card.Text>\n                            <Button variant=\"primary\" id=\"btnRegReqs\" onClick={() => { history.push('/ccadmin/reg-req'); }}>Reqs</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 3 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Clinic reg</Card.Title>\n                            <Card.Text>\n                                You can registrate new clinic.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/ccadmin/cli-reg'); }}>Clinic</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 4 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Clinic admin reg</Card.Title>\n                            <Card.Text>\n                                You can registrate clinic admin.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/ccadmin/regca'); }}>Go to</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 1 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Add medicine</Card.Title>\n                            <Card.Text>\n                                You can add medicine.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/ccadmin/add-med'); }} >Add</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 3 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Add diagnose</Card.Title>\n                            <Card.Text>\n                                You can add diagnose.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/ccadmin/add-diag'); }}>Add</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                {userData.predefined &&\n                    <Col md={{ span: 3 }} xs={12}>\n                        <Card style={{ width: '18rem' }}>\n                            <Card.Body>\n                                <Card.Title>Add clinic center admin</Card.Title>\n                                <Card.Text>\n                                    You can add clinic center admin.\n                            </Card.Text>\n                                <Button variant=\"primary\" onClick={() => { history.push('/ccadmin/cca-reg'); }}>Add</Button>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                }\n            </Row>\n        </Container>\n    );\n}\n\nexport default ClinicCenterAdminProfile;","import React, {useState} from 'react';\nimport {Table, Form, Button, Modal, Container,Row} from 'react-bootstrap';\n//import RejectedReason from './RejectedReason';\n\nfunction HolidayAproval(){\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return(\n        <>\n        <Modal show={show} onHide={handleClose} animation={false}>\n        <Modal.Header closeButton>\n          <Modal.Title>Rejected reason:</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form.Control type=\"text\"/>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={handleClose}>\n            Sand\n          </Button>\n        </Modal.Footer>\n      </Modal>\n        <Container>\n            <Row>\n                <h2>Aprove or reject the request for holiday</h2>\n            </Row>\n            <Row>\n                <Table responsive>\n                    <thead>\n                        <tr>\n                        <th>#</th>\n                        <th>E-mail</th>\n                        <th>First Name</th>\n                        <th>Last Name</th>\n                        <th>Accept</th>\n                        <th>Reject</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                        <td>1</td>\n                        <td>perica@gmail.com</td>\n                        <td>Pera</td>\n                        <td>Peric</td>\n                        <td>\n                            <Button variant=\"success\" type=\"submit\">\n                                Accept\n                            </Button>\n                        </td>\n                        <td>\n                            <Button variant=\"danger\" type=\"primary\" onClick={handleShow} >\n                                Reject\n                            </Button>\n                        </td>\n                        \n                        </tr>\n                        <tr>\n                        <td>2</td>\n                        <td>ana@yahoo.com</td>\n                        <td>Ana</td>\n                        <td>Kuk</td>\n                        <td>\n                            <Button variant=\"success\" type=\"submit\">\n                                Accept\n                            </Button>\n                        </td>\n                        <td>\n                            <Button variant=\"danger\" type=\"submit\" onClick={handleShow} >\n                                Reject\n                            </Button>\n                        </td>\n                        </tr>\n                        <tr>\n                        <td>3</td>\n                        <td>top@gmail.com</td>\n                        <td>Ivo</td>\n                        <td>Tot</td>\n                        <td>\n                            <Button variant=\"success\" type=\"submit\" >\n                                Accept\n                            </Button>\n                        </td>\n                        <td>\n                            <Button variant=\"danger\" type=\"submit\" onClick={handleShow} >\n                                Reject\n                                \n                            </Button>\n                            \n                        </td>\n                        </tr>\n                    </tbody>\n                </Table>\n                \n            </Row>\n            \n        </Container>\n        </>\n        \n    );\n}\n\n\nexport default HolidayAproval;","import React, { useState } from 'react';\nimport { Container, Form, Button, Row, Col } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { changePassword } from '../store/user/actions';\n\n\nconst PasswordChanger = () => {\n    const dispatch = useDispatch();\n    const [oldPassword, setOldPassword] = useState();\n    const [newPassword, setNewPassword] = useState();\n    const [confNewPassword, setConfNewPassword] = useState();\n    const [msg, setMsg] = useState('');\n    const [validated, setValidated] = useState(false);\n\n    const handleChange = (event) => {\n        const form = event.currentTarget;\n        event.preventDefault();\n        if (form.checkValidity() === false) {\n            event.stopPropagation();\n            setMsg('min 5 max 25 characters');\n        } else if (newPassword !== confNewPassword) {\n            event.stopPropagation();\n            setMsg('Password doesn\\'tmatch');\n        } else {\n            setMsg('');\n            dispatch(\n                changePassword({\n                    oldPassword,\n                    newPassword,\n                    confNewPassword\n                })\n            );\n        }\n        setValidated(true);\n    };\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 5, offset: 3 }} xs={12}>\n                    <h1 align=\"center\" className=\"border-bottom\">Change password</h1>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 4 }} xs={12}>\n                    <Form noValidate validated={validated} onSubmit={handleChange}>\n                        <Form.Group as={Col} controlId=\"formOld\">\n                            <div align=\"center\">\n                                <Form.Label>Old password:</Form.Label>\n                            </div>\n                            <Form.Control required type=\"password\" pattern=\".{5,25}\" placeholder=\"Enter old password\"\n                                onChange={({ currentTarget }) => {\n                                    setOldPassword(currentTarget.value);\n                                }} />\n                            <Form.Control.Feedback type=\"invalid\">\n                                min 5 max 25 characters\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} controlId=\"formNew\">\n                            <div align=\"center\">\n                                <Form.Label>New password:</Form.Label>\n                            </div>\n                            <Form.Control required type=\"password\" pattern=\".{5,25}\" placeholder=\"Enter new password\"\n                                onChange={({ currentTarget }) => {\n                                    setNewPassword(currentTarget.value);\n                                }} />\n                            <Form.Control.Feedback type=\"invalid\">\n                                min 5 max 25 characters\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} controlId=\"formConfNew\">\n                            <div align=\"center\">\n                                <Form.Label>Confirm new password:</Form.Label>\n                            </div>\n                            <Form.Control required type=\"password\" pattern=\".{5,25}\" placeholder=\"Confirm new password\"\n                                onChange={({ currentTarget }) => {\n                                    setConfNewPassword(currentTarget.value);\n                                }} />\n                            <Form.Control.Feedback type=\"invalid\">\n                                {msg}\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <div align=\"center\">\n                            <Button variant=\"primary\" type=\"submit\">\n                                Change\n                        </Button>\n                        </div>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default PasswordChanger;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Spinner, Card, Button, Col, Row, Container } from 'react-bootstrap';\nimport { userDataSelector, userIdSelector, isFetchUserDataSelector } from '../../store/user/selectors';\nimport { fetchCAdminData } from '../../store/user/actions';\nimport { history } from '../../index';\n\n\nconst CA = () => {\n    const dispatch = useDispatch();\n    const id = useSelector(userIdSelector);\n    const data = useSelector(userDataSelector);\n    const isFetchUserData = useSelector(isFetchUserDataSelector);\n\n    useEffect(() => {\n        if (id != null) {\n            dispatch(\n                fetchCAdminData({\n                    id\n                })\n            );\n        }\n    }, [id]);\n\n    if (!isFetchUserData) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h2 className=\"border-bottom\">Clinic admin profile</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 1 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Clinic doctors</Card.Title>\n                            <Card.Text>\n                                You can acces doctors.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/adminc/doc/' + data.clinicId); }}>Doctors</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 3 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Clinic profile</Card.Title>\n                            <Card.Text>\n                                You can acces clinic profile\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/adminc/cli-prof/' + data.clinicId); }}>Clinic profile</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 4 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Appointment type</Card.Title>\n                            <Card.Text>\n                                You can access appointment types.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/adminc/app-type'); }}>Type</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 1 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Exemination room</Card.Title>\n                            <Card.Text>\n                                You can add, edit, search and delete exemination room.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/adminc/exe-room/' + data.clinicId); }} >Rooms</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 3 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Room search</Card.Title>\n                            <Card.Text>\n                                You can easily search rooms.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/adminc/room-search/free'); }}>Search rooms</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 4 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Free appointments</Card.Title>\n                            <Card.Text>\n                                You can easily create free apointmets.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/adminc/free-app/' + data.clinicId); }}>Appointments</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 1 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Price list</Card.Title>\n                            <Card.Text>\n                                You can acces price list.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/adminc/price-list/' + data.clinicId); }}>List</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 3 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Business report</Card.Title>\n                            <Card.Text>\n                                You can access business report.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/adminc/bus-rep/' + data.clinicId); }}>Business</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={{ span: 4 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>User profile</Card.Title>\n                            <Card.Text>\n                                You can easily acces yours profile\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/user-prof'); }}>Profile</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 1 }} xs={12}>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Body>\n                            <Card.Title>Surgery requirement</Card.Title>\n                            <Card.Text>\n                                You can surgery requirements.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={() => { history.push('/adminc/sur-req/' + data.clinicId); }}>Requirements</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    );\n\n}\n\nexport default CA;","const reducer = 'roomsReducer';\n\nexport const roomsDataSelector = state => state[reducer].rooms;\nexport const isFetchRoomsSelector = state => state[reducer].isFetchRooms;\nexport const pageCountSelector = state => state[reducer].pageCount;","export const FETCH_ROOMS_DATA ='fetch_rooms_data';\nexport const PUT_ROOMS_DATA = 'put_rooms_data'; \nexport const DELETE_ROOM = \"delete_room\";\nexport const ADD_ROOM = \"add_room\";\nexport const SEARCH_ROOMS_DATA = \"search_rooms_data\";\nexport const SEARCH_ROOMS = \"search_rooms\"; //za pretragu soba, bez filriranja\nexport const EDIT_ROOM = \"edit_room\";\nexport const PUT_IS_FETCH_ROOMS = \"put_is_fetch_rooms\";\nexport const PUT_PAGE_COUNT = \"put_page_count\";","import {\n    FETCH_ROOMS_DATA,\n    PUT_ROOMS_DATA,\n    PUT_IS_FETCH_ROOMS,\n    DELETE_ROOM,\n    //ADD_ROOMS_DATA,\n    //EDIT_ROOMS_DATA,\n    SEARCH_ROOMS,\n    SEARCH_ROOMS_DATA,\n    PUT_PAGE_COUNT,\n    ADD_ROOM,\n    EDIT_ROOM\n} from './constants';\n\nexport const putPageCount = payload => ({\n    type: PUT_PAGE_COUNT,\n    payload\n});\n\nexport const fetchRoomsData = payload => ({\n    type: FETCH_ROOMS_DATA,\n    payload\n});\n\nexport const putRoomsData = payload => ({\n    type: PUT_ROOMS_DATA,\n    payload\n});\n\nexport const putIsFetchRooms = payload => ({\n    type: PUT_IS_FETCH_ROOMS,\n    payload\n});\n\nexport const searchRoomsData = payload => ({\n    type: SEARCH_ROOMS_DATA,\n    payload\n});\n\nexport const searchRooms = payload => ({\n    type: SEARCH_ROOMS,\n    payload\n});\n\nexport const addRoom = payload => ({\n    type: ADD_ROOM,\n    payload\n});\n\nexport const editRoom = payload => ({\n    type: EDIT_ROOM,\n    payload\n});\n\nexport const deleteRoom = payload => ({\n    type: DELETE_ROOM,\n    payload\n});\n /*\nexport const deleteRoomsData = payload => ({\n    type: DELETE_ROOMS_DATA,\n    payload\n});\n\nexport const addRoomsData = payload => ({\n    type: ADD_ROOMS_DATA,\n    payload\n});\n\nexport const editRoomsData = payload => ({\n    type: EDIT_ROOMS_DATA,\n    payload\n});\n\n\n*/","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Table, Button, Col, Form, Modal, Spinner, Pagination, PageItem } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { roomsDataSelector, isFetchRoomsSelector, pageCountSelector } from '../../store/rooms/selectors'\nimport { fetchRoomsData, searchRooms,addRoom, editRoom ,deleteRoom} from '../../store/rooms/actions';\n\nconst RoomAllAtOnce = ({ match }) => {\n    const dispatch = useDispatch();\n    const clinicId = match.params.clinicId;\n    const rooms = useSelector(roomsDataSelector);\n    const isFetchRoomsData = useSelector(isFetchRoomsSelector);\n    const pageCount = useSelector(pageCountSelector);\n    const [pageCnt, setPageCnt] = useState(0);\n    const [name, setName] = useState('');\n    const [roomNum, setRoomNum] = useState(0);\n    const [type, setType] = useState('');\n    const [roomId, setRoomId] = useState(0);\n\n    const handleDelitingRooms = (room) => {\n        dispatch(\n            deleteRoom({id:room.id, clinicId, pageCnt})\n        );\n    };\n\n    const handleSearchRooms = () => {\n        dispatch(\n            searchRooms({name, clinicId, pageCnt})\n        );\n    }\n\n    const handelAddRoom = () => {\n        dispatch(\n            addRoom({roomId,name,roomNum, type, clinicId, pageCnt})\n        );\n        setShow2rAdd(false);\n    }\n    const handleEditShow  = (room)=>{\n        setName(room.name);\n        setRoomNum(room.roomNum);\n        setRoomId(room.id);\n        setShow1rEdit(true);\n    }\n\n    const handleEdit = () => {\n        dispatch(\n            editRoom({id:roomId, name, roomNum, clinicId, pageCnt})\n        )\n        setShow1rEdit(false);\n    }\n\n    useEffect(() => {\n        dispatch(\n            fetchRoomsData({\n                clinicId,\n                pageCnt\n            })\n        );\n    }, [pageCnt]);\n\n    let items = [];\n    for (let number = 1; number <= pageCount; number++) {\n        items.push(\n            <Pagination.Item key={number} active={number == (pageCnt + 1)}>\n                {number}\n            </Pagination.Item>\n        );\n    }\n\n    const handlePagination = (e) => {\n        e.preventDefault();\n        let event = e.target.text;\n        if (event != undefined) {\n            if (event.includes('First')) {\n                setPageCnt(0);\n            } else if (event.includes('Last')) {\n                setPageCnt(pageCount - 1);\n            } else if (event.includes('Next')) {\n                if (pageCnt < pageCount - 1) {\n                    setPageCnt(pageCnt + 1);\n                }\n            } else if (event.includes('Previous')) {\n                if (pageCnt > 0) {\n                    setPageCnt(pageCnt - 1);\n                }\n            }else{\n                setPageCnt(event-1);\n            }\n        }\n    };\n\n\n    const [show1rEdit, setShow1rEdit] = useState(false);\n    const [show2rAdd, setShow2rAdd] = useState(false);\n\n    const handleClose1rEdit = () => setShow1rEdit(false);\n    const handleShow1rEdit = () => setShow1rEdit(true);\n    const handleShow2rAdd = () => setShow2rAdd(true);\n\n    if (!isFetchRoomsData) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <>\n            <Modal show={show1rEdit} onHide={handleEdit} animation={false}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit data:</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form>\n                        <Form.Group as={Row}>\n                            <Form.Label>Enter name of the room:</Form.Label>\n                            <Col>\n                                <Form.Control type=\"text\" value = {name}  placeholder=\"Name \" onChange={({ currentTarget }) => {\n                                setName(currentTarget.value);}} />\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row}>\n                            <Form.Label>Enter number of the room:</Form.Label>\n                            <Col>\n                                <Form.Control type=\"number\" value = {roomNum} placeholder=\"Number \" onChange={({ currentTarget }) => {\n                                setRoomNum(currentTarget.value);}}/>\n                            </Col>\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={handleEdit}>\n                        Edit\n          </Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Modal show={show2rAdd} onHide={handelAddRoom} animation={false}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add data:</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form>\n                        <Form.Group as={Row}>\n                            <Form.Label>Enter name of the room:</Form.Label>\n                            <Col>\n                                <Form.Control type=\"text\" placeholder=\"Name \" onChange={({ currentTarget }) => {\n                                setName(currentTarget.value);}} />\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row}>\n                            <Form.Label>Enter number of the room:</Form.Label>\n                            <Col>\n                                <Form.Control type=\"number\" placeholder=\"Number \"  onChange={({ currentTarget }) => {\n                                setRoomNum(currentTarget.value);}}/>\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row}>\n                            <Form.Label>Choose type:</Form.Label>\n                            <Col>\n                            <Form.Control as=\"select\" onChange={({ currentTarget }) => {\n                            setType(currentTarget.value);\n                        }} >\n                            <option value=\"\"></option>\n                            <option value=\"SUR\">surgery</option>\n                            <option value=\"APP\">exemination</option>\n                        </Form.Control>\n                            </Col>\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={handelAddRoom}>\n                        Add\n          </Button>\n                </Modal.Footer>\n            </Modal>\n            <Container>\n                <Row>\n                    <Col md={{ span: 10, offset: 1 }} xs={12}>\n                        <h3 className=\"border-bottom\">Examination and surgery rooms</h3>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={{ span: 10, offset: 1 }} xs={12}>\n                        <Form>\n\n                            <Form.Group as={Row} >\n\n                                <Form.Label>Add new surgery room:</Form.Label>\n                                <Col>\n                                    <Button onClick={handleShow2rAdd}>Add </Button>\n                                </Col>\n                            </Form.Group>\n\n                            <Form.Group as={Row} >\n\n                                <Form.Label>Search surgery rooms by name:</Form.Label>\n                                <Col>\n                                    <Form.Control type=\"text\" placeholder=\"Search \" onChange={({ currentTarget }) => {\n                                setName(currentTarget.value);}} />\n                                </Col>\n                                <Col>\n                                    <Button onClick={handleSearchRooms}>Search</Button>\n                                </Col>\n                            </Form.Group>\n\n                        </Form>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={{ span: 10, offset: 1 }} xs={12}>\n                        <Table responsive>\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Name</th>\n                                    <th>Number</th>\n                                    <th>Edit</th>\n                                    <th>Delete</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    rooms.map((room, index) => {\n                                        return (\n                                            <tr key={room.id}>\n                                                <td>{index+1}</td>\n                                                <td>{room.name}</td>\n                                                <td>{room.roomNum}</td>\n                                                <td>\n                                                    <Button variant=\"success\" onClick={()=>{handleEditShow(room)}}>Edit</Button>\n                                                </td>\n                                                <td>\n                                                    <Button  variant=\"danger\" onClick={() => {handleDelitingRooms(room)}}>Delete</Button>\n                                                </td>\n                                            </tr>\n                                        );\n                                    })\n                                }\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={{ span: 10, offset: 1 }} xs={12}>\n                        <Pagination onClick={handlePagination} className=\"pagination justify-content-center mb-5\">\n                            <Pagination.First />\n                            <Pagination.Prev />\n                            {items}\n                            <Pagination.Next />\n                            <Pagination.Last />\n                        </Pagination>\n                    </Col>\n                </Row>\n            </Container >\n        </>\n    );\n}\n\n\nexport default RoomAllAtOnce;","const reducer = 'surReqReducer';\n\nexport const surReqDataSelector = state => state[reducer].surgeryReq;\nexport const isFetchSurReqDataSelector = state => state[reducer].isFetchSurgeryReq;\nexport const surReqPageCountSelector = state => state[reducer].pageCount;\nexport const pickSurReqSelector = state => state[reducer].pickSurReq;\nexport const pickedSurReqSelector = state => state[reducer].pickedSurReq;\nexport const pickTermSelector = state => state[reducer].pickTerm;\nexport const pickedTermSelector = state => state[reducer].pickedTerm;\nexport const pickedRoomSelector = state => state[reducer].pickedRoom;","export const FETCH_SUR_REQ_DATA ='fetch_sur_req_data';\nexport const PUT_SUR_REQ_DATA = 'put_sur_req_data'; \nexport const PUT_IS_FETCH_SUR_REQ_DATA = \"put_is_fetch_sur_req_data\";\nexport const PUT_SUR_REQ_PAGE_COUNT = \"put_sur_req_page_count\";\nexport const PUT_PICK_SUR_REQ = \"put_pick_sur_req\";\nexport const FETCH_PICK_SUR_ROOM = \"fetch_pick_sur_room\";\nexport const PUT_PICKED_SUR_REQ = \"put_picked_sur_req\";\nexport const PUT_PICK_TERM = \"put_pick_term\";\nexport const FETCH_PICK_DOC = \"fetch_pick_doc\";\nexport const PUT_PICKED_TERM = \"put_picked_term\";\nexport const PUT_PICKED_ROOM = \"put_picked_room\";\nexport const FETCH_FINISH_RESERVATION = \"fetch_finish_reservation\";\nexport const PUT_RESERVATION_SUR_REQ_RESPONSE = \"put_reservation_sur_req_response\";\nexport const PUT_IS_FETCH_SUR_REQ_RESPONSE = \"put_is_fetch_req_response\";\nexport const FETCH_PUT_IS_FETCH_SUR_REQ_RESPONSE = \"fetch_put_is_fetch_req_response\";","import {\n    FETCH_SUR_REQ_DATA,\n    PUT_IS_FETCH_SUR_REQ_DATA,\n    PUT_SUR_REQ_DATA,\n    PUT_SUR_REQ_PAGE_COUNT,\n    PUT_PICK_SUR_REQ,\n    PUT_PICKED_SUR_REQ,\n    FETCH_PICK_SUR_ROOM,\n    PUT_PICK_TERM,\n    PUT_PICKED_TERM,\n    FETCH_PICK_DOC,\n    PUT_PICKED_ROOM,\n    FETCH_FINISH_RESERVATION\n} from './constants';\n\nexport const fetchFinishReservation = payload => ({\n    type: FETCH_FINISH_RESERVATION,\n    payload\n});\n\nexport const putPickedRoom = payload => ({\n    type: PUT_PICKED_ROOM,\n    payload\n});\n\nexport const putPickTerm = payload => ({\n    type: PUT_PICK_TERM,\n    payload\n});\n\nexport const putPickedTerm = payload => ({\n    type: PUT_PICKED_TERM,\n    payload\n});\n\nexport const fetchPickDoc = payload => ({\n    type: FETCH_PICK_DOC,\n    payload\n});\n\nexport const fetchPickSurRoom = payload => ({\n    type: FETCH_PICK_SUR_ROOM,\n    payload\n});\n\nexport const putPickedSurReq = payload => ({\n    type: PUT_PICKED_SUR_REQ,\n    payload\n});\n\nexport const putPickSurReq = payload => ({\n    type: PUT_PICK_SUR_REQ,\n    payload\n});\n\nexport const putSurReqPageCount = payload => ({\n    type: PUT_SUR_REQ_PAGE_COUNT,\n    payload\n});\n\nexport const fetchSurReqData = payload => ({\n    type: FETCH_SUR_REQ_DATA,\n    payload\n});\n\nexport const putIsFetchSurReqData = payload => ({\n    type: PUT_IS_FETCH_SUR_REQ_DATA,\n    payload\n});\n\nexport const putSurReqData = payload => ({\n    type: PUT_SUR_REQ_DATA,\n    payload\n});","import React, { useState } from 'react';\nimport { Container, Row, Col, Spinner, Table, Form, Button } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { roomsDataSelector, isFetchRoomsSelector } from '../../store/rooms/selectors';\nimport { pickSurReqSelector } from '../../store/sur_req/selectors';\nimport { fetchPickDoc } from '../../store/sur_req/actions';\n\n\nconst RoomList = ({ filterTerm, cnt, reason }) => {\n    const dispatch = useDispatch();\n    const rooms = useSelector(roomsDataSelector);\n    const isFetchRoomsData = useSelector(isFetchRoomsSelector);\n    const pickSurReq = useSelector(pickSurReqSelector);\n    const [pickedTerm, setPickedTerm] = useState('');\n    const [preTermins, setPreTermins] = useState([7, 10, 13, 16]);\n    const [preTerminsApp, setPreTerminsApp] = useState([7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);\n    const [validated, setValidated] = useState(false);\n\n    const handleTerm = (pickedRoom) => {\n        dispatch(\n            fetchPickDoc({\n                pickedRoom,\n                pickedTerm\n            })\n        );\n    };\n\n    const handleFirst = (pickedRoom, pickedTerm) => {\n        dispatch(\n            fetchPickDoc({\n                pickedRoom,\n                pickedTerm\n            })\n        );\n    };\n\n    if (!isFetchRoomsData) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3>Rooms list</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Name</th>\n                                <th>Number</th>\n                                <th>Free terms</th>\n                                <th>First free</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                rooms.filter(roomsDto => roomsDto.room.type.includes(filterTerm)).map((roomsDto, index) => {\n                                    return (\n                                        <tr key={roomsDto.room.id}>\n                                            <td>{cnt * 10 + index + 1}</td>\n                                            <td>{roomsDto.room.name}</td>\n                                            <td>{roomsDto.room.roomNum}</td>\n                                            <td>\n                                                <Form noValidate onSubmit={(event) => {\n                                                    const form = event.currentTarget;\n                                                    event.preventDefault();\n                                                    if (form.checkValidity() === false) {\n                                                        event.stopPropagation();\n                                                        alert('You must pick term');\n                                                        form.validate = true;\n                                                    } else {\n                                                        handleTerm(roomsDto.room.id);\n                                                        form.validate = false;\n                                                    }\n                                                }}>\n                                                    <Form.Group as={Col}>\n                                                        <Form.Control required as=\"select\" id={roomsDto.room.id} defaultValue={\"none\"} onChange={({ currentTarget }) => {\n                                                            setPickedTerm(currentTarget.value);\n                                                        }} >\n                                                            <option></option>\n                                                            {\n                                                                roomsDto.room.type === 'SUR' ?\n                                                                    preTermins.map((termin) => {\n                                                                        let flag = roomsDto.termins.includes(termin);\n                                                                        return (\n                                                                            <option key={roomsDto.room.id * 10 + termin} disabled={flag} value={roomsDto.date + \" \" + termin + \"-\" + (termin + 3)}>{termin}-{termin + 3}</option>\n                                                                        );\n                                                                    }) :\n                                                                    preTerminsApp.map((termin) => {\n                                                                        let flag = roomsDto.termins.includes(termin);\n                                                                        return (\n                                                                            <option key={roomsDto.room.id * 10 + termin} disabled={flag} value={roomsDto.date + \" \" + termin + \"-\" + (termin + 1)}>{termin}-{termin + 1}</option>\n                                                                        );\n                                                                    })\n                                                            }\n                                                        </Form.Control>\n                                                        {\n                                                            pickSurReq && roomsDto.room.type === reason ? <Button className=\"mt-2\" id={'btn'+roomsDto.room.id} type=\"submit\">Reserve</Button> : null\n                                                        }\n                                                    </Form.Group>\n\n                                                </Form>\n                                            </td>\n                                            <td>{roomsDto.firstFreeTermin}<br />\n                                                {\n                                                    pickSurReq && roomsDto.room.type === reason ? <Button id={'btnFast'+roomsDto.room.id} onClick={(e) => { handleFirst(roomsDto.room.id, roomsDto.firstFreeTermin) }}>Reserve</Button> : null\n                                                }\n                                            </td>\n                                        </tr>\n                                    );\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n        </Container >\n    );\n}\n\nexport default RoomList;","import React from 'react';\nimport { Container, Row, Col, Table } from 'react-bootstrap';\n\nconst PickedSurReq = ({ pickedSurReq }) => {\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h2 className=\"border-bottom\">Chosen surgery requirement</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>Patient</th>\n                                <th>Doctor</th>\n                                <th>Required surgery date</th>\n                                <th>Term</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n\n                            <tr key={pickedSurReq.id}>\n                                <td>{pickedSurReq.patientName}</td>\n                                <td>{pickedSurReq.doctorName}</td>\n                                <td>{pickedSurReq.date}</td>\n                                <td>{pickedSurReq.termin}-{pickedSurReq.termin + 3}</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n\n\n        </Container>\n    );\n\n}\n\nexport default PickedSurReq;","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Form, Button, Pagination, Table } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { searchRoomsData } from '../../store/rooms/actions';\nimport { pageCountSelector } from '../../store/rooms/selectors';\nimport { pickSurReqSelector, pickedSurReqSelector } from '../../store/sur_req/selectors';\nimport { userDataSelector, userIdSelector } from '../../store/user/selectors';\nimport { fetchCAdminData } from '../../store/user/actions';\nimport RoomList from './RoomList';\nimport PickedSurReq from '../SurgeryRequirement/PickedSurReq';\n\n\nconst RoomSearch = ({ match }) => {\n    const dispatch = useDispatch();\n    const id = useSelector(userIdSelector);\n    const reason = match.params.reason;\n    const data = useSelector(userDataSelector);\n    const clinicId = data.clinicId;\n    const pageCount = useSelector(pageCountSelector);\n    const pickSurReq = useSelector(pickSurReqSelector);\n    const pickedSurReq = useSelector(pickedSurReqSelector);\n    const [today, setToday] = useState(moment(new Date()).add(1,'days').format('YYYY-MM-DD'));\n    const [date, setDate] = useState(moment(new Date()).add(1,'days').format('YYYY-MM-DD'));\n    const [name, setName] = useState('');\n    const [pageCnt, setPageCnt] = useState(0);\n    const [filterTerm, setFilterTerm] = useState('');\n\n    const handleRoomsSearch = () => {\n        dispatch(\n            searchRoomsData({\n                name,\n                date,\n                clinicId,\n                pageCnt\n            })\n        );\n    };\n\n    useEffect(() => {\n        dispatch(\n            searchRoomsData({\n                name,\n                date,\n                clinicId,\n                pageCnt\n            })\n        );\n        if (id != null) {\n            dispatch(\n                fetchCAdminData({\n                    id\n                })\n            );\n        }\n    }, [pageCnt]);\n\n    let items = [];\n    for (let number = 1; number <= pageCount; number++) {\n        items.push(\n            <Pagination.Item key={number} active={number == (pageCnt + 1)}>\n                {number}\n            </Pagination.Item>\n        );\n    }\n\n    const handlePagination = (e) => {\n        e.preventDefault();\n        let event = e.target.text;\n        if (event != undefined && pageCount > 0) {\n            if (event.includes('First')) {\n                setPageCnt(0);\n            } else if (event.includes('Last')) {\n                setPageCnt(pageCount - 1);\n            } else if (event.includes('Next')) {\n                if (pageCnt < pageCount - 1) {\n                    setPageCnt(pageCnt + 1);\n                }\n            } else if (event.includes('Previous')) {\n                if (pageCnt > 0) {\n                    setPageCnt(pageCnt - 1);\n                }\n            } else {\n                setPageCnt(event - 1);\n            }\n        }\n    };\n\n    return (\n        <Container>\n            {\n                pickSurReq ?\n                    <PickedSurReq pickedSurReq={pickedSurReq} /> : null\n            }\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h2 className=\"border-bottom\">Search rooms</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Form>\n                        <Form.Row>\n                            <Form.Group as={Col} >\n                                <Form.Label>Room name:</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Name\"\n                                    onChange={({ currentTarget }) => {\n                                        setName(currentTarget.value);\n                                    }} />\n                            </Form.Group>\n                            <Form.Group as={Col} >\n                                <Form.Label>Date:</Form.Label>\n                                <Form.Control type=\"date\" min={today} value={date} id=\"date1\"\n                                    onChange={({ currentTarget }) => {\n                                        setDate(currentTarget.value);\n                                    }}\n                                    onKeyDown={() => {\n                                        return false;\n                                    }} />\n                            </Form.Group>\n                        </Form.Row>\n                        <Button variant=\"primary\" className=\"mb-4\" onClick={handleRoomsSearch}>\n                            Search\n                        </Button>\n\n                    </Form>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 1 }} xs={12}>\n                    <Form>\n                        <Form.Label>Filter by:</Form.Label>\n                        <Form.Control as=\"select\" onChange={({ currentTarget }) => {\n                            setFilterTerm(currentTarget.value);\n                        }} >\n                            <option value=\"\"></option>\n                            <option value=\"SUR\">type: surgery</option>\n                            <option value=\"APP\">type: exemination</option>\n                        </Form.Control>\n                    </Form>\n                </Col>\n            </Row>\n            <RoomList cnt={pageCnt} filterTerm={filterTerm} reason={reason} />\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Pagination onClick={handlePagination} className=\"pagination justify-content-center mb-5\">\n                        <Pagination.First />\n                        <Pagination.Prev />\n                        {items}\n                        <Pagination.Next />\n                        <Pagination.Last />\n                    </Pagination>\n                </Col>\n            </Row>\n        </Container>\n    );\n\n}\n\nexport default RoomSearch;","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { userDataSelector, userTokenSelector } from \"../store/user/selectors\";\n\nconst PrivateRoute = ({ component: Component, accessRole = null, ...rest }) => {\n    const userData = useSelector(userDataSelector);\n    const userToken = useSelector(userTokenSelector);\n\n    function hasRightRole() {\n        if (!accessRole) {\n            return true;\n        }\n\n        const role = userData.roles.filter(val => accessRole.includes(val));\n        return role.length > 0 && !userDataSelector.firstLogin;\n    }\n\n    return (\n        <Route\n            {...rest}\n            render={props =>\n                userData && userToken && hasRightRole() ? (\n                    <Component {...props} />\n                ) : (\n                        <Redirect to=\"/page-not-found\" />\n                    )\n            }\n        />\n    );\n};\n\nexport default PrivateRoute;\n","const reducer = 'doctorsReducer';\n\nexport const doctorsDataSelector = state => state[reducer].doctors;\nexport const isFetchDoctorsSelector = state => state[reducer].isFetchDoctors;\nexport const pageCountSelector = state => state[reducer].pageCount;","//1.sa back na front pa put koja stavlja u store\nexport const FETCH_DOCTORS_DATA = 'fetch_doctors_data';\nexport const FETCH_DOCTORS_DATA_ON_CLINIC = 'fetch_doctors_data_on_clinic';\nexport const PUT_DOCTORS_DATA = 'put_doctor';\nexport const ADD_DOCTOR = 'add_doctor';\nexport const DELETE_DOCTOR = 'delete_doctor';\nexport const PUT_IS_FETCH_DOCTORS_DATA = 'put_is_fetch_doctors_data';\nexport const SEARCH_DOCTOR = 'search_doctor';\nexport const PUT_PAGE_COUNT = \"put_page_count\";\nexport const FETCH_DOCTORS_BY_CLINICID = 'fetch_doctors_by_clinicid';\nexport const SEARCH_DOCTORS = 'search_doctors';","import {\n    FETCH_DOCTORS_DATA,\n    PUT_DOCTORS_DATA,\n    ADD_DOCTOR,\n    DELETE_DOCTOR,\n    PUT_IS_FETCH_DOCTORS_DATA,\n    SEARCH_DOCTOR,\n    SEARCH_DOCTORS,\n    PUT_PAGE_COUNT,\n    FETCH_DOCTORS_BY_CLINICID\n} from './constants';\n\nexport const putPageCount = payload => ({\n    type: PUT_PAGE_COUNT,\n    payload\n});\n\n\nexport const putIsFetchDoctors = payload => ({\n    type: PUT_IS_FETCH_DOCTORS_DATA,\n    payload\n});\n\nexport const putDoctorsData = payload => ({\n    type: PUT_DOCTORS_DATA,\n    payload\n});\n\nexport const fetchDoctorsByClinicId = payload => ({\n    type: FETCH_DOCTORS_BY_CLINICID,\n    payload\n});\n\nexport const fetchDoctorsData = payload => ({\n    type: FETCH_DOCTORS_DATA,\n    payload\n});\n\nexport const addDoctor = payload => ({\n    type: ADD_DOCTOR,\n    payload\n});\n\nexport const searchDoctor = payload => ({\n    type: SEARCH_DOCTOR,\n    payload\n});\n\nexport const searchDoctors = payload => ({\n    type: SEARCH_DOCTORS,\n    payload\n});\n\nexport const deleteDoctor = payload => ({\n    type: DELETE_DOCTOR,\n    payload\n});\n\n","import React,{useState, useEffect} from 'react';\nimport { Container, Row, Form, Col, Button, Table, Modal, Spinner } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { doctorsDataSelector, isFetchDoctorsSelector } from '../../store/doctors/selectors';\nimport { fetchDoctorsByClinicId, addDoctor, deleteDoctor ,searchDoctors} from '../../store/doctors/actions';\n\nconst DoctorAllAtOnce = ({ match }) => {\n    const dispatch = useDispatch();\n    const clinicId = match.params.clinicId;\n    const [email, setEmail] = useState();\n    const [password1, setPassword1] = useState();\n    const [password2, setPassword2] = useState();\n    const [firstName, setFirstName] = useState();\n    const [lastName, setLastName] = useState();\n    const [startTime, setStartTime] = useState();\n    const [endTime, setEndTime] = useState();\n    const [doctorId, setDoctorId] = useState(0);\n    const doctors = useSelector(doctorsDataSelector);\n    const isFetchDoctors = useSelector(isFetchDoctorsSelector);\n\n    const handleDelete = (doctor) => {\n        dispatch(\n            deleteDoctor({id:doctor.id, clinicId})\n        );\n    }\n\n    const handleAddDoctor = () => {\n        \n        dispatch(\n            addDoctor({\n                email,\n                password1,\n                password2,\n                firstName,\n                lastName,\n                startTime,\n                endTime,\n                clinicId\n            })\n        );\n        setShow(false);\n    };\n    //eslint-disable-next-line\n    const handleSearch = () => {\n        dispatch(\n           searchDoctors({lastName, clinicId})\n        );\n    };\n    \n    useEffect(() => {\n       dispatch(\n            //fetchDoctorsData({})\n            fetchDoctorsByClinicId({clinicId})\n        );\n    }, []);\n\n\n    const [show, setShow] = useState(false);\n\n   // const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    if (!isFetchDoctors) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <>\n        <Modal show={show} onHide={handleAddDoctor} animation={false}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add data:</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Row>\n                        <Form.Group as={Col} >\n                            <Form.Label>E-mail address</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"E-mail\" onChange={( { currentTarget } ) => {\n                                    setEmail(currentTarget.value);\n                            }}   />\n                        </Form.Group>\n                    </Form.Row>\n                    <Form.Row>\n                        <Form.Group as={Col}>\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Password\"  onChange={( { currentTarget } ) => {\n                                    setPassword1(currentTarget.value);\n                            }} />\n                        </Form.Group>\n                        <Form.Group as={Col} >\n                            <Form.Label>Confirm password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Confirm your password\"  onChange={( { currentTarget } ) => {\n                                    setPassword2(currentTarget.value);\n                            }} />\n                        </Form.Group>\n\n                    </Form.Row>\n                    <Form.Row>\n                        <Form.Group as={Col}>\n                            <Form.Label>First name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"First name\" onChange={( { currentTarget } ) => {\n                                    setFirstName(currentTarget.value);\n                            }}  />\n                        </Form.Group>\n                        <Form.Group as={Col} >\n                            <Form.Label>Last name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Last name\"   onChange={( { currentTarget } ) => {\n                                    setLastName(currentTarget.value);\n                            }}/>\n                        </Form.Group>\n                    </Form.Row>\n                    <Form.Row>\n                        <Form.Group as={Col}>\n                            <Form.Label>Start time</Form.Label>\n                            <Form.Control type=\"number\" placeholder=\"Start time\" onChange={( { currentTarget } ) => {\n                                    setStartTime(currentTarget.value);\n                            }}  />\n                        </Form.Group>\n                        <Form.Group as={Col} >\n                            <Form.Label>End time</Form.Label>\n                            <Form.Control type=\"number\" placeholder=\"End time\"   onChange={( { currentTarget } ) => {\n                                    setEndTime(currentTarget.value);\n                            }}/>\n                        </Form.Group>\n                    </Form.Row>\n                    \n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={handleAddDoctor} >\n                    Add\n                </Button>\n            </Modal.Footer>\n        </Modal>\n\n\n        <Container>\n            <Row>\n                <Col md={{ span:10, offset:1  }} xs={12}>\n                    <h3  className=\"border-bottom\" >Doctors</h3>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col md={{ span:5, offset:1  }} xs={12}>\n                <Form>\n\n                    <Form.Group as={Row} >\n\n                        <Form.Label>Add new doctor:</Form.Label>\n                        <Col>\n                            <Button onClick={handleShow}>Add </Button>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} >\n\n                        <Form.Label>Search doctors by last name:</Form.Label>\n                        <Col>\n                            <Form.Control type=\"text\" placeholder=\"Search \" onChange={( { currentTarget } ) => {\n                                    setLastName(currentTarget.value)}}/>\n                        </Col>\n                        <Col>\n                            <Button onClick={handleSearch}>Search</Button>\n                        </Col>\n                    </Form.Group>\n\n                </Form>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col md={{ span:10, offset:1  }} xs={12}>\n                <Table responsive>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First name</th>\n                            <th>Last name</th>\n                            <th>Delete </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                            {\n                               doctors.map((doctor, index) => {\n                                return (\n                                    <tr key={doctor.id}>\n                                        <td>{index + 1}</td>\n                                        <td>{doctor.firstName}</td>\n                                        <td>{doctor.lastName}</td>\n                                        <td><Button variant=\"danger\" onClick={()=>{handleDelete(doctor)}} >Delete</Button></td>\n                                        \n                                    </tr>\n                                );\n                            })\n                            \n                            }\n                        </tbody>\n                </Table>\n                </Col>\n            </Row>\n\n\n        </Container >\n        </>\n    );\n}\n\nexport default DoctorAllAtOnce;","import React from 'react';\nimport {Container, Row, Col, Form, Button} from 'react-bootstrap';\n\nconst ClinicsProfileInfo = () =>{\n    return(\n        <Container>\n            <Row>\n                <Col md={{ span:4, offset: 3 }} xs={12}>\n                    <Form>\n                        <Form.Group controlId=\"formBasicCname\">\n                            <Form.Label>Clinic's name</Form.Label>\n                            <Form.Control type=\"text\"  />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formBasicCaddress\">\n                            <Form.Label>Address</Form.Label>\n                            <Form.Control type=\"text\"/>\n                            <Form.Label>*****Mapa fali*****</Form.Label>\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formBasicCdescription\">\n                            <Form.Label>Description</Form.Label>\n                            <Form.Control type=\"text\"/>\n                        </Form.Group>\n\n\n                        <Button variant=\"primary\" >\n                            Edit\n                        </Button>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default ClinicsProfileInfo;","import React from 'react';\nimport { Nav, Col, Row , Tab} from 'react-bootstrap';\nimport ClinicProfileInfo from \"./ClinicsProfileInfo\";\n\nconst ClinicProfile = () => {\n    return(\n        <Tab.Container id=\"left-tabs-doc-home\" >\n            <Row>\n            <Col sm={3}>\n            <Nav variant=\"pills\" className=\"flex-column\">\n                \n                \n                \n                <Nav.Item>\n                <Nav.Link eventKey=\"fifth\">Clinic info</Nav.Link>\n                </Nav.Item>\n            </Nav>\n            </Col>\n            <Col sm={9}>\n            <Tab.Content>\n                \n                \n                \n                <Tab.Pane eventKey=\"fifth\">\n                    <ClinicProfileInfo/>\n                </Tab.Pane>\n            </Tab.Content>\n            </Col>\n        </Row>\n        </Tab.Container>\n    );\n}\n\nexport default ClinicProfile;","import React, { Component } from 'react';\nimport {Container, Col,Row, Form} from 'react-bootstrap';\n\nconst AvgClinicRating = () => {\n    return(\n        <Container>\n            <Row>\n                <Col md={{ span:3, offset: 1 }} xs={12}>\n                    <Form>\n                        <Form.Group controlId=\"formBasicAvg\">\n                            <Form.Label>The average rating of the clinic:</Form.Label>\n                            <Form.Control type=\"text\"  />\n                        </Form.Group>\n \n                        <Form.Group controlId=\"formBasicNumber\">\n                            <Form.Label>Number of persones who rated the clinic</Form.Label>\n                            <Form.Control type=\"text\"  />\n                        </Form.Group>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default AvgClinicRating;","import React from 'react';\nimport {Container, Row, Col, Table} from 'react-bootstrap';\n\nconst AvgDocctorRating = () => {\n    return(\n        <Container>\n            <Row >\n                <Col md={{ span:10, offset:1 }} xs={12}>\n                    <h3 className=\"border-bottom\">Average doctors rating</h3>\n                </Col>\n            </Row>\n            <Row>\n                    <Col md={{span:10, offset:1}} xs={12}>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Rating</th>\n                            <th>No. of reviewers</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                            <td>1</td>\n                            <td>Pera</td>\n                            <td>Peric</td>\n                            <td>5</td>\n                            <td>3</td>\n                            </tr>\n                            <tr>\n                            <td>2</td>\n                            <td>Ana</td>\n                            <td>Kuk</td>\n                            <td>4.5</td>\n                            <td>2</td>\n                            </tr>\n                            <tr>\n                            <td>3</td>\n                            <td>Ivo</td>\n                            <td>Tot</td>\n                            <td>3</td>\n                            <td>1</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default AvgDocctorRating;","import React from 'react';\nimport {Container, Row, Spinner} from 'react-bootstrap';\n\nconst Graphs = () => {\n    return(\n        <Container>\n            <Row>\n                <h3>Graphs</h3>\n            </Row>\n            <Row>\n                <Spinner animation=\"grow\" variant=\"primary\" />\n                <Spinner animation=\"grow\" variant=\"secondary\" />\n                <Spinner animation=\"grow\" variant=\"success\" />\n                <Spinner animation=\"grow\" variant=\"danger\" />\n                <Spinner animation=\"grow\" variant=\"warning\" />\n                <Spinner animation=\"grow\" variant=\"info\" />\n                <Spinner animation=\"grow\" variant=\"light\" />\n                <Spinner animation=\"grow\" variant=\"dark\" />\n            </Row>\n        </Container>\n    );\n}\nexport default Graphs;","import React from 'react';\nimport {Container,Row, Spinner} from 'react-bootstrap';\n\nconst Incomes = () => {\n    return(\n        <Container>\n            <Row>\n                <h3>Incomes</h3>\n            </Row>\n            <Row>\n                <Spinner animation=\"grow\" variant=\"primary\" />\n                <Spinner animation=\"grow\" variant=\"secondary\" />\n                <Spinner animation=\"grow\" variant=\"success\" />\n                <Spinner animation=\"grow\" variant=\"danger\" />\n                <Spinner animation=\"grow\" variant=\"warning\" />\n                <Spinner animation=\"grow\" variant=\"info\" />\n                <Spinner animation=\"grow\" variant=\"light\" />\n                <Spinner animation=\"grow\" variant=\"dark\" />\n            </Row>\n        </Container>\n    );\n}\n\nexport default Incomes;","import React from 'react';\nimport {Nav, Col, Row, Tab} from 'react-bootstrap';\nimport AvgClinicRating from './AvgClinicRating';\nimport AvgDoctorRating from './AvgDoctorRatng';\nimport Graphs from './Graphs';\nimport Incomes from './Incomes';\n\nconst BusinessReport = () => {\n    return(\n        <Tab.Container id=\"left-tabs-doc-home\" >\n            <Row>\n            <Col sm={3}>\n            <Nav variant=\"pills\" className=\"flex-column\">\n                <Nav.Item>\n                <Nav.Link eventKey=\"first\">Average clinics rating</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                <Nav.Link eventKey=\"second\">Average doctors rating</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                <Nav.Link eventKey=\"third\">Graphs</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                <Nav.Link eventKey=\"fourth\">Incomes</Nav.Link>\n                </Nav.Item>\n            </Nav>\n            </Col>\n            <Col sm={9}>\n            <Tab.Content>\n                <Tab.Pane eventKey=\"first\">\n                    <AvgClinicRating/>\n                </Tab.Pane>\n                <Tab.Pane eventKey=\"second\">\n                    <AvgDoctorRating/>\n                </Tab.Pane>\n                <Tab.Pane eventKey=\"third\">\n                    <Graphs/>\n                </Tab.Pane>\n                <Tab.Pane eventKey=\"fourth\">\n                    <Incomes/>\n                </Tab.Pane>\n                </Tab.Content>\n            </Col>\n        </Row>\n        </Tab.Container>\n    );\n}\n\nexport default BusinessReport;","import React from 'react';\nimport { Row, Col, Container, Table, Button } from 'react-bootstrap';\nimport { userDataSelector } from '../store/user/selectors';\nimport { useSelector } from 'react-redux';\n\nconst UserProfile = ({ }) => {\n    const data = useSelector(userDataSelector);\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h2 className=\"border-bottom\">User profile</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <tbody>\n                            <tr>\n                                <th>First name</th>\n                                <td align=\"right\">{data.firstName}</td>\n                            </tr>\n                            <tr>\n                                <th>Last name</th>\n                                <td align=\"right\">{data.lastName}</td>\n                            </tr>\n                            <tr>\n                                <th>Email</th>\n                                <td align=\"right\">{data.email}</td>\n                            </tr>\n                            <tr>\n                                <th>Password</th>\n                                <td align=\"right\">\n                                    <a href=\"/change-pass\">Change password</a>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"2\" align=\"right\">\n                                    <Button>Edit data</Button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default UserProfile;","import React from 'react';\nimport {Container, Row, Spinner} from 'react-bootstrap';\n\nconst FreeApointment = () => {\n    return(\n        <Container>\n            <Row>\n                <h3>Free appointments - in progress</h3>\n            </Row>\n            <Row>\n                <Spinner animation=\"grow\" variant=\"primary\" />\n                <Spinner animation=\"grow\" variant=\"secondary\" />\n                <Spinner animation=\"grow\" variant=\"success\" />\n                <Spinner animation=\"grow\" variant=\"danger\" />\n                <Spinner animation=\"grow\" variant=\"warning\" />\n                <Spinner animation=\"grow\" variant=\"info\" />\n                <Spinner animation=\"grow\" variant=\"light\" />\n                <Spinner animation=\"grow\" variant=\"dark\" />\n            </Row>\n        </Container>\n    );\n}\n\nexport default FreeApointment;","export const PUT_APPOINTMENT_TYPES = 'put_appointment_types';\nexport const FETCH_APPOINTMENT_TYPE = 'fetch_appointment_type';\nexport const ADD_APPOINTMENT_TYPE = 'add_appointment_type';\nexport const PUT_IS_FETCH_APPOINTMENT_TYPES = 'is_fetch_appointment_typeS';\nexport const DELETE_APPOINTMENT_TYPE = 'delete_appointment_type';\nexport const EDIT_APPOINTMENT_TYPE = 'edit_appointment_type';\nexport const SEARCH_APPOINTMENT_TYPE = 'search_appointment_type';\nexport const FETCH_APPOINTMENT = 'fetch_appointment';\nexport const PUT_APPOINTMENT = 'put_appointment';\nexport const PUT_IS_FETCH_APPOINTMENT = 'put_is_fetch_appointment';\n","import {\n    PUT_APPOINTMENT_TYPES,\n    FETCH_APPOINTMENT_TYPE,\n    DELETE_APPOINTMENT_TYPE,\n    ADD_APPOINTMENT_TYPE,\n    EDIT_APPOINTMENT_TYPE,\n    PUT_IS_FETCH_APPOINTMENT_TYPES,\n    SEARCH_APPOINTMENT_TYPE,\n    FETCH_APPOINTMENT,\n    PUT_APPOINTMENT,\n    PUT_IS_FETCH_APPOINTMENT\n} from './constants';\n\nexport const putIsFetchAppointment = payload => ({\n    type: PUT_IS_FETCH_APPOINTMENT,\n    payload\n});\n\nexport const fetchAppointment = payload => ({\n    type: FETCH_APPOINTMENT,\n    payload\n});\n\nexport const putAppointment = payload => ({\n    type: PUT_APPOINTMENT,\n    payload\n});\n\nexport const fetchAppointmentType = payload => ({\n    type: FETCH_APPOINTMENT_TYPE,\n    payload\n});\n\nexport const putAppointmentTypes = payload => ({\n    type: PUT_APPOINTMENT_TYPES,\n    payload\n});\n\nexport const putIsFetchAppointmentTypes = payload => ({\n    type: PUT_IS_FETCH_APPOINTMENT_TYPES,\n    payload\n});\n\nexport const addAppointmentType = payload => ({\n    type: ADD_APPOINTMENT_TYPE,\n    payload\n});\n\nexport const deleteAppointmentType = payload => ({\n    type: DELETE_APPOINTMENT_TYPE,\n    payload\n});\n\nexport const editAppointmentType = payload => ({\n    type: EDIT_APPOINTMENT_TYPE,\n    payload\n});\n\nexport const searchAppointmentType = payload => ({\n    type: SEARCH_APPOINTMENT_TYPE,\n    payload\n});","const reducer = 'appointmentReducer';\n\nexport const appointmentTypeSelector = state => state[reducer].appointmentTypes;\nexport const isFetchAppointmentTypeSelector = state => state[reducer].isFetchAppointmentTypes;\nexport const appIdSelector = state => state[reducer].id;\nexport const appointmentSelector = state => state[reducer].appointment;\nexport const isFetchAppointmentSelector = state => state[reducer].isFetchAppointment;\n","import React, { useState, useEffect } from 'react';\nimport { Table, Container, Col, Row, Form, Button, Modal, Spinner } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addAppointmentType, fetchAppointmentType, deleteAppointmentType, editAppointmentType, searchAppointmentType } from '../../store/appointments/actions';\nimport { appointmentTypeSelector, isFetchAppointmentTypeSelector } from '../../store/appointments/selectors';\nimport { userDataSelector } from '../../store/user/selectors';\n\n\nconst AppointmentTypAllAtOnce = () => {\n    const dispatch = useDispatch();\n    const [type, setType] = useState('');\n    const [typeId, setTypeId] = useState(0);\n    const [cliId, setCliId] = useState(0);\n    const appointmentTypes = useSelector(appointmentTypeSelector);\n    const isFetchAppointmentTypes = useSelector(isFetchAppointmentTypeSelector);\n    const data = useSelector(userDataSelector);\n    const clinicId = data.clinicId;\n    const [show1, setShow1] = useState(false);\n    const [show2, setShow2] = useState(false);\n\n    const handleShow2 = () => setShow2(true);\n\n    const handleEdit = () => {\n        dispatch(\n            editAppointmentType({id:typeId, type, clinicId})\n        );\n        setShow1(false);\n    }\n\n    const handleEditShow  = (appointment)=>{\n        setType(appointment.type);\n        setTypeId(appointment.id);\n        setShow1(true);\n    }\n\n    const handleDelete = (appointment) => {\n        //console.log(appointment);\n        dispatch(\n            deleteAppointmentType({id:appointment.id, clinicId})\n        );\n    }\n\n    const handleAddAppointmentType = () => {\n        setCliId(clinicId);\n        dispatch(\n            addAppointmentType({\n                type,  clinicId\n            })\n        );\n        setShow2(false);\n    };\n    //console.log(clinicId);\n\n    const handleSearchAppointmentType = () => {\n        dispatch(\n            searchAppointmentType({type, clinicId})\n        );\n    };\n\n    useEffect(() => {\n        dispatch(\n            fetchAppointmentType({clinicId})\n        );\n    }, [clinicId]);\n\n    if (!isFetchAppointmentTypes) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <>\n            <Modal show={show1} onHide={handleEdit} animation={false}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit data:</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form>\n                        <Form.Group as={Col}>\n                            <Form.Label>Type:</Form.Label>\n                            <Form.Control type=\"text\" value={type} onChange={({ currentTarget }) => {\n                                setType(currentTarget.value);}} />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={handleEdit}>\n                        Edit\n          </Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Modal show={show2} onHide={handleAddAppointmentType} animation={false}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add data:</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form>\n                        <Form.Group as={Col}>\n                            <Form.Label>Type:</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter a new type\" onChange={({ currentTarget }) => {\n                                setType(currentTarget.value);\n                            }} />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={handleAddAppointmentType} >\n                        Add\n          </Button>\n                </Modal.Footer>\n            </Modal>\n\n\n\n            <Container>\n                <Row >\n                    <Col md={{ span: 10, offset: 1 }} xs={12}>\n                        <h3 className=\"border-bottom\">Appointment types</h3>\n                    </Col>\n                </Row>\n                <Row >\n                    <Col md={{ span: 5, offset: 1 }} xs={12}>\n                        <Form>\n                            <Form.Group as={Row} >\n\n                                <Form.Label>Add new appointment type:</Form.Label>\n                                <Col>\n                                    <Button onClick={handleShow2} >Add </Button>\n                                </Col>\n                            </Form.Group>\n\n                            <Form.Group as={Row} >\n\n                                <Form.Label>Search appointment types:</Form.Label>\n                                <Col>\n                                    <Form.Control type=\"text\" placeholder=\"Search \"  onChange={({ currentTarget }) => {\n                                setType(currentTarget.value);}}/>\n                                </Col>\n                                <Col>\n                                    <Button onClick={handleSearchAppointmentType}>Search</Button>\n                                </Col>\n                            </Form.Group>\n\n\n                        </Form>\n                    </Col>\n                </Row>\n                <Row  >\n                    <Col md={{ span: 10, offset: 1 }} xs={12}>\n                        <Table responsive>\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Type</th>\n                                    <th>Edit</th>\n                                    <th>Delete</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    appointmentTypes.map((appointment, index) => {\n                                        return (\n                                            <tr key={appointment.id}>\n                                                <td>{index + 1}</td>\n                                                <td>{appointment.type}</td>\n                                                <td><Button variant=\"success\" onClick={()=>{handleEditShow(appointment)}}>Edit</Button></td>\n                                                <td><Button variant=\"danger\" onClick={()=>{handleDelete(appointment);}}>Delete</Button></td>\n                                            </tr>\n                                        );\n                                    })\n                                }\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n            </Container >\n        </>\n    );\n}\n\nexport default AppointmentTypAllAtOnce;","import React from 'react';\nimport { Container, Row , Col,Table } from 'react-bootstrap';\n\nconst Pricelist = () => {\n    return(\n        <Container>\n             <Row >\n                <Col md={{ span:10, offset:1 }} xs={12}>\n                    <h3 className=\"border-bottom\">Pricelist</h3>\n                </Col>\n            </Row>\n            <Row>\n            <Col md={{ span:10,offset:1}} xs={12}>\n                <Table responsive>\n                    <thead>\n                        <tr>\n                        <th>Appointment</th>\n                        <th>Price</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                        <td>Vadjenje zuba</td>\n                        <td>100</td>\n                        </tr>\n                        <tr>\n                        <td>Vadjenje krvi</td>\n                        <td>50</td>\n                        </tr>\n                        \n                    </tbody>\n                </Table>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default Pricelist;","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Table, Button, Col, Spinner, Pagination } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { surReqDataSelector, isFetchSurReqDataSelector, surReqPageCountSelector } from '../../store/sur_req/selectors';\nimport { fetchSurReqData, fetchPickSurRoom } from '../../store/sur_req/actions';\n\nconst SurgeryReq = ({ match }) => {\n    const dispatch = useDispatch();\n    const clinicId = match.params.clinicId;\n    const [pageCnt, setPageCnt] = useState(0);\n    const isFetchSurReqData = useSelector(isFetchSurReqDataSelector);\n    const surReqs = useSelector(surReqDataSelector);\n    const pageCount = useSelector(surReqPageCountSelector);\n\n    useEffect(() => {\n        dispatch(\n            fetchSurReqData({\n                clinicId,\n                pageCnt\n            })\n        );\n    }, [pageCnt]);\n\n    const handlePickRoom = (pickedSurReq) => {\n        dispatch(\n            fetchPickSurRoom({\n                pickedSurReq\n            })\n        );\n    }\n\n    let items = [];\n    for (let number = 1; number <= pageCount; number++) {\n        items.push(\n            <Pagination.Item key={number} active={number == (pageCnt + 1)}>\n                {number}\n            </Pagination.Item>\n        );\n    }\n\n    const handlePagination = (e) => {\n        e.preventDefault();\n        let event = e.target.text;\n        if (event != undefined) {\n            if (event.includes('First')) {\n                setPageCnt(0);\n            } else if (event.includes('Last')) {\n                setPageCnt(pageCount - 1);\n            } else if (event.includes('Next')) {\n                if (pageCnt < pageCount - 1) {\n                    setPageCnt(pageCnt + 1);\n                }\n            } else if (event.includes('Previous')) {\n                if (pageCnt > 0) {\n                    setPageCnt(pageCnt - 1);\n                }\n            } else {\n                setPageCnt(event - 1);\n            }\n        }\n    };\n\n    if (!isFetchSurReqData) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3 className=\"border-bottom\">Surgery requirements</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Patient</th>\n                                <th>Doctor</th>\n                                <th>Required surgery date</th>\n                                <th>Term</th>\n                                <th>Action</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                surReqs.map((surReq, index) => {\n                                    return (\n                                        <tr key={surReq.id}>\n                                            <td>{index + 1}</td>\n                                            <td>{surReq.patientName}</td>\n                                            <td>{surReq.doctorName}</td>\n                                            <td>{surReq.date}</td>\n                                            <td>{surReq.termin}-{surReq.termin + 3}</td>\n                                            <td>\n                                                <Button onClick={(e) => handlePickRoom(surReq)}>Reserve this</Button>\n                                            </td>\n                                        </tr>\n                                    );\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Pagination onClick={handlePagination} className=\"pagination justify-content-center mb-5\">\n                        <Pagination.First />\n                        <Pagination.Prev />\n                        {items}\n                        <Pagination.Next />\n                        <Pagination.Last />\n                    </Pagination>\n                </Col>\n            </Row>\n        </Container>\n    );\n\n}\n\nexport default SurgeryReq;","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { signOut } from '../store/user/actions';\n\nconst Unauthorized = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        setTimeout(() => {\n            dispatch(\n                signOut({\n                    'id': null,\n                    'firstName': '',\n                    'lastName': '',\n                    'email': '',\n                    'firstLog': true,\n                    'roles': []\n                })\n            );\n        }, 5000);\n    }, []);\n\n    return (\n        <div>\n            <h2>You are not authorized ERROR 401 please login!</h2>\n            <p>You will be redirected to home page in 5 seconds...</p>\n        </div>\n    );\n}\n\nexport default Unauthorized;","export const FETCH_PATIENTS_DATA = 'fetch_patients_data';\nexport const FETCH_PATIENTS_DATA_BY_CLINIC_ID = 'fetch_patients_data_by_clinic_id';\nexport const PUT_PATIENTS_DATA = 'put_patients_data';\nexport const PUT_IS_FETCH_PATIENTS = 'put_is_fetch_patients';\nexport const FETCH_PATIENT_BY_APP = 'fetch_patient_by_app';\nexport const PUT_PATIENT = 'put_patient';\nexport const FETCH_PATIENTS_PAGINATION = \"fetch_patients_pagination\";","import {\n    FETCH_PATIENTS_DATA,\n    FETCH_PATIENTS_DATA_BY_CLINIC_ID,\n    PUT_PATIENTS_DATA,\n    PUT_IS_FETCH_PATIENTS,\n    FETCH_PATIENT_BY_APP,\n    PUT_PATIENT,\n    FETCH_PATIENTS_PAGINATION\n} from './constants';\n\nexport const fetchPatientsPagination = payload => ({\n    type: FETCH_PATIENTS_PAGINATION,\n    payload\n});\n\nexport const fetchPatientByApp = payload => ({\n    type: FETCH_PATIENT_BY_APP,\n    payload\n});\n\nexport const putPatient = payload => ({\n    type: PUT_PATIENT,\n    payload\n});\n\nexport const fetchPatientsDataByClinicId = payload => ({\n    type: FETCH_PATIENTS_DATA_BY_CLINIC_ID,\n    payload\n});\n\nexport const fetchPatientsData = payload => ({\n    type: FETCH_PATIENTS_DATA,\n    payload\n});\n\nexport const putPatientsData = payload => ({\n    type: PUT_PATIENTS_DATA,\n    payload\n});\n\nexport const putIsFetchPatients = payload => ({\n    type: PUT_IS_FETCH_PATIENTS,\n    payload\n});\n","const reducer = 'patientsReducer';\n\nexport const patientsSelector = state => state[reducer].patients;\nexport const isFetchPatientsSelector = state => state[reducer].isFetchPatients;\nexport const patientSelector = state => state[reducer].patient;\n","import React from 'react';\nimport { useSelector } from 'react-redux'\nimport { Table, Row, Col, Container, Spinner } from 'react-bootstrap';\nimport { patientsSelector, isFetchPatientsSelector } from '../../store/patients/selectors';\n\n\nconst PatientList = () => {\n    const patients = useSelector(patientsSelector);\n    const isFetchPatients = useSelector(isFetchPatientsSelector);\n\n    if (!isFetchPatients) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row >\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3 className=\"border-bottom\">Patients list</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>First Name</th>\n                                <th>Last Name</th>\n                                <th>Email</th>\n                                <th>Phone</th>\n                                <th>Address</th>\n                                <th>City</th>\n                                <th>Country</th>\n                                <th>UNOIP</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                patients.map((patient, index) => {\n                                    return (\n                                        <tr key={index}>\n                                            <td>{patient.firstName}</td>\n                                            <td>{patient.lastName}</td>\n                                            <td>{patient.email}</td>\n                                            <td>{patient.phoneNum}</td>\n                                            <td>{patient.address}</td>\n                                            <td>{patient.city}</td>\n                                            <td>{patient.country}</td>\n                                            <td>{patient.unoip}</td>\n\n                                        </tr>\n                                    );\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\nexport default PatientList;","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Pagination, Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPatientsPagination } from '../../store/patients/actions';\nimport { pageCntSelector, pageSelCntSelector } from '../../store/common/selectors';\nimport { userDataSelector } from '../../store/user/selectors';\nimport PatientList from './PatientList';\n\n\nconst PatientPagination = () => {\n    const dispatch = useDispatch();\n    const data = useSelector(userDataSelector);\n    const patientPageCnt = useSelector(pageCntSelector);\n    const selpageCnt = useSelector(pageSelCntSelector);\n    const [pageCnt, setPageCnt] = useState(selpageCnt);\n    const [sort, setSort] = useState(0);\n\n    useEffect(() => {\n        dispatch(\n            fetchPatientsPagination({\n                clinicId: data.clinicId,\n                pageCnt,\n                sort\n            })\n        );\n    }, [pageCnt, sort]);\n\n    const handleSerachPatients = (event) => {\n        event.preventDefault();\n        dispatch(\n            fetchPatientsPagination({\n                clinicId: data.clinicId,\n                pageCnt,\n                sort\n            })\n        );\n    };\n\n    let items = [];\n    for (let number = 1; number <= patientPageCnt; number++) {\n        items.push(\n            <Pagination.Item key={number} active={number == (selpageCnt + 1)}>\n                {number}\n            </Pagination.Item>\n        );\n    }\n\n    const handlePagination = (e) => {\n        e.preventDefault();\n        let event = e.target.text;\n        if (event != undefined && patientPageCnt > 0) {\n            if (event.includes('First')) {\n                setPageCnt(0);\n            } else if (event.includes('Last')) {\n                setPageCnt(patientPageCnt - 1);\n            } else if (event.includes('Next')) {\n                if (pageCnt < patientPageCnt - 1) {\n                    setPageCnt(pageCnt + 1);\n                }\n            } else if (event.includes('Previous')) {\n                if (pageCnt > 0) {\n                    setPageCnt(pageCnt - 1);\n                }\n            } else {\n                setPageCnt(event - 1);\n            }\n        }\n    };\n\n    return (\n        <Container>\n            <Row >\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3 className=\"border-bottom\">Patients list</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n\n                    <Form onSubmit={handleSerachPatients}>\n                        <Form.Row>\n                            <Form.Group as={Col} md=\"3\">\n                                <Form.Label>Sort by:</Form.Label>\n                                <Form.Control as=\"select\" onChange={({ currentTarget }) => {\n                                    setSort(currentTarget.value);\n                                }} >\n                                    <option value=\"0\">-</option>\n                                    <option value=\"1\">First name (asc)</option>\n                                    <option value=\"2\">First name (desc)</option>\n                                    <option value=\"3\">Last name (asc)</option>\n                                    <option value=\"4\">Last name (desc)</option>\n                                    <option value=\"5\">UNOIP (asc)</option>\n                                    <option value=\"6\">UNOIP (desc)</option>\n                                </Form.Control>\n                            </Form.Group>\n                        </Form.Row>\n                        <Button variant=\"primary\" type=\"submit\">\n                            Search\n                        </Button>\n                    </Form>\n                </Col>\n            </Row>\n            <PatientList />\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Pagination onClick={handlePagination} className=\"pagination justify-content-center mb-5\">\n                        <Pagination.First />\n                        <Pagination.Prev />\n                        {items}\n                        <Pagination.Next />\n                        <Pagination.Last />\n                    </Pagination>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default PatientPagination;","export const FETCH_CALENDAR = 'fetch_calendar';\nexport const PUT_CALENDAR_DATA = 'put_calendar_data';\nexport const PUT_IS_FETCH_CALENDAR = 'put_is_fetch_calendar';","import {\n    FETCH_CALENDAR,\n    PUT_CALENDAR_DATA,\n    PUT_IS_FETCH_CALENDAR\n} from './constants';\n\nexport const fetchCalendar = payload => ({\n    type: FETCH_CALENDAR,\n    payload\n});\n\nexport const putIsFetchCalendar = payload => ({\n    type: PUT_IS_FETCH_CALENDAR,\n    payload\n});\n\nexport const putCalendarData = payload => ({\n    type: PUT_CALENDAR_DATA,\n    payload\n});","const reducer = 'calendarReducer';\n\nexport const calendarDataSelector = state => state[reducer].calendar;\nexport const isFetchCalendarSelector = state => state[reducer].isFetchCalendar;","import React from 'react';\nimport { Container, Row, Col, Spinner, Table, Button } from 'react-bootstrap';\nimport { history } from '../../index';\nimport moment from 'moment'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { appointmentSelector, isFetchAppointmentSelector } from '../../store/appointments/selectors';\n\n\n\nconst AppointmentDetails = ({ start, typeId }) => {\n    const isFetchAppointment = useSelector(isFetchAppointmentSelector);\n    const appointment = useSelector(appointmentSelector);\n\n    if (!isFetchAppointment) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3 className=\"border-bottom\">Appointment details</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <tbody>\n                            <tr>\n                                <th>Patient</th>\n                                <td align=\"right\">{appointment.patient}</td>\n                            </tr>\n                            {\n                                isFetchAppointment && appointment.appState !== 'FINISHED' && appointment.appState !== 'STARTED' && moment(start).format('YYYY-MM-DD') === moment().format('YYYY-MM-DD') &&\n                                <tr>\n                                    <th>Start appointment</th>\n                                    <td colSpan=\"2\" align=\"right\">\n                                        <Button variant=\"primary\" onClick={() => { history.push('/medical-rec/' + typeId); }}>Start</Button>\n                                    </td>\n                                </tr>\n                            }\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n        </Container >\n    );\n}\n\nexport default AppointmentDetails;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Container, Spinner, Row, Col, Table, Button } from 'react-bootstrap';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport moment from 'moment'\nimport { fetchCalendar } from '../../store/calendar/actions';\nimport { calendarDataSelector, isFetchCalendarSelector } from '../../store/calendar/selectors';\nimport { userDataSelector } from '../../store/user/selectors';\nimport { fetchAppointment } from '../../store/appointments/actions';\nimport { isFetchAppointmentSelector } from '../../store/appointments/selectors';\nimport AppointmentDetails from '../Appointment/AppointmentDetails';\n\n\nconst localizer = momentLocalizer(moment);\n\nconst WorkCalendar = () => {\n    const dispatch = useDispatch();\n    const calendar = useSelector(calendarDataSelector);\n    const isFetchCalendar = useSelector(isFetchCalendarSelector);\n    const isFetchAppointment = useSelector(isFetchAppointmentSelector);\n    const data = useSelector(userDataSelector);\n    const personnelId = data.id;\n    const roles = data.roles;\n    const [selEvent, setSelEvent] = useState(false);\n\n    const [event, setEvent] = useState({\n        title: '',\n        type: '',\n        start: '',\n        end: ''\n    });\n    useEffect(() => {\n        if (personnelId != null) {\n            dispatch(\n                fetchCalendar({\n                    personnelId\n                })\n            );\n        }\n    }, [personnelId]);\n\n    const handleCalendarClick = (calEvent) => {\n        if (calEvent.type == 'APP' && roles.includes('ROLE_DOCTOR')) {\n            dispatch(\n                fetchAppointment({\n                    id: calEvent.typeId\n                })\n            );\n        }\n        setSelEvent(true);\n        setEvent(calEvent);\n    };\n\n    if (!isFetchCalendar) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3 align=\"center\" className=\"border-bottom\">Work calendar</h3>\n                </Col>\n\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Calendar\n                        localizer={localizer}\n                        events={calendar.calendarItemResponses}\n                        startAccessor=\"start\"\n                        endAccessor=\"end\"\n                        style={{ height: 600 }}\n                        onSelectEvent={(calEvent) => {\n                            handleCalendarClick(calEvent);\n                        }}\n                    />\n                </Col>\n            </Row>\n            {roles.includes('ROLE_DOCTOR') && selEvent &&\n                <Row>\n                    <Col md={{ span: 10, offset: 1 }} xs={12}>\n                        <h2 className=\"border-bottom\">Selected event: </h2>\n                    </Col>\n                </Row>\n            }\n            {roles.includes('ROLE_DOCTOR') && selEvent &&\n                <Row>\n                    <Col md={{ span: 10, offset: 1 }} xs={12}>\n                        <Table responsive>\n                            <tbody>\n                                <tr>\n                                    <th>Title</th>\n                                    <td align=\"right\">{event.title}</td>\n                                </tr>\n                                <tr>\n                                    <th>Type</th>\n                                    <td align=\"right\">{event.type}</td>\n                                </tr>\n                                <tr>\n                                    <th>Start date</th>\n                                    <td align=\"right\">{moment(event.start).format('YYYY-MM-DD HH:mm:ss')}</td>\n                                </tr>\n                                <tr>\n                                    <th>End date</th>\n                                    <td align=\"right\">{moment(event.end).format('YYYY-MM-DD HH:mm:ss')}</td>\n                                </tr>\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n\n            }\n            {\n                roles.includes('ROLE_DOCTOR') && isFetchAppointment &&\n                <AppointmentDetails start={event.start} typeId={event.typeId} />\n            }\n        </Container>\n    );\n}\n\nexport default WorkCalendar;","export const ABS_HOL_REQUEST = 'abs_hol_request';\nexport const PUT_ABS_HOL_REQUESTS = 'put_abs_hol_requests';\nexport const FETCH_ABS_HOL_REQUESTS = 'fetch_abs_hol_requests';\nexport const PUT_IS_FETCH_ABS_HOL_REQUESTS = 'is_fetch_abs_hol_requests';","import {\n    FETCH_ABS_HOL_REQUESTS,\n    PUT_IS_FETCH_ABS_HOL_REQUESTS,\n    PUT_ABS_HOL_REQUESTS,\n    ABS_HOL_REQUEST\n} from './constants';\n\nexport const fetchAbsHolRequests = payload => ({\n    type: FETCH_ABS_HOL_REQUESTS,\n    payload\n});\n\nexport const absHolRequest = payload => ({\n    type: ABS_HOL_REQUEST,\n    payload\n});\n\nexport const putAbsHolRequest = payload => ({\n    type: PUT_ABS_HOL_REQUESTS,\n    payload\n});\n\nexport const putIsFetchAbsHolRequests = payload => ({\n    type: PUT_IS_FETCH_ABS_HOL_REQUESTS,\n    payload\n});","const reducer = 'absenceHolidayReducer';\n\nexport const absHolRequestDataSelector = state => state[reducer].absholrequests;\nexport const isFetchAbsHolRequestsSelector = state => state[reducer].isFetchAbsHolRequests;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Row, Col, Container, Table, Spinner } from 'react-bootstrap';\nimport { fetchAbsHolRequests } from '../../store/absence_holiday/actions';\nimport { absHolRequestDataSelector, isFetchAbsHolRequestsSelector } from '../../store/absence_holiday/selectors';\n\nconst HolAbsRequestsTable = ({ personnelId }) => {\n    const dispatch = useDispatch();\n    const absholrequests = useSelector(absHolRequestDataSelector);\n    const isFetchAbsHolRequests = useSelector(isFetchAbsHolRequestsSelector);\n\n\n    useEffect(() => {\n        if (personnelId != null) {\n            dispatch(\n                fetchAbsHolRequests({\n                    personnelId\n                })\n            );\n        }\n    }, [personnelId]);\n\n\n    if (!isFetchAbsHolRequests) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3>Pending absence and holiday requests</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>Type</th>\n                                <th>Start date</th>\n                                <th>End date</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                absholrequests.map((req, index) => {\n                                    if (req.status === 'REQUESTED') {\n                                        return (\n                                            <tr key={index}>\n                                                <td>{req.type}</td>\n                                                <td>{req.startDate}</td>\n                                                <td>{req.endDate}</td>\n                                            </tr>\n                                        );\n                                    }\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3>Approved absence and holiday requests</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>Type</th>\n                                <th>Start date</th>\n                                <th>End date</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                absholrequests.map((req, index) => {\n                                    if (req.status === 'APPROVED') {\n                                        return (\n                                            <tr key={index}>\n                                                <td>{req.type}</td>\n                                                <td>{req.startDate}</td>\n                                                <td>{req.endDate}</td>\n                                            </tr>\n                                        );\n                                    }\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default HolAbsRequestsTable;","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Row, Form, Col, Button, Container } from 'react-bootstrap';\nimport moment from 'moment';\nimport HolAbsRequestsTable from './HolAbsRequestsTable';\nimport { absHolRequest } from '../../store/absence_holiday/actions';\nimport { userDataSelector } from '../../store/user/selectors';\n\nconst HolAbsRequest = () => {\n    const dispatch = useDispatch();\n    const data = useSelector(userDataSelector);\n    const clinicId = data.clinicId;\n    const personnelId = data.id;\n    const [validated, setValidated] = useState(false);\n    const [today, setToday] = useState(moment().format('YYYY-MM-DD'));\n    const [startDate, setStartDate] = useState(moment().format('YYYY-MM-DD'));\n    const [endDate, setEndDate] = useState(moment().format('YYYY-MM-DD'));\n    const [type, setType] = useState('Absence');\n\n\n    const handleSubmit = (event) => {\n\n        const form = event.currentTarget;\n        event.preventDefault();\n        if (form.checkValidity() === false) {\n            event.stopPropagation();\n            setValidated(true);\n        } else {\n            dispatch(\n                absHolRequest({\n                    startDate,\n                    endDate,\n                    type,\n                    personnelId,\n                    clinicId\n                })\n            );\n            setValidated(false);\n        }\n    };\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 5, offset: 3 }} xs={12}>\n                    <h3 align=\"center\" className=\"border-bottom\">Holiday/absence request</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 4 }} xs={12}>\n                    <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                        <Form.Group as={Col}>\n                            <div align=\"center\">\n                                <Form.Label>Type of request</Form.Label>\n                            </div>\n                            <Form.Control required as=\"select\" onChange={({ currentTarget }) => {\n                                setType(currentTarget.value);\n                            }} >\n                                <option key=\"0\" value=\"Absence\">Absence</option>\n                                <option key=\"1\" value=\"Holiday\">Holiday</option>\n\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group as={Col} >\n                            <div align=\"center\">\n                                <Form.Label>Choose start date:</Form.Label>\n                            </div>\n                            <Form.Control required type=\"date\" min={today} id=\"date1\"\n                                onChange={({ currentTarget }) => {\n                                    setStartDate(moment(currentTarget.value).format('YYYY-MM-DD'));\n                                }} />\n\n                        </Form.Group>\n                        <Form.Group as={Col} >\n                            <div align=\"center\">\n                                <Form.Label>Choose end date:</Form.Label>\n                            </div>\n                            <Form.Control required type=\"date\" min={today} id=\"date2\"\n                                onChange={({ currentTarget }) => {\n                                    setEndDate(moment(currentTarget.value).format('YYYY-MM-DD'));\n                                }}\n                            />\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <div align=\"center\">\n                                <Button variant=\"primary\" type=\"submit\">\n                                    Submit\n                                </Button>\n                            </div>\n                        </Form.Group>\n                    </Form>\n                </Col>\n            </Row>\n            <HolAbsRequestsTable personnelId={personnelId} />\n        </Container>\n    );\n}\n\nexport default HolAbsRequest;","import React from 'react';\nimport { Form, Row, Col, Button } from 'react-bootstrap';\n\nfunction BookingDoc() {\n    return (\n\n        <>\n            <Row>\n                <Col md={{ span: 3, offset: 2 }} xs={12}>\n                    <Form>\n                        <Form.Group as={Col}>\n                            <h3 className=\"border-bottom\">Booking an apointment</h3>\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Label>Choose a date for your apointment:</Form.Label>\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Control type=\"date\" />\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Label>Choose a time for your apointment:</Form.Label>\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Control type=\"time\" />\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Button>\n                                Book apointment\n                            </Button>\n                        </Form.Group>\n                    </Form>\n\n                </Col>\n                <Col md={{ span: 3, offset: 1 }} xs={12}>\n                    <Form>\n                        <Form.Group as={Col}>\n                            <h3 className=\"border-bottom\">Booking a surgery</h3>\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Label>Choose a date for your surgery:</Form.Label>\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Control type=\"date\" />\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Label>Choose a time for your surgery:</Form.Label>\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Control type=\"time\" />\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Button>\n                                Book surgery\n                            </Button>\n                        </Form.Group>\n                    </Form>\n                </Col>\n            </Row>\n        </>\n    );\n}\n\nexport default BookingDoc;","import React from 'react';\nimport { Container, Spinner, Col,Row } from 'react-bootstrap';\n\nfunction ApointmentInfo(){\n    return(\n        <Container>\n            <Col md={{span:5, offset:3}} xs={12}>\n            <Row >\n                <h3>Apointment info - in progress</h3>\n            </Row>\n            <Row>\n                <Spinner animation=\"grow\" variant=\"primary\" />\n                <Spinner animation=\"grow\" variant=\"secondary\" />\n                <Spinner animation=\"grow\" variant=\"success\" />\n                <Spinner animation=\"grow\" variant=\"danger\" />\n                <Spinner animation=\"grow\" variant=\"warning\" />\n                <Spinner animation=\"grow\" variant=\"info\" />\n                <Spinner animation=\"grow\" variant=\"light\" />\n                <Spinner animation=\"grow\" variant=\"dark\" />\n            </Row>\n            </Col>\n        </Container>\n    );\n}\n\nexport default ApointmentInfo;","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Spinner, Table, Form, Button } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PickedSurReq from './PickedSurReq';\nimport { pickSurReqSelector, pickedSurReqSelector, pickTermSelector, pickedTermSelector, pickedRoomSelector } from '../../store/sur_req/selectors';\nimport { fetchFinishReservation } from '../../store/sur_req/actions';\nimport { userDataSelector } from '../../store/user/selectors';\nimport { doctorsDataSelector, isFetchDoctorsSelector } from '../../store/doctors/selectors';\nimport { fetchDoctorsData } from '../../store/doctors/actions';\n\nconst SurReqDoctors = () => {\n    const dispatch = useDispatch();\n    const pickSurReq = useSelector(pickSurReqSelector);\n    const pickedSurReq = useSelector(pickedSurReqSelector);\n    const pickTerm = useSelector(pickTermSelector);\n    const pickedTerm = useSelector(pickedTermSelector);\n    const pickedRoom = useSelector(pickedRoomSelector);\n    const data = useSelector(userDataSelector);\n    const clinicId = data.clinicId;\n    const doctors = useSelector(doctorsDataSelector);\n    const isFetchDoctors = useSelector(isFetchDoctorsSelector);\n    const [chosenDoc, setChosenDoc] = useState([]);\n\n    useEffect(() => {\n        dispatch(\n            fetchDoctorsData({\n                clinicId\n            })\n        );\n    }, [clinicId]);\n\n    const handleFinishReservation = () => {\n        dispatch(\n            fetchFinishReservation({\n                pickedSurReq,\n                pickedTerm,\n                pickedRoom,\n                chosenDoc\n            })\n        );\n    };\n\n    if (!isFetchDoctors) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            {\n                pickSurReq ?\n                    <PickedSurReq pickedSurReq={pickedSurReq} /> : null\n            }\n            {\n                pickTerm ?\n                    <Row>\n                        <Col md={{ span: 10, offset: 1 }} xs={12}>\n                            <h2 className=\"border-bottom\">Picked term</h2>\n                        </Col>\n                        <Col md={{ span: 3, offset: 1 }} xs={12}>\n                            <Table responsive>\n                                <thead>\n                                    <tr>\n                                        <th>Picked term:</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr >\n                                        <td>{pickedTerm}</td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n                        </Col>\n                    </Row> : null\n            }\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h2>Pick doctors</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 3, offset: 1 }} xs={12}>\n                    <Form>\n                        <Form.Group as={Col}>\n                            <Form.Control as=\"select\" multiple onChange={({ currentTarget }) => {\n                                let options = currentTarget.options;\n                                let vals = [];\n                                for (let i = 0; i < options.length; i++) {\n                                    if (options[i].selected) {\n                                        vals.push(options[i].value);\n                                    }\n                                }\n                                setChosenDoc(vals);\n                            }} >                                {\n                                    doctors.map((doctor, index) => {\n                                        if (pickedSurReq != null) {\n                                            if (pickedSurReq.doctorId != doctor.id) {\n                                                return (\n                                                    <option key={index} value={doctor.id}>{doctor.firstName} {doctor.lastName}</option>\n                                                );\n                                            }\n                                        }\n                                    })\n                                }\n                            </Form.Control>\n                            <Button onClick={handleFinishReservation} className=\"mt-2\">Finish reservation</Button>\n                        </Form.Group>\n                    </Form>\n                </Col>\n            </Row>\n        </Container >\n    );\n}\n\nexport default SurReqDoctors;","export const ADD_MEDICINE = 'add_medicine';\nexport const ADD_DIAGNOSE = 'add_diagnose';\nexport const PUT_MEDICINE_DATA = 'put_medicine_data';\nexport const FETCH_MEDICINE_DATA = 'fetch_medicine_data';\nexport const PUT_IS_FETCH_MEDICINE = 'put_is_fetch_medicine';\nexport const PUT_DIAGNOSE_DATA = 'put_diagnose_data';\nexport const FETCH_DIAGNOSE_DATA = 'fetch_diagnose_data';\nexport const PUT_IS_FETCH_DIAGNOSE = 'put_is_fetch_diagnose';\nexport const FETCH_MEDICINES_ALL = 'fetch_medicines_all';\nexport const FETCH_DIAGNOSES_ALL = 'fetch_diagnoses_all';","import {\n    ADD_DIAGNOSE,\n    ADD_MEDICINE,\n    PUT_DIAGNOSE_DATA,\n    PUT_IS_FETCH_DIAGNOSE,\n    PUT_MEDICINE_DATA,\n    PUT_IS_FETCH_MEDICINE,\n    FETCH_DIAGNOSE_DATA,\n    FETCH_MEDICINE_DATA,\n    FETCH_DIAGNOSES_ALL,\n    FETCH_MEDICINES_ALL\n} from './constants';\n\nexport const fetchDiagnosesAll = payload => ({\n    type: FETCH_DIAGNOSES_ALL,\n    payload\n});\n\nexport const fetchMedicinesAll = payload => ({\n    type: FETCH_MEDICINES_ALL,\n    payload\n});\n\nexport const fetchMedicineData = payload => ({\n    type: FETCH_MEDICINE_DATA,\n    payload\n});\n\nexport const fetchDiagnoseData = payload => ({\n    type: FETCH_DIAGNOSE_DATA,\n    payload\n});\n\nexport const putIsFetchDiagnose = payload => ({\n    type: PUT_IS_FETCH_DIAGNOSE,\n    payload\n});\n\nexport const putIsFetchMedicine = payload => ({\n    type: PUT_IS_FETCH_MEDICINE,\n    payload\n});\n\nexport const putMedicineData = payload => ({\n    type: PUT_MEDICINE_DATA,\n    payload\n});\n\nexport const putDiagnoseData = payload => ({\n    type: PUT_DIAGNOSE_DATA,\n    payload\n});\n\nexport const addMedicine = payload => ({\n    type: ADD_MEDICINE,\n    payload\n});\n\nexport const addDiagnose = payload => ({\n    type: ADD_DIAGNOSE,\n    payload\n});","const reducer = 'medicineDiagnoseReducer';\n\nexport const diagnosesSelector = state => state[reducer].diagnoses;\nexport const isFetchDiagnosesSelector = state => state[reducer].isFetchDiagnoses;\nexport const medicinesSelector = state => state[reducer].medicines;\nexport const isFetchMedicinesSelector = state => state[reducer].isFetchMedicines;","import React from 'react';\nimport { Container, Row, Col, Spinner, Table } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\nimport { diagnosesSelector, isFetchDiagnosesSelector } from '../../store/medicine_diagnose/selectors';\n\n\nconst DiagnoseTable = () => {\n    const isFetchDiagnoses = useSelector(isFetchDiagnosesSelector);\n    const diagnoses = useSelector(diagnosesSelector);\n\n    if (!isFetchDiagnoses) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3>Diagnoses</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>Code</th>\n                                <th>Name</th>\n                                <th>Description</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                diagnoses.map((diagnose, index) => {\n                                    return (\n                                        <tr key={diagnose.id}>\n                                            <td>{diagnose.code}</td>\n                                            <td>{diagnose.name}</td>\n                                            <td>{diagnose.description}</td>\n                                        </tr>\n                                    );\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default DiagnoseTable;","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Form, Button, Pagination } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchDiagnoseData } from '../../store/medicine_diagnose/actions';\nimport { pageSelCntSelector, pageCntSelector } from '../../store/common/selectors';\nimport DiagnoseTable from './DiagnoseTable';\n\n\nconst PaginationDiagnose = () => {\n    const dispatch = useDispatch();\n    const diagnosePageCnt = useSelector(pageCntSelector);\n    const selPageCnt = useSelector(pageSelCntSelector);\n    const [pageCnt, setPageCnt] = useState(selPageCnt);\n\n    useEffect(() => {\n        dispatch(\n            fetchDiagnoseData({\n                pageCnt\n            })\n        );\n    }, [pageCnt]);\n\n    let items = [];\n    for (let number = 1; number <= diagnosePageCnt; number++) {\n        items.push(\n            <Pagination.Item key={number} active={number == (pageCnt + 1)}>\n                {number}\n            </Pagination.Item>\n        );\n    }\n\n    const handlePagination = (e) => {\n        e.preventDefault();\n        let event = e.target.text;\n        if (event != undefined && diagnosePageCnt > 0) {\n            if (event.includes('First')) {\n                setPageCnt(0);\n            } else if (event.includes('Last')) {\n                setPageCnt(diagnosePageCnt - 1);\n            } else if (event.includes('Next')) {\n                if (pageCnt < diagnosePageCnt - 1) {\n                    setPageCnt(pageCnt + 1);\n                }\n            } else if (event.includes('Previous')) {\n                if (pageCnt > 0) {\n                    setPageCnt(pageCnt - 1);\n                }\n            } else {\n                setPageCnt(event - 1);\n            }\n        }\n    };\n\n    return (\n        <Container>\n            <DiagnoseTable />\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Pagination onClick={handlePagination} className=\"pagination justify-content-center mb-5\">\n                        <Pagination.First />\n                        <Pagination.Prev />\n                        {items}\n                        <Pagination.Next />\n                        <Pagination.Last />\n                    </Pagination>\n                </Col>\n            </Row>\n        </Container>\n    );\n\n}\n\nexport default PaginationDiagnose;","import React, { useState } from 'react';\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { addDiagnose } from '../../store/medicine_diagnose/actions';\nimport PaginationDiagnose from './PaginationDiagnose';\n\nconst AddMedicine = () => {\n    const dispatch = useDispatch();\n    const [name, setName] = useState();\n    const [description, setDescription] = useState();\n    const [code, setCode] = useState();\n    const [validated, setValidated] = useState(false);\n\n\n    const handleAddDiagnose = (event) => {\n        const form = event.currentTarget;\n        event.preventDefault();\n        if (form.checkValidity() === false) {\n            event.stopPropagation();\n            setValidated(true);\n        } else {\n            dispatch(\n                addDiagnose({\n                    code,\n                    name,\n                    description\n                })\n            );\n            setValidated(false);\n        }\n    };\n\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h2 className=\"border-bottom\">Add diagnose</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 5, offset: 1 }} xs={12}>\n                    <Form noValidate validated={validated} onSubmit={handleAddDiagnose}>\n                        <Form.Group as={Col}>\n                            <Form.Label>Code:</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"Enter code\"\n                                onChange={({ currentTarget }) => {\n                                    setCode(currentTarget.value);\n                                }}\n                            />\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Label>Name:</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"Enter name\"\n                                onChange={({ currentTarget }) => {\n                                    setName(currentTarget.value);\n                                }}\n                            />\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Label>Description:</Form.Label>\n                            <Form.Control required as=\"textarea\" rows=\"4\" placeholder=\"Enter description\"\n                                onChange={({ currentTarget }) => {\n                                    setDescription(currentTarget.value);\n                                }}\n                            />\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Button variant=\"primary\" type=\"submit\">\n                                Add diagnose\n                            </Button>\n                        </Form.Group>\n                    </Form>\n                </Col>\n            </Row>\n            <PaginationDiagnose />\n        </Container>\n    );\n}\n\nexport default AddMedicine;","import React from 'react';\nimport { Container, Row, Col, Spinner, Table } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\nimport { medicinesSelector, isFetchMedicinesSelector } from '../../store/medicine_diagnose/selectors';\n\n\nconst MedicineTable = () => {\n    const isFetchMedicines = useSelector(isFetchMedicinesSelector);\n    const medicines = useSelector(medicinesSelector);\n\n\n    if (!isFetchMedicines) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3>Medicines</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>Code</th>\n                                <th>Name</th>\n                                <th>Description</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                medicines.map((medicine, index) => {\n                                    return (\n                                        <tr key={medicine.id}>\n                                            <td>{medicine.code}</td>\n                                            <td>{medicine.name}</td>\n                                            <td>{medicine.description}</td>\n                                        </tr>\n                                    );\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default MedicineTable;","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Pagination } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchMedicineData } from '../../store/medicine_diagnose/actions';\nimport { pageCntSelector, pageSelCntSelector } from '../../store/common/selectors';\nimport MedicineTable from './MedicineTable';\n\n\nconst PaginationMedicine = () => {\n    const dispatch = useDispatch();\n    const medicinePageCnt = useSelector(pageCntSelector);\n    const selPageCnt = useSelector(pageSelCntSelector);\n    const [pageCnt, setPageCnt] = useState(selPageCnt);\n    useEffect(() => {\n        dispatch(\n            fetchMedicineData({\n                pageCnt\n            })\n        );\n    }, [pageCnt]);\n\n    let items = [];\n    for (let number = 1; number <= medicinePageCnt; number++) {\n        items.push(\n            <Pagination.Item key={number} active={number == (selPageCnt + 1)}>\n                {number}\n            </Pagination.Item>\n        );\n    }\n\n    const handlePagination = (e) => {\n        e.preventDefault();\n        let event = e.target.text;\n        if (event != undefined && medicinePageCnt > 0) {\n            if (event.includes('First')) {\n                setPageCnt(0);\n            } else if (event.includes('Last')) {\n                setPageCnt(medicinePageCnt - 1);\n            } else if (event.includes('Next')) {\n                if (pageCnt < medicinePageCnt - 1) {\n                    setPageCnt(pageCnt + 1);\n                }\n            } else if (event.includes('Previous')) {\n                if (pageCnt > 0) {\n                    setPageCnt(pageCnt - 1);\n                }\n            } else {\n                setPageCnt(event - 1);\n            }\n        }\n    };\n\n    return (\n        <Container>\n            <MedicineTable />\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Pagination onClick={handlePagination} className=\"pagination justify-content-center mb-5\">\n                        <Pagination.First />\n                        <Pagination.Prev />\n                        {items}\n                        <Pagination.Next />\n                        <Pagination.Last />\n                    </Pagination>\n                </Col>\n            </Row>\n        </Container>\n    );\n\n}\n\nexport default PaginationMedicine;","import React, { useState } from 'react';\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { addMedicine } from '../../store/medicine_diagnose/actions';\nimport PaginationMedicine from './PaginationMedicine';\n\nconst AddMedicine = () => {\n    const dispatch = useDispatch();\n    const [name, setName] = useState();\n    const [description, setDescription] = useState();\n    const [code, setCode] = useState();    \n    const [validated, setValidated] = useState(false);\n\n    const handleAddMedicine = (event) => {\n        const form = event.currentTarget;\n        event.preventDefault();\n        if (form.checkValidity() === false) {\n            event.stopPropagation();\n            setValidated(true);\n        } else {\n            dispatch(\n                addMedicine({\n                    code,\n                    name,\n                    description\n                })\n            );\n            setValidated(false);\n        }\n    };\n\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h2 className=\"border-bottom\">Add medicine</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 5, offset: 1 }} xs={12}>\n                    <Form noValidate validated={validated} onSubmit={handleAddMedicine}>\n                        <Form.Group as={Col}>\n                            <Form.Label>Code:</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"Enter code\"\n                                onChange={({ currentTarget }) => {\n                                    setCode(currentTarget.value);\n                                }}\n                            />\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Label>Name:</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"Enter name\"\n                                onChange={({ currentTarget }) => {\n                                    setName(currentTarget.value);\n                                }}\n                            />\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Label>Description:</Form.Label>\n                            <Form.Control required as=\"textarea\" rows=\"4\" placeholder=\"Enter description\"\n                                onChange={({ currentTarget }) => {\n                                    setDescription(currentTarget.value);\n                                }}\n                            />\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Button variant=\"primary\" type=\"submit\">\n                                Add medicine\n                            </Button>\n                        </Form.Group>\n                    </Form>\n                </Col>\n            </Row>\n            <PaginationMedicine />\n        </Container>\n    );\n}\n\nexport default AddMedicine;","export const FETCH_REG_REQS_DATA = 'fetch_reg_reqs_data';\nexport const PUT_REG_REQS_DATA = 'put_req_reqs_data';\nexport const PUT_IS_FETCH_REG_REQS = 'put_is_fetch_reg_reqs';\nexport const APPROVE_REG_REQ = 'approve_reg_req';\nexport const REJECT_REG_REQ = 'reject_reg_req'; \nexport const PUT_REG_REQS_CNT = 'put_reg_reqs_cnt';","import {\n    FETCH_REG_REQS_DATA,\n    PUT_REG_REQS_DATA,\n    PUT_IS_FETCH_REG_REQS,\n    APPROVE_REG_REQ,\n    REJECT_REG_REQ,\n    PUT_REG_REQS_CNT\n} from './constants';\n\nexport const putRegReqsCnt = payload => ({\n    type: PUT_REG_REQS_CNT,\n    payload\n});\n\nexport const fetchRegReqsData = payload => ({\n    type: FETCH_REG_REQS_DATA,\n    payload\n});\n\nexport const putRegReqsData = payload => ({\n    type: PUT_REG_REQS_DATA,\n    payload\n});\n\nexport const putIsFetchRegReqs = payload => ({\n    type: PUT_IS_FETCH_REG_REQS,\n    payload\n});\n\nexport const approveRegReq = payload => ({\n    type: APPROVE_REG_REQ,\n    payload\n});\n\nexport const rejectRegReq = payload => ({\n    type: REJECT_REG_REQ,\n    payload\n});","const reducer = 'regReqsReducer';\n\nexport const regReqsDataSelector = state => state[reducer].reqs;\nexport const isFetchRegReqs = state => state[reducer].isFetchRegReqs;\nexport const regReqsPageCntSelector = state => state[reducer].regReqsPageCnt;\n\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Table, Button, Modal, Form, Spinner, Col } from 'react-bootstrap';\nimport { approveRegReq, rejectRegReq } from '../../store/reg_req/actions';\nimport { isFetchRegReqs, regReqsDataSelector } from '../../store/reg_req/selectors';\n\n\nconst RegTable = () => {\n    const dispatch = useDispatch();\n    const [show, setShow] = useState(false);\n    const [reqId, setReqId] = useState(0);\n    const [message, setMessage] = useState('');\n    const regReqs = useSelector(regReqsDataSelector);\n    const isFetchReqs = useSelector(isFetchRegReqs);\n    const [validated, setValidated] = useState(false);\n\n    const handleApprove = (regReqId) => {\n        dispatch(\n            approveRegReq({\n                regReqId\n            })\n        );\n    };\n\n    const handleReject = (event) => {\n        const form = event.currentTarget;\n        event.preventDefault();\n        if (form.checkValidity() === false) {\n            setValidated(true);\n            event.stopPropagation();\n        } else {\n            dispatch(\n                rejectRegReq({\n                    reqId,\n                    message\n                })\n            );\n            handleClose();\n            setValidated(false);\n        }\n    };\n\n    const handleClose = () => setShow(false);\n    const handleShow = (regReqId) => {\n        setShow(true);\n        setReqId(regReqId);\n    };\n\n    if (!isFetchReqs) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <div>\n            <Modal show={show} onHide={handleClose} id=\"regReqModal\" animation={true}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Rejected reason:</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form noValidate validated={validated} id=\"formRegReqReject\" onSubmit={handleReject}>\n                        <Form.Group as={Col}>\n                            <Form.Control required as=\"textarea\" max=\"90\" rows=\"4\" id=\"txtReason\" name=\"reason\"\n                                onChange={({ currentTarget }) => {\n                                    setMessage(currentTarget.value);\n                                }}\n                            />\n                        </Form.Group>\n                        <Form.Group as={Col} align=\"right\">\n                            <Button variant=\"primary\" id=\"btnReject\" type=\"submit\">\n                                Send\n                         </Button>\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n            </Modal>\n            <Table id=\"regReqTable\" responsive>\n                <thead>\n                    <tr>\n                        <th>E-mail</th>\n                        <th>First Name</th>\n                        <th>Last Name</th>\n                        <th>Approve</th>\n                        <th>Refuse</th>\n                    </tr>\n                </thead>\n                <tbody>\n\n                    {\n\n                        regReqs.map((req, index) => {\n                            return (\n                                <tr key={req.id}>\n                                    <td>{req.email}</td>\n                                    <td>{req.firstName}</td>\n                                    <td>{req.lastName}</td>\n                                    <td>\n                                        <Button variant=\"success\" onClick={() => handleApprove(req.id)}>\n                                            Approve\n                                            </Button>\n                                    </td>\n                                    <td>\n                                        <Button variant=\"danger\" type=\"primary\" onClick={() => handleShow(req.id)}>\n                                            Refuse\n                                                </Button>\n                                    </td>\n                                </tr>\n                            );\n                        })\n\n                    }\n                </tbody>\n            </Table>\n        </div>\n    );\n}\n\nexport default RegTable;","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Pagination } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchRegReqsData } from '../../store/reg_req/actions';\nimport { pageCntSelector, pageSelCntSelector } from '../../store/common/selectors';\nimport RegTable from './RegTable';\n\n\nconst RegistrationAproval = () => {\n    const dispatch = useDispatch();\n    const regReqsPageCnt = useSelector(pageCntSelector);\n    const selpageCnt = useSelector(pageSelCntSelector);\n    const [pageCnt, setPageCnt] = useState(selpageCnt);\n\n    useEffect(() => {\n        dispatch(\n            fetchRegReqsData({ pageCnt })\n        );\n    }, [pageCnt]);\n\n    let items = [];\n    for (let number = 1; number <= regReqsPageCnt; number++) {\n        items.push(\n            <Pagination.Item key={number} active={number == (selpageCnt + 1)}>\n                {number}\n            </Pagination.Item>\n        );\n    }\n\n    const handlePagination = (e) => {\n        e.preventDefault();\n        let event = e.target.text;\n        if (event != undefined && regReqsPageCnt > 0) {\n            if (event.includes('First')) {\n                setPageCnt(0);\n            } else if (event.includes('Last')) {\n                setPageCnt(regReqsPageCnt - 1);\n            } else if (event.includes('Next')) {\n                if (pageCnt < regReqsPageCnt - 1) {\n                    setPageCnt(pageCnt + 1);\n                }\n            } else if (event.includes('Previous')) {\n                if (pageCnt > 0) {\n                    setPageCnt(pageCnt - 1);\n                }\n            } else {\n                setPageCnt(event - 1);\n            }\n        }\n    };\n\n    return (\n\n        <Container>\n            <Row>\n                <h3>Approve or refuse registration requests</h3>\n            </Row>\n            <RegTable />\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Pagination onClick={handlePagination} id=\"regReqPag\" className=\"pagination justify-content-center mb-5\">\n                        <Pagination.First />\n                        <Pagination.Prev />\n                        {items}\n                        <Pagination.Next />\n                        <Pagination.Last />\n                    </Pagination>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default RegistrationAproval;","export const REG_CLINIC = 'register_clinic';\nexport const FETCH_CLINICS_DATA = 'fetch_clinics_data';\nexport const PUT_CLINICS_DATA = 'put_clinics_data';\nexport const PUT_IS_FETCH_CLINICS_DATA = 'put_is_fetch_clinics_data';\nexport const REG_CLINIC_ADMIN = 'reg_clinic_admin';\nexport const SEARCH_CLINIC = 'search_clinic';\nexport const PUT_PAGE_COUNT = \"put_page_count\";\nexport const FETCH_CLINIC_PAGINATION_DATA = 'fetch_clinic_pagination_data';\n","import {\n    REG_CLINIC,\n    FETCH_CLINICS_DATA,\n    PUT_CLINICS_DATA,\n    REG_CLINIC_ADMIN,\n    PUT_IS_FETCH_CLINICS_DATA,\n    FETCH_CLINIC_PAGINATION_DATA,\n    SEARCH_CLINIC,\n    PUT_PAGE_COUNT\n} from './constants';\n\nexport const putPageCount = payload => ({\n    type: PUT_PAGE_COUNT,\n    payload\n});\n\n\nexport const fetchClinicPaginationData = payload => ({\n    type: FETCH_CLINIC_PAGINATION_DATA,\n    payload\n});\n\nexport const regClinicAdmin = payload => ({\n    type: REG_CLINIC_ADMIN,\n    payload\n});\n\nexport const putClinicsData = payload => ({\n    type: PUT_CLINICS_DATA,\n    payload\n});\n\nexport const putIsFetchClinicsData = payload => ({\n    type: PUT_IS_FETCH_CLINICS_DATA,\n    payload\n});\n\nexport const regClinic = payload => ({\n    type: REG_CLINIC,\n    payload\n});\n\nexport const fetchClinicsData = payload => ({\n    type: FETCH_CLINICS_DATA,\n    payload\n});\n\nexport const searchClinic = payload => ({\n    type: SEARCH_CLINIC,\n    payload\n});\n","const reducer = 'clinicReducer';\n\nexport const clinicsDataSelector = state => state[reducer].clinics;\nexport const isFetchClinicsDataSelector = state => state[reducer].isFetchClinics;\nexport const pageCountSelector = state => state[reducer].pageCount;","import React from 'react';\nimport { Container, Row, Col, Spinner, Table } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\nimport { clinicsDataSelector, isFetchClinicsDataSelector } from '../../store/clinics/selectors';\n\n\nconst ClinicTable = () => {\n    const clinics = useSelector(clinicsDataSelector);\n    const isFetchClinicsData = useSelector(isFetchClinicsDataSelector);\n\n    if (!isFetchClinicsData) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3>Clinics list</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Address</th>\n                                <th>Description</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                clinics.map((clinic, index) => {\n                                    return (\n                                        <tr key={clinic.id}>\n                                            <td>{clinic.name}</td>\n                                            <td>{clinic.address}</td>\n                                            <td>{clinic.description}</td>\n                                        </tr>\n                                    );\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default ClinicTable;","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Pagination } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchClinicPaginationData } from '../../store/clinics/actions';\nimport { pageCntSelector, pageSelCntSelector } from '../../store/common/selectors';\nimport ClinicTable from './ClinicTable';\n\n\nconst ClinicPagination = () => {\n    const dispatch = useDispatch();\n    const regReqsPageCnt = useSelector(pageCntSelector);\n    const selpageCnt = useSelector(pageSelCntSelector);\n    const [pageCnt, setPageCnt] = useState(selpageCnt);\n\n    useEffect(() => {\n        dispatch(\n            fetchClinicPaginationData({ pageCnt })\n        );\n    }, [pageCnt]);\n\n    let items = [];\n    for (let number = 1; number <= regReqsPageCnt; number++) {\n        items.push(\n            <Pagination.Item key={number} active={number == (selpageCnt + 1)}>\n                {number}\n            </Pagination.Item>\n        );\n    }\n\n    const handlePagination = (e) => {\n        e.preventDefault();\n        let event = e.target.text;\n        if (event != undefined && regReqsPageCnt > 0) {\n            if (event.includes('First')) {\n                setPageCnt(0);\n            } else if (event.includes('Last')) {\n                setPageCnt(regReqsPageCnt - 1);\n            } else if (event.includes('Next')) {\n                if (pageCnt < regReqsPageCnt - 1) {\n                    setPageCnt(pageCnt + 1);\n                }\n            } else if (event.includes('Previous')) {\n                if (pageCnt > 0) {\n                    setPageCnt(pageCnt - 1);\n                }\n            } else {\n                setPageCnt(event - 1);\n            }\n        }\n    };\n\n    return (\n        <Container>\n            <ClinicTable />\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Pagination onClick={handlePagination} className=\"pagination justify-content-center mb-5\">\n                        <Pagination.First />\n                        <Pagination.Prev />\n                        {items}\n                        <Pagination.Next />\n                        <Pagination.Last />\n                    </Pagination>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default ClinicPagination;","import React, { useState } from 'react';\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { regClinic } from '../../store/clinics/actions';\nimport ClinicPagination from './ClinicPagination';\n\n\nconst ClinicReg = () => {\n    const dispatch = useDispatch();\n    const [name, setName] = useState();\n    const [description, setDescription] = useState();\n    const [address, setAddress] = useState();\n    const [validated, setValidated] = useState(false);\n\n    const handleClinicReg = (event) => {\n        const form = event.currentTarget;\n        event.preventDefault();\n        if (form.checkValidity() === false) {\n            event.stopPropagation();\n            setValidated(true);\n        } else {\n            dispatch(\n                regClinic({\n                    name,\n                    description,\n                    address\n                })\n            );\n            setValidated(false);\n        }\n    };\n\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h2 className=\"border-bottom\">Register clinic</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 5, offset: 1 }} xs={12}>\n                    <Form noValidate validated={validated} onSubmit={handleClinicReg}>\n                        <Form.Group as={Col}>\n                            <Form.Label>Clinic name:</Form.Label>\n                            <Form.Control required type=\"text\" pattern=\".{5,50}\"  placeholder=\"Enter clinic name\"\n                                onChange={({ currentTarget }) => {\n                                    setName(currentTarget.value);\n                                }}\n                            />\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Label>Clinic description:</Form.Label>\n                            <Form.Control required as=\"textarea\" pattern=\".{5,90}\" rows=\"4\" placeholder=\"Enter clinic description\"\n                                onChange={({ currentTarget }) => {\n                                    setDescription(currentTarget.value);\n                                }}\n                            />\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Label>Clinic address:</Form.Label>\n                            <Form.Control required type=\"text\" pattern=\".{5,60}\"  placeholder=\"Enter clinic address\"\n                                onChange={({ currentTarget }) => {\n                                    setAddress(currentTarget.value);\n                                }}\n                            />\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Button variant=\"primary\" type=\"submit\">\n                                Register\n                            </Button>\n                        </Form.Group>\n                    </Form>\n                </Col>\n            </Row>\n            <ClinicPagination />\n        </Container>\n    );\n}\n\nexport default ClinicReg;","import React, { useState, useEffect } from 'react';\nimport { history } from '../../index';\nimport { Container, Form, Button, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { regCCAdmin } from '../../store/user/actions';\nimport { userIdSelector, userDataSelector, isFetchUserDataSelector } from '../../store/user/selectors';\n\nconst AdminReg = () => {\n    const dispatch = useDispatch();\n    const [email, setEmail] = useState();\n    const [password, setPassword] = useState();\n    const [firstName, setFirstName] = useState();\n    const [lastName, setLastName] = useState();\n    const ccaId = useSelector(userIdSelector);\n    const userData = useSelector(userDataSelector);\n    const isFetchUserData = useSelector(isFetchUserDataSelector);\n    const [validated, setValidated] = useState(false);\n\n\n    useEffect(() => {\n        if (isFetchUserData && !userData.predefined) {\n            history.push('/ccadmin');\n        }\n    }, [ccaId]);\n\n    const handleRegCCAdmin = (event) => {\n        const form = event.currentTarget;\n        event.preventDefault();\n        if (form.checkValidity() === false) {\n            event.stopPropagation();\n            setValidated(true);\n        } else {\n            dispatch(\n                regCCAdmin({\n                    ccaId,\n                    email,\n                    password,\n                    firstName,\n                    lastName\n                })\n            );\n            setValidated(false);\n        }\n    };\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h2 className=\"border-bottom\">Registrating new clinic center admin</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Form noValidate validated={validated} onSubmit={handleRegCCAdmin}>\n                        <Form.Row>\n                            <Form.Group as={Col}>\n                                <Form.Label>Admin e-mail:</Form.Label>\n                                <Form.Control required type=\"email\" placeholder=\"Enter admin e-mail\"\n                                    onChange={({ currentTarget }) => {\n                                        setEmail(currentTarget.value);\n                                    }}\n                                />\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                                <Form.Label>Admin password:</Form.Label>\n                                <Form.Control required type=\"password\" pattern=\".{5,25}\" placeholder=\"Enter admin password\"\n                                    onChange={({ currentTarget }) => {\n                                        setPassword(currentTarget.value);\n                                    }}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    min 5 max 25 characters\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col}>\n                                <Form.Label>First name:</Form.Label>\n                                <Form.Control required type=\"text\" placeholder=\"Enter admin first name\"\n                                    onChange={({ currentTarget }) => {\n                                        setFirstName(currentTarget.value);\n                                    }}\n                                />\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                                <Form.Label>Last name:</Form.Label>\n                                <Form.Control required type=\"text\" placeholder=\"Enter admin last name\"\n                                    onChange={({ currentTarget }) => {\n                                        setLastName(currentTarget.value);\n                                    }}\n                                />\n                            </Form.Group>\n                        </Form.Row>\n                        <Button variant=\"primary\" type=\"submit\">\n                            Register\n                        </Button>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default AdminReg;","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Form, Button, Spinner } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clinicsDataSelector, isFetchClinicsDataSelector } from '../../store/clinics/selectors';\nimport { regClinicAdmin, fetchClinicsData } from '../../store/clinics/actions';\n\nconst ClinicAdminReg = () => {\n    const dispatch = useDispatch();\n    const [email, setEmail] = useState();\n    const [password, setPassword] = useState();\n    const [firstName, setFirstName] = useState();\n    const [lastName, setLastName] = useState();\n    const [clinicId, setClinicId] = useState();\n    const [validated, setValidated] = useState(false);\n    const clinics = useSelector(clinicsDataSelector);\n    const isFetchClinics = useSelector(isFetchClinicsDataSelector);\n\n    useEffect(() => {\n        dispatch(\n            fetchClinicsData({})\n        );\n    }, []);\n\n    const handleRegClinicAdmin = (event) => {\n        const form = event.currentTarget;\n        event.preventDefault();\n        if (form.checkValidity() === false) {\n            event.stopPropagation();\n            setValidated(true);\n        } else {\n            dispatch(\n                regClinicAdmin({\n                    clinicId,\n                    email,\n                    password,\n                    firstName,\n                    lastName\n                })\n            );\n            setValidated(false);\n        }\n    };\n\n    if (!isFetchClinics) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h2 className=\"border-bottom\">Registrating clinic admin</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Form noValidate validated={validated} onSubmit={handleRegClinicAdmin}>\n                        <Form.Row>\n                            <Form.Group as={Col}>\n                                <Form.Label>Admin e-mail:</Form.Label>\n                                <Form.Control required type=\"email\" placeholder=\"Enter admin e-mail\"\n                                    onChange={({ currentTarget }) => {\n                                        setEmail(currentTarget.value);\n                                    }}\n                                />\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                                <Form.Label>Admin password:</Form.Label>\n                                <Form.Control required type=\"password\" pattern=\".{5,25}\" placeholder=\"Enter admin password\"\n                                    onChange={({ currentTarget }) => {\n                                        setPassword(currentTarget.value);\n                                    }}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    min 5 max 25 characters\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col}>\n                                <Form.Label>First name:</Form.Label>\n                                <Form.Control required type=\"text\" placeholder=\"Enter admin first name\"\n                                    onChange={({ currentTarget }) => {\n                                        setFirstName(currentTarget.value);\n                                    }}\n                                />\n                            </Form.Group>\n                            <Form.Group as={Col} md=\"6\">\n                                <Form.Label>Last name:</Form.Label>\n                                <Form.Control required type=\"text\" placeholder=\"Enter admin last name\"\n                                    onChange={({ currentTarget }) => {\n                                        setLastName(currentTarget.value);\n                                    }}\n                                />\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col} md=\"6\">\n                                <Form.Label>Clinic:</Form.Label>\n                                <Form.Control required as=\"select\" onChange={({ currentTarget }) => {\n                                    setClinicId(currentTarget.value);\n                                }} >\n                                    <option></option>\n                                    {\n                                        clinics.map((clinic) => {\n                                            return (\n                                                <option key={clinic.id} value={clinic.id}>{clinic.name}</option>\n                                            );\n                                        })\n                                    }\n                                </Form.Control>\n                            </Form.Group>\n                        </Form.Row>\n                        <Button variant=\"primary\" type=\"submit\">\n                            Register\n                        </Button>\n                    </Form>\n                </Col>\n            </Row>\n\n        </Container>\n    );\n}\n\nexport default ClinicAdminReg;","const reducer = 'medicalRecordReducer';\n\nexport const medicalRecordSelector = state => state[reducer].medicalRecord;\nexport const isFetchMedicalRecordSelector = state => state[reducer].isFetchMedicalRecord;","export const FETCH_MEDICAL_RECORD = 'fetch_medical_record';\nexport const FETCH_MEDICAL_RECORD_BY_APP = 'fetch_medical_record_by_app';\nexport const PUT_MEDICAL_RECORD = 'put_medical_record';\nexport const PUT_IS_FETCH_MEDICAL_RECORD = 'put_is_fetch_medical_record';\nexport const EDIT_MEDICAL_RECORD = 'edit_medical_record';","import {\n    PUT_IS_FETCH_MEDICAL_RECORD,\n    FETCH_MEDICAL_RECORD_BY_APP,\n    PUT_MEDICAL_RECORD,\n    FETCH_MEDICAL_RECORD,\n    EDIT_MEDICAL_RECORD\n} from './constants';\n\nexport const editMedicalRecord = payload => ({\n    type: EDIT_MEDICAL_RECORD,\n    payload\n});\n\nexport const fetchMedicalRecordByApp = payload => ({\n    type: FETCH_MEDICAL_RECORD_BY_APP,\n    payload\n});\n\nexport const fetchMedicalRecord = payload => ({\n    type: FETCH_MEDICAL_RECORD,\n    payload\n});\n\nexport const putMedicalRecord = payload => ({\n    type: PUT_MEDICAL_RECORD,\n    payload\n});\n\nexport const putIsFetchMedicalRecord = payload => ({\n    type: PUT_IS_FETCH_MEDICAL_RECORD,\n    payload\n});\n","export const ADD_MEDICAL_REPORT = 'add_medical_report';\nexport const FETCH_DOCTORS_MEDICAL_REPORTS = 'fetch_doctors_medical_reports';\nexport const PUT_DOCTORS_MEDICAL_REPORTS = 'put_doctors_medical_reports';\nexport const PUT_IS_FETCH_MEDICAL_REPORT = 'put_is_fetch_medical_report';\nexport const EDIT_MEDICAL_REPORT = 'edit_medical_report';","import {\n    ADD_MEDICAL_REPORT,\n    PUT_DOCTORS_MEDICAL_REPORTS,\n    PUT_IS_FETCH_MEDICAL_REPORT,\n    EDIT_MEDICAL_REPORT,\n    FETCH_DOCTORS_MEDICAL_REPORTS\n} from './constants';\n\nexport const fetchDoctorsMedicalReports = payload => ({\n    type: FETCH_DOCTORS_MEDICAL_REPORTS,\n    payload\n});\n\nexport const editMedicalReport = payload => ({\n    type: EDIT_MEDICAL_REPORT,\n    payload\n});\n\nexport const putIsFetchMedicalReport = payload => ({\n    type: PUT_IS_FETCH_MEDICAL_REPORT,\n    payload\n});\n\nexport const putDoctorsMedicalReports = payload => ({\n    type: PUT_DOCTORS_MEDICAL_REPORTS,\n    payload\n});\n\nexport const addMedicalReport = payload => ({\n    type: ADD_MEDICAL_REPORT,\n    payload\n});","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Spinner, Table, Button, Modal, Form } from 'react-bootstrap';\n\n\n\nconst AppSurReq = ({ medRep = false, patientId = null }) => {\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3 className=\"border-bottom\">Book surgery or appointment</h3>\n                </Col>\n            </Row>\n\n        </Container>\n    );\n}\n\nexport default AppSurReq;","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Spinner, Table, Button, Modal, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { diagnosesSelector, isFetchDiagnosesSelector, isFetchMedicinesSelector, medicinesSelector } from '../../store/medicine_diagnose/selectors';\nimport { fetchDiagnosesAll, fetchMedicinesAll } from '../../store/medicine_diagnose/actions';\nimport { addMedicalReport } from '../../store/medical_report/actions';\nimport AppSurReq from '../Common/AppSurReq';\n\n\nconst MedicalReport = ({ typeId, medRecId, patientId }) => {\n    const dispatch = useDispatch();\n    const [description, setDescription] = useState('');\n    const diagnoses = useSelector(diagnosesSelector);\n    const medicines = useSelector(medicinesSelector);\n    const [diagnose, setDiagnose] = useState('');\n    const [medicinesSel, setMedicinesSel] = useState([]);\n    const [show, setShow] = useState(false);\n    const [validated, setValidated] = useState(false);\n\n    useEffect(() => {\n        dispatch(\n            fetchDiagnosesAll({\n            })\n        );\n        dispatch(\n            fetchMedicinesAll({\n                typeId\n            })\n        );\n    }, [typeId]);\n\n    const handleFinishApp = (event) => {\n        const form = event.currentTarget;\n        event.preventDefault();\n        if (form.checkValidity() === false) {\n            event.stopPropagation();\n            setValidated(true);\n        } else {\n            dispatch(\n                addMedicalReport({\n                    appId: typeId,\n                    medRecId,\n                    medicines: medicinesSel,\n                    diagnose,\n                    description\n                })\n            );\n            setValidated(false);\n        }\n    };\n\n\n    if (!isFetchDiagnosesSelector || !isFetchMedicinesSelector) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3 className=\"border-bottom\">Medical report</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 2, offset: 1 }} xs={12}>\n                    <p>Book appointment or surgery</p>\n                </Col>\n                <Col md={{ span: 2 }} xs={12}>\n                    <Button variant=\"primary\" className=\"mb-2\" onClick={() => { setShow(!show); }}>Book</Button>\n                </Col>\n            </Row>\n            {show &&\n                <AppSurReq medRep={true} medRecId={medRecId} patientId={patientId} />\n            }\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Form noValidate validated={validated} onSubmit={handleFinishApp}>\n                        <Form.Row>\n                            <Form.Group as={Col}>\n                                <Form.Label>Short description:</Form.Label>\n                                <Form.Control required as=\"textarea\" rows=\"4\" id=\"txtDescription\"\n                                    onChange={({ currentTarget }) => {\n                                        setDescription(currentTarget.value);\n                                    }}\n                                />\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col} md=\"6\">\n                                <Form.Label>Diagnoses:</Form.Label>\n                                <Form.Control required as=\"select\" id=\"cbDiagnoses\" onChange={({ currentTarget }) => {\n                                    setDiagnose(currentTarget.value);\n                                }} >\n                                    <option></option>\n                                    {\n                                        diagnoses.map((diagnose) => {\n                                            return (\n                                                <option key={diagnose.id} value={diagnose.id}>{diagnose.name}</option>\n                                            );\n                                        })\n                                    }\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group as={Col} md=\"6\">\n                                <Form.Label>Medicines:</Form.Label>\n                                <Form.Control required as=\"select\" id=\"cbMedicines\" multiple onChange={({ currentTarget }) => {\n                                    let options = currentTarget.options;\n                                    let vals = [];\n                                    for (let i = 0; i < options.length; i++) {\n                                        if (options[i].selected) {\n                                            vals.push(options[i].value);\n                                        }\n                                    }\n                                    setMedicinesSel(vals);\n                                }} >\n\n                                    {\n                                        medicines.map((medicines) => {\n                                            return (\n                                                <option key={medicines.id} value={medicines.id}>{medicines.name}</option>\n                                            );\n                                        })\n                                    }\n                                </Form.Control>\n                                <Form.Text className=\"text-muted\">\n                                    For windows hold ctrl and select, for Mac hold mac (command) button and select\n                                </Form.Text>\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Button variant=\"primary\" className=\"mb-5\" type=\"submit\">Finish</Button>\n                        </Form.Row>\n                    </Form>\n                </Col>\n            </Row>\n        </Container >\n    );\n}\n\nexport default MedicalReport;","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Spinner, Table, Button, Modal, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isFetchMedicalRecordSelector, medicalRecordSelector } from '../../store/medical_record/selectors';\nimport { fetchMedicalRecordByApp, editMedicalRecord } from '../../store/medical_record/actions';\nimport { fetchPatientByApp } from '../../store/patients/actions';\nimport { isFetchPatientsSelector, patientSelector } from '../../store/patients/selectors';\nimport MedicalReport from '../MedicalReport/MedicalReport';\n\n\nconst MedicalRecord = ({ match }) => {\n    const dispatch = useDispatch();\n    const isFetchMedicalRecord = useSelector(isFetchMedicalRecordSelector);\n    const medicalRecord = useSelector(medicalRecordSelector);\n    const typeId = match.params.typeId;\n    const patient = useSelector(patientSelector);\n    const isFetchPatient = useSelector(isFetchPatientsSelector);\n    const [show, setShow] = useState(false);\n    const [bloodType, setBloodType] = useState('');\n    const [weight, setWeight] = useState('');\n    const [height, setHeight] = useState('');\n    const [description, setDescription] = useState('');\n    const [validated, setValidated] = useState(false);\n\n\n    useEffect(() => {\n        if (typeId != null) {\n            dispatch(\n                fetchMedicalRecordByApp({\n                    typeId\n                })\n            );\n\n            dispatch(\n                fetchPatientByApp({\n                    typeId\n                })\n            );\n        }\n    }, [typeId]);\n\n    const handleEditMedicalRecord = (event) => {\n        const form = event.currentTarget;\n        event.preventDefault();\n        if (form.checkValidity() === false) {\n            event.stopPropagation();\n            setValidated(true);\n        } else {\n            dispatch(\n                editMedicalRecord({\n                    id: medicalRecord.id,\n                    bloodType,\n                    weight,\n                    height,\n                    description\n                })\n            );\n            setValidated(false);\n            setShow(false);\n        }\n    };\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => {\n        setBloodType(medicalRecord.bloodType);\n        setWeight(medicalRecord.weight);\n        setHeight(medicalRecord.height);\n        setDescription(medicalRecord.description);\n        setShow(true);\n    };\n\n    if (!isFetchMedicalRecord || !isFetchPatient) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Modal show={show} onHide={handleClose} animation={true}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit patient medical record</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form noValidate validated={validated} onSubmit={handleEditMedicalRecord}>\n                        <Form.Group>\n                            <Form.Label>Blood type:</Form.Label>\n                            <Form.Control required type=\"text\" id=\"txtBloodType\" defaultValue={bloodType}\n                                onChange={({ currentTarget }) => {\n                                    setBloodType(currentTarget.value);\n                                }}\n                            />\n                            <Form.Label>Weight:</Form.Label>\n                            <Form.Control required type=\"number\" min=\"0\" step=\"0.01\" id=\"txtWeight\" defaultValue={weight}\n                                onChange={({ currentTarget }) => {\n                                    setWeight(currentTarget.value);\n                                }}\n                            />\n                            <Form.Label>Height:</Form.Label>\n                            <Form.Control required type=\"number\" min=\"0\" step=\"0.01\" id=\"txtHeight\" defaultValue={height}\n                                onChange={({ currentTarget }) => {\n                                    setHeight(currentTarget.value);\n                                }}\n                            />\n                            <Form.Label>Description:</Form.Label>\n                            <Form.Control required as=\"textarea\" id=\"txtDescription\" rows=\"4\" defaultValue={description}\n                                onChange={({ currentTarget }) => {\n                                    setDescription(currentTarget.value);\n                                }}\n                            />\n                        </Form.Group>\n                        <Form.Group as={Col} align=\"right\">\n                            <Button variant=\"primary\" type=\"submit\">\n                                Edit\n                            </Button>\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n            </Modal>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3 className=\"border-bottom\">Patient information</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <tbody>\n                            <tr>\n                                <th>First name</th>\n                                <td align=\"right\">{patient.firstName}</td>\n                            </tr>\n                            <tr>\n                                <th>Last name</th>\n                                <td align=\"right\">{patient.lastName}</td>\n                            </tr>\n                            <tr>\n                                <th>UNOIP</th>\n                                <td align=\"right\">{patient.unoip}</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3 className=\"border-bottom\">Medical record</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <tbody>\n                            <tr>\n                                <th>Blood type</th>\n                                <td align=\"right\">{medicalRecord.bloodType}</td>\n                            </tr>\n                            <tr>\n                                <th>Weight</th>\n                                <td align=\"right\">{medicalRecord.weight}</td>\n                            </tr>\n                            <tr>\n                                <th>Height</th>\n                                <td align=\"right\">{medicalRecord.height}</td>\n                            </tr>\n                            <tr>\n                                <th>Description</th>\n                                <td align=\"right\">{medicalRecord.description}</td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"2\" align=\"right\">\n                                    <Button variant=\"primary\" onClick={() => { handleShow(); }}>Edit</Button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n            <MedicalReport typeId={typeId} medRecId={medicalRecord.id} patientId={patient.id} />\n        </Container>\n    );\n}\n\nexport default MedicalRecord;","import React, { useState, useEffect } from 'react';\nimport useStateWithCallback from 'use-state-with-callback';\nimport { Container, Row, Col, Spinner, Table, Pagination, PageItem } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clinicsDataSelector, isFetchClinicsDataSelector} from '../../store/clinics/selectors';\n\nconst ClinicList = ({ filterTerm, cnt }) => {\n    const clinics = useSelector(clinicsDataSelector);\n    const isFetchClinicsData = useSelector(isFetchClinicsDataSelector);\n\n    if (!isFetchClinicsData) {\n        return <div className=\"d-flex justify-content-center\">\n            \n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3>Clinics list</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Name</th>\n                                <th>Address</th>\n                                <th>Average rating</th>\n                                <th>Price</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                clinics.filter(clinicsDto => clinicsDto.clinic.type.includes(filterTerm)).map((clinicsDto,index) => {\n                                    return (\n                                        <tr key={clinicsDto.clinic.id}>\n                                            <td>{cnt * 10 + index + 1}</td>\n                                            <td>{clinicsDto.clinic.name}</td>\n                                            <td>{clinicsDto.clinic.address}</td>\n                                            <td>{clinicsDto.clinic.averageRating}</td>\n                                            <td>{clinicsDto.clinic.price}</td>\n                                        </tr>\n                                    );\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n        </Container>\n\n    );\n}\n\nexport default ClinicList;","import React, { useEffect, useState } from 'react';\nimport useStateWithCallback from 'use-state-with-callback';\nimport { Container, Row, Col, Table, Form, Button, Pagination } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { fetchClinicsData, searchClinic } from '../../store/clinics/actions';\nimport { pageCountSelector } from '../../store/clinics/selectors';\nimport ClinicList from './ClinicList';\nimport { fetchPatientData } from '../../store/user/actions';\nimport { userDataSelector, userIdSelector } from '../../store/user/selectors';\n\n\nconst ClinicSearch = ({ match }) => {\n    const dispatch = useDispatch();\n    const id = useSelector(userIdSelector);\n    const data = useSelector(userDataSelector);\n    const pageCount = useSelector(pageCountSelector);\n    const [today, setToday] = useState(moment().format('YYYY-MM-DD'));\n    const [date, setDate] = useState(null);\n    const [type, setType] = useState(null);\n    const [rating, setRating] = useState(null);   \n    const [pageCnt, setPageCnt] = useState(0);\n    const [filterTerm, setFilterTerm] = useState('');\n    const [sort, setSort] = useState(0);\n    /*const [dateString, setDateString] = useStateWithCallback(moment().format('YYYY-MM-DD'), sdString => {\n        setDate((new Date(sdString)).getTime() / 1000 | 0);\n    });*/\n\n    const handleClinicSearch = (event) => {\n        dispatch(\n            searchClinic({\n                patientId: data.patientId,\n                date,\n                type,\n                rating,\n                pageCnt,\n                sort\n\n            })\n        );\n    };\n\n    useEffect(() => {\n        if(date!=null && type!=null && rating!=null){\n            dispatch(\n                searchClinic({\n                    patientId: data.patientId,\n                    date,\n                    type,\n                    rating,\n                    pageCnt,\n                    sort\n\n                })\n            );\n        }\n\n    }, [pageCnt, sort]);\n\n    let items = [];\n    for (let number = 1; number <= pageCount; number++) {\n        items.push(\n            <Pagination.Item key={number} active={number == (pageCnt + 1)}>\n                {number}\n            </Pagination.Item>\n        );\n    }\n\n    const handlePagination = (e) => {\n        e.preventDefault();\n        let event = e.target.text;\n        if (event != undefined && pageCount > 0) {\n            if (event.includes('First')) {\n                setPageCnt(0);\n            } else if (event.includes('Last')) {\n                setPageCnt(pageCount - 1);\n            } else if (event.includes('Next')) {\n                if (pageCnt < pageCount - 1) {\n                    setPageCnt(pageCnt + 1);\n                }\n            } else if (event.includes('Previous')) {\n                if (pageCnt > 0) {\n                    setPageCnt(pageCnt - 1);\n                }\n            } else {\n                setPageCnt(event - 1);\n            }\n        }\n    };\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h2 className=\"border-bottom\">Clinics List</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Form>\n                    <Form.Row>\n                        <Form.Group as={Col}>\n                            <Form.Label>Date:</Form.Label>\n                            <Form.Control type=\"date\" min={today} value={date} id=\"date1\"\n                                onChange={({ currentTarget }) => {\n                                    setDate(currentTarget.value);\n                                }} />\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                            <Form.Label>Type:</Form.Label>\n                            <Form.Control as=\"select\" onChange={({ currentTarget }) => {\n                                setType(currentTarget.value);\n                            }} >\n                                <option>Choose...</option>\n                                <option>Tip1</option>\n                                <option>Tip2</option>\n                            </Form.Control>\n                            </Form.Group>\n                            <Form.Group as ={Col}>\n                                <Form.Label>Rating:</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Rating\"\n                                    onChange={({ currentTarget }) => {\n                                    setRating(currentTarget.value);\n                                }}/>\n                            </Form.Group>\n                            </Form.Row>\n                            <Button variant=\"primary\" className=\"mt-2\" onClick={handleClinicSearch}>\n                                Search\n                            </Button>\n\n                        </Form>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={{ span: 3, offset: 1 }} xs={12}>\n                        <Form>\n                            <Form.Label>Filter clinics by</Form.Label>\n\n                            <Form.Control as=\"select\" onChange={({ currentTarget }) => {\n                            setFilterTerm(currentTarget.value);\n                        }} >\n                                <option>Choose...</option>\n                                <option>Price</option>\n                                <option>Rating</option>\n                            </Form.Control>\n                        </Form>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={{ span: 3, offset: 1 }} xs={12}>\n                        <Form>\n                            <Form.Label>Sort clinics by</Form.Label>\n                            <Form.Control as=\"select\" onChange={({ currentTarget }) => {\n                                    setSort(currentTarget.value);\n                                }} >\n                                    <option value=\"0\">-</option>\n                                    <option value=\"1\">Name (asc)</option>\n                                    <option value=\"2\">Name (desc)</option>\n                                    <option value=\"3\">City (asc)</option>\n                                    <option value=\"4\">City (desc)</option>\n                                </Form.Control>\n                    </Form>\n                </Col>\n            </Row>\n            <ClinicList cnt={pageCnt} filterTerm={filterTerm} />\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Pagination onClick={handlePagination} className=\"pagination justify-content-center mb-5\">\n                        <Pagination.First />\n                        <Pagination.Prev />\n                        {items}\n                        <Pagination.Next />\n                        <Pagination.Last />\n                    </Pagination>\n                </Col>\n            </Row>\n        </Container>\n    );\n\n}\n\nexport default ClinicSearch;","import React, { useState, useEffect } from 'react';\nimport useStateWithCallback from 'use-state-with-callback';\nimport { Container, Row, Col, Spinner, Table, Pagination, PageItem } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { doctorsDataSelector, isFetchDoctorsSelector } from '../../store/doctors/selectors';\n\nconst DoctorList = ({ filterTerm, cnt }) => {\n    const doctors = useSelector(doctorsDataSelector);\n    const isFetchDoctorsData = useSelector(isFetchDoctorsSelector);\n\n\n    if(!isFetchDoctorsData) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3>Doctors list</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>First Name</th>\n                                <th>Last Name</th>\n                                <th>Average rating</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                doctors.filter(doctor => doctor.type.includes(filterTerm)).map((doctor, index) => {\n                                    return (\n                                        <tr key={doctor.id}>\n                                            <td>{cnt * 10 + index + 1}</td>\n                                            <td>{doctor.firstName}</td>\n                                            <td>{doctor.lastName}</td>\n                                            <td>{doctor.averageRating}</td>\n                                        </tr>\n                                    );\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>       \n        </Container>\n    );\n}\n\nexport default DoctorList;","import React, { useEffect, useState } from 'react';\nimport useStateWithCallback from 'use-state-with-callback';\nimport { Container, Row, Col, Table, Form, Button, Pagination } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { searchDoctor } from '../../store/doctors/actions';\nimport { pageCountSelector } from '../../store/doctors/selectors';\nimport DoctorList from './DoctorList';\n\n\nconst DoctorSearch = () => {\n    const dispatch = useDispatch();\n    const pageCount = useSelector(pageCountSelector);\n    const [today, setToday] = useState(moment().format('YYYY-MM-DD'));\n    const [date, setDate] = useState(moment().format('YYYY-MM-DD'));\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [averageRating, setAverageRating] = useState('');\n    const [type, setType] = useState('');\n    const [pageCnt, setPageCnt] = useState(0);\n    const [filterTerm, setFilterTerm] = useState('');\n\n    const handleDoctorsSearch = () => {\n        dispatch(\n            searchDoctor({\n                firstName,\n                lastName,\n                averageRating,\n                date,\n                type,\n                pageCnt\n            })\n        );\n\n    };\n\n    useEffect(() => {\n        dispatch(\n            searchDoctor({\n                firstName,\n                lastName,\n                averageRating,\n                date,\n                type,\n                pageCnt\n            })\n        );\n    }, [pageCnt]);\n\n    let items = [];\n    for (let number = 1; number <= pageCount; number++) {\n        items.push(\n            <Pagination.Item key={number} active={number == (pageCnt + 1)}>\n                {number}\n            </Pagination.Item>\n        );\n    }\n\n    const handlePagination = (e) => {\n        e.preventDefault();\n        let event = e.target.text;\n        if (event != undefined && pageCount > 0) {\n            if (event.includes('First')) {\n                setPageCnt(0);\n            } else if (event.includes('Last')) {\n                setPageCnt(pageCount - 1);\n            } else if (event.includes('Next')) {\n                if (pageCnt < pageCount - 1) {\n                    setPageCnt(pageCnt + 1);\n                }\n            } else if (event.includes('Previous')) {\n                if (pageCnt > 0) {\n                    setPageCnt(pageCnt - 1);\n                }\n            } else {\n                setPageCnt(event - 1);\n            }\n        }\n    };\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h2 className=\"border-bottom\">Doctors List</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Form>\n                        <Form.Row>\n                        <Form.Group as={Col}>\n                        <Form.Label>First name:</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter first name\"\n                            onChange={({ currentTarget }) => {\n                                setFirstName(currentTarget.value);\n                            }} \n                        />\n                        </Form.Group>\n                        <Form.Group as={Col} >\n                        <Form.Label>Last name:</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter last name\"\n                            onChange={({ currentTarget }) => {\n                                setLastName(currentTarget.value);\n                            }}\n                        />\n                        </Form.Group>\n                        <Form.Group as={Col} >\n                        <Form.Label>Average rating:</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter average rating\"\n                            onChange={({ currentTarget }) => {\n                                setAverageRating(currentTarget.value);\n                            }} \n                        />\n                        </Form.Group>\n                        </Form.Row>\n                            <Button variant=\"primary\" className=\"mt-2\" onClick={handleDoctorsSearch}>\n                                Search\n                            </Button>\n                    </Form>\n                    </Col>\n                    </Row>\n                    <Row>\n                    <Col md={{ span: 3, offset: 1 }} xs={12}>\n                    <Form>\n                        <Form.Label>Filter doctors by</Form.Label>\n                            <Form.Control as=\"select\">\n                                <option>Choose...</option>\n                                <option>...</option>\n                            </Form.Control>\n                    </Form>\n            </Col>\n        </Row>\n        <DoctorList cnt={pageCnt} filterTerm={filterTerm} />\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Pagination onClick={handlePagination} className=\"pagination justify-content-center mb-5\">\n                        <Pagination.First />\n                        <Pagination.Prev />\n                        {items}\n                        <Pagination.Next />\n                        <Pagination.Last />\n                    </Pagination>\n                </Col>\n            </Row>\n        </Container>\n    )\n\n}\n\nexport default DoctorSearch;","import React from 'react';\nimport {Table, Row, Col, InputGroup, DropdownButton, Dropdown, Container, FormControl} from 'react-bootstrap';\n\nfunction History(){\n    return(\n        <Container>\n            <Row >\n                <Col md={{ span:12 }} xs={12}>\n                    <h3 className=\"border-bottom\">History of surgeries and examinations</h3>\n                </Col>\n            </Row>\n            <Row>\n            <Col md={{ span:8,offset:2}} xs={12}>  \n                <InputGroup>\n                <FormControl\n                placeholder=\"Sort history by\"\n                aria-describedby=\"basic-addon2\"\n                />\n \n                <DropdownButton\n                as={InputGroup.Append}\n                variant=\"outline-secondary\"\n                title=\"Options\"\n                id=\"input-group-dropdown-2\"\n                >\n                    <Dropdown.Item href=\"#\">Date</Dropdown.Item>\n                    <Dropdown.Item href=\"#\">Surgeries</Dropdown.Item>\n                    <Dropdown.Item href=\"#\">Examinations</Dropdown.Item>\n                </DropdownButton>\n                </InputGroup>\n                </Col>\n                </Row>\n                <Row>\n                <Col md={{ span:8,offset:2}} xs={12}> \n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>Date</th>\n                                <th>Surgeries</th>\n                                <th>Examinations</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>07/25/2019</td>\n                                <td>nesto</td>\n                                <td>bbbb</td>\n                            </tr>\n                            <tr>\n                                <td>10/11/2019</td>\n                                <td>aaa</td>\n                                <td>ww</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                    </Col>\n                </Row>\n\n        </Container>\n\n    );\n\n\n}\nexport default History;","const reducer = 'prescriptionReducer';\n\nexport const prescriptionsDataSelector = state => state[reducer].prescriptions;\nexport const isFetchPrescriptionsSelector = state => state[reducer].isFetchPrescriptions;","export const FETCH_PRESCRIPTIONS = 'fetch_prescriptions';\nexport const PUT_PRESCRIPTIONS_DATA = 'put_prescriptions_data';\nexport const REWRITE_PRESCRIPTION = 'rewrite_prescription';\nexport const PUT_IS_FETCH_PRESCRIPTIONS = 'put_is_fetch_prescriptions';","import {\n    PUT_PRESCRIPTIONS_DATA,\n    FETCH_PRESCRIPTIONS,\n    PUT_IS_FETCH_PRESCRIPTIONS,\n    REWRITE_PRESCRIPTION\n} from './constants';\n\nexport const fetchPrescriptions = payload => ({\n    type: FETCH_PRESCRIPTIONS,\n    payload\n});\n\nexport const putPrescriptionsData = payload => ({\n    type: PUT_PRESCRIPTIONS_DATA,\n    payload\n});\n\nexport const rewritePrescription = payload => ({\n    type: REWRITE_PRESCRIPTION,\n    payload\n});\n\nexport const putIsFetchPrescriptions = payload => ({\n    type: PUT_IS_FETCH_PRESCRIPTIONS,\n    payload\n});\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Row, Col, Button, Container, Table } from 'react-bootstrap';\nimport { prescriptionsDataSelector } from '../../store/prescriptions/selectors';\nimport { fetchPrescriptions, rewritePrescription } from '../../store/prescriptions/actions';\nimport { userDataSelector } from '../../store/user/selectors';\n\n\nconst RewritePrescription = () => {\n    const dispatch = useDispatch();\n    const prescriptions = useSelector(prescriptionsDataSelector);\n    const data = useSelector(userDataSelector);\n    const nurseId = data.id;\n    const clinicId = data.clinicId;\n    const handleRewrite = (prescriptionId) => {\n        dispatch(\n            rewritePrescription({\n                nurseId,\n                prescriptionId,\n                clinicId\n            })\n        );\n    };\n\n    useEffect(() => {\n        if (nurseId != null) {\n            dispatch(\n                fetchPrescriptions({clinicId})\n            );\n        }\n    }, [nurseId]);\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3>Prescriptions for rewrite</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>Medicine code</th>\n                                <th>Medicine name</th>\n                                <th>Rewrite</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                prescriptions.map((prescription, index) => {\n                                    return (\n                                        <tr key={index}>\n                                            <td>{prescription.medicineCode}</td>\n                                            <td>{prescription.medicineName}</td>\n                                            <td>\n                                                <Button variant=\"primary\" onClick={() => handleRewrite(prescription.id)}>\n                                                    Rewrite\n                                                    </Button>\n                                            </td>\n                                        </tr>\n                                    );\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default RewritePrescription;","const reducer = 'medicalReportReducer';\n\nexport const medicalReportSelector = state => state[reducer].medicalReport;\nexport const isFetchMedicalReportSelector = state => state[reducer].isFetchMedicalReport;\nexport const medicalReportsSelector = state => state[reducer].medicalReports;","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Spinner, Table, Button, Modal, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isFetchMedicalReportSelector, medicalReportsSelector } from '../../store/medical_report/selectors';\nimport { userIdSelector } from '../../store/user/selectors';\nimport { fetchDoctorsMedicalReports, editMedicalReport } from '../../store/medical_report/actions';\nimport { fetchDiagnosesAll } from '../../store/medicine_diagnose/actions';\nimport { diagnosesSelector, isFetchDiagnosesSelector } from '../../store/medicine_diagnose/selectors';\n\n\nconst DoctorMedicalReport = () => {\n    const dispatch = useDispatch();\n    const doctorId = useSelector(userIdSelector);\n    const medicalReports = useSelector(medicalReportsSelector);\n    const isFetchMedicalReport = useSelector(isFetchMedicalReportSelector);\n    const diagnoses = useSelector(diagnosesSelector);\n    const isFetchDiagnose = useSelector(isFetchDiagnosesSelector);\n    const [show, setShow] = useState(false);\n    const [validated, setValidated] = useState(false);\n    const [id, setId] = useState('');\n    const [description, setDescription] = useState('');\n    const [diagnoseNam, setDiagnoseNam] = useState('');\n    const [diagnoseId, setDiagnoseId] = useState(null);\n\n    useEffect(() => {\n        if (doctorId != null) {\n            dispatch(\n                fetchDoctorsMedicalReports({\n                    doctorId\n                })\n            );\n        }\n        dispatch(\n            fetchDiagnosesAll({})\n        );\n    }, [doctorId]);\n\n    const handleEditMedicalReport = (event) => {\n        const form = event.currentTarget;\n        event.preventDefault();\n        if (form.checkValidity() === false) {\n            event.stopPropagation();\n            setValidated(true);\n        } else {\n            dispatch(\n                editMedicalReport({\n                    id,\n                    description,\n                    diagnoseId,\n                    doctorId\n                })\n            );\n            setValidated(false);\n            setShow(false);\n        }\n    };\n\n    const handleClose = () => setShow(false);\n    const handleShow = (medRepId, description, diagnose) => {\n        setId(medRepId);\n        setDiagnoseNam(diagnose);\n        setDescription(description);\n        setShow(true);\n    };\n\n    if (!isFetchMedicalReport || !isFetchDiagnose) {\n        return <div className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>;\n    }\n\n    return (\n        <Container>\n            <Modal show={show} onHide={handleClose} animation={true}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit patient medical record</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form noValidate validated={validated} onSubmit={handleEditMedicalReport}>\n                        <Form.Group as={Col} md=\"6\">\n                            <Form.Label>Diagnoses:</Form.Label>\n                            <Form.Control required as=\"select\" id=\"cbDiagnoses\" onChange={({ currentTarget }) => {\n                                setDiagnoseId(currentTarget.value);\n                            }} >\n                                <option></option>\n                                {\n                                    diagnoses.map((diagnose) => {\n                                        let flag = false;\n                                        if (diagnose.name === diagnoseNam) {\n                                            flag = true;\n                                        }\n                                        return (\n                                            <option key={diagnose.id} selected={flag} value={diagnose.id}>{diagnose.name}</option>\n                                        );\n                                    })\n                                }\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Description:</Form.Label>\n                            <Form.Control required as=\"textarea\" id=\"txtDescription\" maxlength=\"80\" rows=\"4\" defaultValue={description}\n                            onChange={({ currentTarget }) => {\n                                setDescription(currentTarget.value);\n                            }}\n                            />\n                        </Form.Group>\n                        <Form.Group as={Col} align=\"right\">\n                            <Button variant=\"primary\" type=\"submit\">\n                                Edit\n                            </Button>\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n            </Modal>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <h3 className=\"border-bottom\">Doctor medical report</h3>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={{ span: 10, offset: 1 }} xs={12}>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>Patient name</th>\n                                <th>Appointment date</th>\n                                <th>Description</th>\n                                <th>Diagnose name</th>\n                                <th>Medicines</th>\n                                <th>Action</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                medicalReports.map((medRep) => {\n                                    return (\n                                        <tr key={medRep.id}>\n                                            <td>{medRep.patientName}</td>\n                                            <td>{medRep.appDate}</td>\n                                            <td>{medRep.description}</td>\n                                            <td>{medRep.diagnoseName}</td>\n                                            <td>\n                                                <Form.Control required as=\"select\" id=\"cbMedicines\" multiple>\n                                                    {\n                                                        medRep.medicineName.map((medName, index) => {\n                                                            return (\n                                                                <option key={index} diabled>{medName}</option>\n                                                            );\n                                                        })\n                                                    }\n                                                </Form.Control>\n                                            </td>\n                                            <td>\n                                                <Button variant=\"primary\" onClick={() => { handleShow(medRep.id, medRep.description, medRep.diagnoseName); }}>\n                                                    Edit\n                                                </Button>\n                                            </td>\n                                        </tr>\n                                    );\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n        </Container >\n    );\n}\n\nexport default DoctorMedicalReport;","import React from 'react';\nimport { Route, Redirect, Switch } from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport LoginPage from './pages/LoginPage';\nimport PatientHomePage from './pages/PatientHomePage';\nimport RegPage from './pages/RegPage';\nimport DoctorHomePage from './pages/DoctorHomePage';\nimport NurseHomePage from './pages/NurseHomePage';\nimport ClinicCenterAdminProfile from './pages/ClinicCenterAdminProfile';\nimport HolidayAproval from './components/HolidayAproval';\nimport PasswordChanger from './components/PasswordChanger';\nimport ClinicAdmin from './components/ClinicAdmin/CA';\nimport RoomAllAtOnce from './components/Room/RoomAllAtOnce';\nimport RoomSearch from './components/Room/RoomSearch';\nimport PrivateRoute from './components/PrivateRoute';\nimport DoctorAllAtOnce from './components/ClinicAdmin/DoctorAllAtOnce';\nimport ClinicProfile from './components/ClinicAdmin/ClinicProfile';\nimport BusinessReport from './components/ClinicAdmin/BusinessReport';\nimport UserProfile from './components/UserProfile';\nimport FreeAppointment from './components/ClinicAdmin/FreeApointment';\nimport AppointmentTypAllAtOnce from './components/ClinicAdmin/AppointmentTypeAllAtOnce';\nimport Pricelist from './components/ClinicAdmin/Pricelist';\nimport SurgeryReq from './components/SurgeryRequirement/SurgeryReq';\nimport Unauthorized from './components/Unauthorized';\nimport PatientPagination from './components/Patient/PatientPagination';\nimport WorkCalendar from './components/Calendar/WorkCalendar';\nimport HolAbsRequest from './components/HolidayAbsence/HolAbsRequest';\nimport BookingDoc from './components/BookingDoc';\nimport AppointmentInfo from './components/ApointmentInfo';\nimport SurReqDoctors from './components/SurgeryRequirement/SurReqDoctors';\nimport AddDiagnose from './components/MedicineDiagnose/AddDiagnose';\nimport AddMedicine from './components/MedicineDiagnose/AddMedicine';\nimport RegistrationAproval from './components/RegistrationReq/RegistrationAproval';\nimport ClinicReg from './components/Clinic/ClinicReg';\nimport AdminReg from './components/ClinicCenterAdmin/AdminReg';\nimport ClinicAdminReg from './components/ClinicAdmin/ClinicAdminReg';\nimport MedicalRecord from './components/MedicalRecord/MedicalRecord';\nimport ClinicSearch from './components/Clinic/ClinicSearch';\nimport DoctorSearch from './components/Doctor/DoctorSearch';\nimport History from './components/Patient/History';\nimport RewritePrescription from './components/Prescriptions/RewritePrescription';\nimport PatientList from './components/Patient/PatientList';\nimport DoctorMedicalReport from './components/MedicalReport/DoctorMedicalReport';\n\nconst AppRouter = () => {\n    return (\n        <Switch>\n            <Route exact path=\"/\" component={HomePage} />\n            <Route exact path=\"/login\" component={LoginPage} />\n            <Route exact path=\"/signup\" component={RegPage} />\n            <Route exact path=\"/prob\" component={HolidayAproval} />\n            <Route exact path=\"/signup\" component={RegPage} />\n            <Route exact path=\"/change-pass\" component={PasswordChanger} />\n\n\n            <PrivateRoute exact path=\"/nurse-page/rew-presc\" component={RewritePrescription} accessRole={[\"ROLE_NURSE\"]} />\n            <PrivateRoute exact path=\"/nurse-page\" component={NurseHomePage} accessRole={[\"ROLE_NURSE\"]} />\n\n            <PrivateRoute exact path=\"/medical-rec/:typeId\" component={MedicalRecord} accessRole={[\"ROLE_DOCTOR\",\"ROLE_PATIENT\"]} />\n\n            <PrivateRoute exact path=\"/ccadmin/regca\" component={ClinicAdminReg} accessRole={[\"ROLE_CCADMIN\"]} />\n            <PrivateRoute exact path=\"/ccadmin/cli-reg\" component={ClinicReg} accessRole={[\"ROLE_CCADMIN\"]} />\n            <PrivateRoute exact path=\"/ccadmin/reg-req\" component={RegistrationAproval} accessRole={[\"ROLE_CCADMIN\"]} />\n            <PrivateRoute exact path=\"/ccadmin/add-med\" component={AddMedicine} accessRole={[\"ROLE_CCADMIN\"]} />\n            <PrivateRoute exact path=\"/ccadmin/add-diag\" component={AddDiagnose} accessRole={[\"ROLE_CCADMIN\"]} />\n            <PrivateRoute exact path=\"/ccadmin/cca-reg\" component={AdminReg} accessRole={[\"ROLE_CCADMIN\"]} />\n            <PrivateRoute exact path=\"/ccadmin\" component={ClinicCenterAdminProfile} accessRole={[\"ROLE_CCADMIN\"]} />\n\n            <PrivateRoute exact path=\"/pat/search-cli\" component={ClinicSearch} accessRole={[\"ROLE_PATIENT\"]} />\n            <PrivateRoute exact path=\"/pat/search-doc\" component={DoctorSearch} accessRole={[\"ROLE_PATIENT\"]} />\n            <PrivateRoute exact path=\"/pat/history\" component={History} accessRole={[\"ROLE_PATIENT\"]} />\n            <PrivateRoute exact path=\"/pat\" component={PatientHomePage} accessRole={[\"ROLE_PATIENT\"]} />\n\n            <PrivateRoute exact path=\"/doc/med-reps\" component={DoctorMedicalReport} accessRole={[\"ROLE_DOCTOR\"]} />\n            <PrivateRoute exact path=\"/doc/pat-list\" component={PatientList} accessRole={[\"ROLE_DOCTOR\"]} />\n            <PrivateRoute exact path=\"/doc/app-info\" component={AppointmentInfo} accessRole={[\"ROLE_DOCTOR\"]} />\n            <PrivateRoute exact path=\"/doc/bok-doc\" component={BookingDoc} accessRole={[\"ROLE_DOCTOR\"]} />\n            <PrivateRoute exact path=\"/doc\" component={DoctorHomePage} accessRole={[\"ROLE_DOCTOR\"]} />\n\n            <PrivateRoute exact path=\"/pers/pat-list\" component={PatientPagination} accessRole={[\"ROLE_NURSE\", \"ROLE_DOCTOR\"]} />\n            <PrivateRoute exact path=\"/pers/hol-abs\" component={HolAbsRequest} accessRole={[\"ROLE_NURSE\", \"ROLE_DOCTOR\"]} />\n            <PrivateRoute exact path=\"/pers/work-cal\" component={WorkCalendar} accessRole={[\"ROLE_NURSE\", \"ROLE_DOCTOR\"]} />\n\n            <PrivateRoute exact path=\"/adminc/pick-doc\" component={SurReqDoctors} accessRole={[\"ROLE_ADMINC\"]} />\n            <PrivateRoute exact path=\"/adminc/room-search/:reason\" component={RoomSearch} accessRole={[\"ROLE_ADMINC\"]} />\n            <PrivateRoute exact path=\"/adminc/exe-room/:clinicId\" component={RoomAllAtOnce} accessRole={[\"ROLE_ADMINC\"]} />\n            <PrivateRoute exact path=\"/adminc/doc/:clinicId\" component={DoctorAllAtOnce} accessRole={[\"ROLE_ADMINC\"]} />\n            <PrivateRoute exact path=\"/adminc/cli-prof/:clinicId\" component={ClinicProfile} accessRole={[\"ROLE_ADMINC\"]} />\n            <PrivateRoute exact path=\"/adminc/bus-rep/:clinicId\" component={BusinessReport} accessRole={[\"ROLE_ADMINC\"]} />\n            <PrivateRoute exact path=\"/adminc/free-app/:clinicId\" component={FreeAppointment} accessRole={[\"ROLE_ADMINC\"]} />\n            <PrivateRoute exact path=\"/adminc/price-list/:clinicId\" component={Pricelist} accessRole={[\"ROLE_ADMINC\"]} />\n            <PrivateRoute exact path=\"/adminc/app-type\" component={AppointmentTypAllAtOnce} accessRole={[\"ROLE_ADMINC\"]} />\n            <PrivateRoute exact path=\"/adminc/sur-req/:clinicId\" component={SurgeryReq} accessRole={[\"ROLE_ADMINC\"]} />\n            <PrivateRoute exact path=\"/adminc\" component={ClinicAdmin} accessRole={[\"ROLE_ADMINC\"]} />\n\n            <PrivateRoute exact path=\"/user-prof\" component={UserProfile} accessRole={[\"ROLE_NURSE\", \"ROLE_DOCTOR\", \"ROLE_ADMINC\", \"ROLE_PATIENT\"]} />\n            <Route exact path=\"/page-not-found\" component={() => <h1>Page not found!</h1>} />\n            <Route exact path=\"/unauthorized\" component={Unauthorized} />\n            <Redirect from=\"*\" to=\"/page-not-found\" />\n        </Switch>\n    );\n};\n\nexport default AppRouter;","import React from 'react';\nimport { Container } from 'react-bootstrap';\n \nfunction Footer(){\n    return(\n\t\t<Container className=\"mt-5\">\n\t\t\t<footer className=\"fixed-bottom\">\n\t\t\t\t<nav className=\"navbar navbar-expand-sm bg-light navbar-light\">\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<div className=\"navbar-text pull-left\">\n\t\t\t\t\t\t\t<p>© 2019 Jovana, Nevena i Miroslav</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</nav>\n\t\t\t</footer>\n\t\t</Container>\n    );\n}\n \nexport default Footer;","import {\n    PUT_USER_DATA,\n    PUT_USER_TOKEN,\n    PUT_IS_FETCH_USER_DATA,\n    PUT_USER_ID\n} from '../constants';\n\nimport * as computationFunctions from './computation-functions';\n\nconst initialState = {\n    data: {\n        id: window.localStorage.getItem('userID'),\n        firstName: '',\n        lastName: '',\n        email: '',\n        firstLogin: true,\n        roles: JSON.parse(window.localStorage.getItem('roles'))==null?[]:JSON.parse(window.localStorage.getItem('roles'))\n    },\n    token: window.localStorage.getItem('token'),\n    id: window.localStorage.getItem('userID'),\n    isFetchUserData: false\n};\n\nconst userReducer = (state = initialState, { type, payload }) => {\n    if (actionHandler.hasOwnProperty(type)) {\n        return actionHandler[type](state, payload);\n    }\n    return state;\n};\n\nconst actionHandler = {\n    [PUT_USER_DATA]: computationFunctions.putUserData,\n    [PUT_USER_TOKEN]: computationFunctions.putUserToken,\n    [PUT_IS_FETCH_USER_DATA]: computationFunctions.putIsFetchUserData,\n    [PUT_USER_ID]: computationFunctions.putUserId\n};\n\nexport default userReducer;","export function putUserData(state, payload) {\n    return {\n        ...state,\n        data: payload\n    };\n}\n  \nexport function putUserToken(state, payload) {\n    return {\n        ...state,\n        token: payload\n    };\n}\n\nexport function putUserId(state, payload) {\n    return {\n        ...state,\n        id: payload\n    };\n}\n\nexport function putIsFetchUserData(state, payload) {\n    return {\n        ...state,\n        isFetchUserData: payload\n    };\n}\n","import {\n    PUT_REG_REQS_DATA,\n    PUT_IS_FETCH_REG_REQS,\n    PUT_REG_REQS_CNT\n} from '../constants';\n\nimport * as computationFunctions from './computation-functions';\n\nconst initialState = {\n    reqs:[],\n    isFetchRegReqs:false,\n    regReqsPageCnt: 0\n};\n\nconst regReqsReducer = (state = initialState, { type, payload })=>{\n    if(actionHandler.hasOwnProperty(type)){\n        return actionHandler[type](state,payload);\n    }\n    return state;\n};\n\nconst actionHandler = {\n    [PUT_REG_REQS_DATA]: computationFunctions.putRegReqsData,\n    [PUT_IS_FETCH_REG_REQS]: computationFunctions.putIsFetchRegReqs,\n    [PUT_REG_REQS_CNT]: computationFunctions.putRegReqsCnt\n  };\n\nexport default regReqsReducer;","export function putRegReqsData(state, payload) {\n    return {\n        ...state,\n        reqs: payload\n    };\n}\n\nexport function putIsFetchRegReqs(state, payload) {\n    return {\n        ...state,\n        isFetchRegReqs: payload\n    };\n}\n\nexport function putRegReqsCnt(state, payload) {\n    return {\n        ...state,\n        regReqsPageCnt: payload\n    };\n}","import {\n    PUT_PATIENTS_DATA,\n    PUT_IS_FETCH_PATIENTS,\n    PUT_PATIENT\n} from '../constants';\n\nimport * as computationFunctions from './computation-functions';\n\nconst initialState = {\n    patients:[],\n    isFetchPatients:false,\n    patient: null\n};\n\nconst patientsReducer = (state = initialState, { type, payload })=>{\n    if(actionHandler.hasOwnProperty(type)){\n        return actionHandler[type](state,payload);\n    }\n    return state;\n};\n\nconst actionHandler = {\n    [PUT_PATIENTS_DATA]: computationFunctions.putPatientsData,\n    [PUT_IS_FETCH_PATIENTS]: computationFunctions.putIsFetchPatients,\n    [PUT_PATIENT]: computationFunctions.putPatient\n  };\n\nexport default patientsReducer;","export function putPatientsData(state, payload) {\n    return {\n        ...state,\n        patients: payload\n    };\n}\n\nexport function putIsFetchPatients(state, payload) {\n    return {\n        ...state,\n        isFetchPatients: payload\n    };\n}\n\nexport function putPatient(state, payload) {\n    return {\n        ...state,\n        patient: payload\n    };\n}","import {\n    PUT_CALENDAR_DATA,\n    PUT_IS_FETCH_CALENDAR\n} from '../constants';\n\nimport * as computationFunctions from './computation-functions';\n\nconst initialState = {\n    calendar: {\n        id: '',\n        calendarItemResponses: []\n    },\n    isFetchCalendar: false\n};\n\nconst calendarReducer = (state = initialState, { type, payload }) => {\n    if (actionHandler.hasOwnProperty(type)) {\n        return actionHandler[type](state, payload);\n    }\n    return state;\n};\n\nconst actionHandler = {\n    [PUT_CALENDAR_DATA]: computationFunctions.putCalendarData,\n    [PUT_IS_FETCH_CALENDAR]: computationFunctions.putIsFetchCalendar\n};\n\nexport default calendarReducer;","export function putCalendarData(state, payload) {\n    return {\n        ...state,\n        calendar: payload\n    };\n}\n\nexport function putIsFetchCalendar(state, payload) {\n    return {\n        ...state,\n        isFetchCalendar: payload\n    };\n}","import {\n    PUT_ABS_HOL_REQUESTS,\n    PUT_IS_FETCH_ABS_HOL_REQUESTS\n} from '../constants';\n\nimport * as computationFunctions from './computation-functions';\n\nconst initialState = {\n    absholrequests: [],\n    isFetchAbsHolRequests: false\n};\n\nconst absenceHolidayReducer = (state = initialState, { type, payload }) => {\n    if (actionHandler.hasOwnProperty(type)) {\n        return actionHandler[type](state, payload);\n    }\n    return state;\n};\n\nconst actionHandler = {\n    [PUT_ABS_HOL_REQUESTS]: computationFunctions.putAbsHolRequests,\n    [PUT_IS_FETCH_ABS_HOL_REQUESTS]: computationFunctions.putIsFetchAbsHolRequests\n};\n\nexport default absenceHolidayReducer;","export function putAbsHolRequests(state, payload) {\n    return {\n        ...state,\n        absholrequests: payload\n    };\n}\n\nexport function putIsFetchAbsHolRequests(state, payload) {\n    return {\n        ...state,\n        isFetchAbsHolRequests: payload\n    };\n}","import {\n    PUT_PRESCRIPTIONS_DATA,\n    PUT_IS_FETCH_PRESCRIPTIONS\n} from '../constants';\n\nimport * as computationFunctions from './computation-functions';\n\nconst initialState = {\n    prescriptions: [],\n    isFetchPrescriptions: false\n};\n\nconst prescriptionReducer = (state = initialState, { type, payload }) => {\n    if (actionHandler.hasOwnProperty(type)) {\n        return actionHandler[type](state, payload);\n    }\n    return state;\n};\n\nconst actionHandler = {\n    [PUT_PRESCRIPTIONS_DATA]: computationFunctions.putPrescriptionsData,\n    [PUT_IS_FETCH_PRESCRIPTIONS]: computationFunctions.putIsFetchPrescriptions\n};\n\nexport default prescriptionReducer;","export function putPrescriptionsData(state, payload) {\n    return {\n        ...state,\n        prescriptions: payload\n    };\n}\n\nexport function putIsFetchPrescriptions(state, payload) {\n    return {\n        ...state,\n        isFetchPrescriptions: payload\n    };\n}","import {\n    PUT_DIAGNOSE_DATA,\n    PUT_MEDICINE_DATA,\n    PUT_IS_FETCH_DIAGNOSE,\n    PUT_IS_FETCH_MEDICINE,\n} from '../constants';\n\nimport * as computationFunctions from './computation-functions';\n\nconst initialState = {\n    medicines: [],\n    isFetchMedicines: false,\n    diagnoses: [],\n    isFetchDiagnoses: false\n};\n\nconst medicineDiagnoseReducer = (state = initialState, { type, payload }) => {\n    if (actionHandler.hasOwnProperty(type)) {\n        return actionHandler[type](state, payload);\n    }\n    return state;\n};\n\nconst actionHandler = {\n    [PUT_DIAGNOSE_DATA]: computationFunctions.putDiagnoseData,\n    [PUT_IS_FETCH_DIAGNOSE]: computationFunctions.putIsFetchDiagnoses,\n    [PUT_MEDICINE_DATA]: computationFunctions.putMedicineData,\n    [PUT_IS_FETCH_MEDICINE]: computationFunctions.putIsFetchMedicines\n};\n\nexport default medicineDiagnoseReducer;","export function putDiagnoseData(state, payload) {\n    return {\n        ...state,\n        diagnoses: payload\n    };\n}\n\nexport function putIsFetchDiagnoses(state, payload) {\n    return {\n        ...state,\n        isFetchDiagnoses: payload\n    };\n}\n\nexport function putMedicineData(state, payload) {\n    return {\n        ...state,\n        medicines: payload\n    };\n}\n\nexport function putIsFetchMedicines(state, payload) {\n    return {\n        ...state,\n        isFetchMedicines: payload\n    };\n}","import {\n    PUT_CLINICS_DATA,\n    PUT_IS_FETCH_CLINICS_DATA,\n} from '../constants';\n\nimport * as computationFunctions from './computation-functions';\n\nconst initialState = {\n    clinics:[],\n    isFetchClinics: false,\n    pageCount: 0\n};\n\nconst clinicReducer = (state = initialState, { type, payload })=>{\n    if(actionHandler.hasOwnProperty(type)){\n        return actionHandler[type](state,payload);\n    }\n    return state;\n};\n\nconst actionHandler = {\n    [PUT_CLINICS_DATA]: computationFunctions.putClinicsData,\n    [PUT_IS_FETCH_CLINICS_DATA]: computationFunctions.putIsFetchClinicsData,\n};\n\nexport default clinicReducer;","export function putClinicsData(state, payload) {\n    return {\n        ...state,\n        clinics: payload\n    };\n}\n\nexport function putIsFetchClinicsData(state, payload) {\n    return {\n        ...state,\n        isFetchClinics: payload\n    };\n}\n\nexport function putPageCount(state, payload) {\n    return {\n        ...state,\n        pageCount: payload\n    };\n}","import {\n    PUT_APPOINTMENT_TYPES,\n    PUT_IS_FETCH_APPOINTMENT_TYPES,\n    PUT_APPOINTMENT,\n    PUT_IS_FETCH_APPOINTMENT\n} from '../constants';\n\nimport * as computationFunctions from './computation-functions';\n\nconst initialState = {\n    appointmentTypes: [],\n    isFetchAppointmentTypes: false,\n    appointment: null,\n    isFetchAppointment: false\n};\n\nconst appointmentReducer = (state = initialState, { type, payload }) => {\n    if (actionHandler.hasOwnProperty(type)) {\n        return actionHandler[type](state, payload);\n    }\n    return state;\n};\n\nconst actionHandler = {\n    [PUT_APPOINTMENT_TYPES]: computationFunctions.putAppointmentTypes,\n    [PUT_IS_FETCH_APPOINTMENT_TYPES]: computationFunctions.putIsFetchAppointmentTypes,\n    [PUT_APPOINTMENT]: computationFunctions.putAppointment,\n    [PUT_IS_FETCH_APPOINTMENT]: computationFunctions.putIsFetchAppointment\n};\n\nexport default appointmentReducer;","export function putAppointmentTypes(state, payload) {\n    return {\n        ...state,\n        appointmentTypes: payload\n    };\n}\n\nexport function putAppointment(state, payload) {\n    return {\n        ...state,\n        appointment: payload\n    };\n}\n\nexport function putIsFetchAppointmentTypes(state, payload) {\n    return {\n        ...state,\n        isFetchAppointmentTypes: payload\n    };\n}\n\nexport function putIsFetchAppointment(state, payload) {\n    return {\n        ...state,\n        isFetchAppointment: payload\n    };\n}","import {\n    PUT_DOCTORS_DATA,\n    PUT_IS_FETCH_DOCTORS_DATA,\n    PUT_PAGE_COUNT\n} from '../constants';\n\nimport * as computationFunctions from './computation-functions';\n\nconst initialState = {\n    doctors: [],\n    isFetchDoctors: false,\n    pageCount: 0\n};\n\nconst doctorsReducer = (state = initialState, { type, payload }) => {\n    if (actionHandler.hasOwnProperty(type)) {\n        return actionHandler[type](state, payload);\n    }\n    return state;\n};\n\nconst actionHandler = {\n    [PUT_DOCTORS_DATA]: computationFunctions.putDoctorsData,\n    [PUT_IS_FETCH_DOCTORS_DATA]: computationFunctions.putIsFetchDoctors,\n    [PUT_PAGE_COUNT]: computationFunctions.putPageCount\n};\n\nexport default doctorsReducer;","export function putDoctorsData(state, payload) {\n    return {\n        ...state,\n        doctors: payload\n    };\n}\n\nexport function putIsFetchDoctors(state, payload) {\n    return {\n        ...state,\n        isFetchDoctors: payload\n    };\n}\n\nexport function putPageCount(state, payload) {\n    return {\n        ...state,\n        pageCount: payload\n    };\n}","import {\n    PUT_ROOMS_DATA, \n    PUT_IS_FETCH_ROOMS,\n    PUT_PAGE_COUNT\n} from '../constants';\n\nimport * as computationFunctions from './computation-functions';\n\nconst initialState = {\n    rooms: [],\n    isFetchRooms: false,\n    pageCount: 0\n};\n\nconst roomsReducer = (state = initialState, { type, payload }) => {\n    if (actionHandler.hasOwnProperty(type)) {\n        return actionHandler[type](state, payload);\n    }\n    return state;\n};\n\nconst actionHandler = {\n    [PUT_ROOMS_DATA]: computationFunctions.putRoomsData,\n    [PUT_IS_FETCH_ROOMS]: computationFunctions.putIsFetchRooms,\n    [PUT_PAGE_COUNT]: computationFunctions.putPageCount\n};\n\nexport default roomsReducer;","export function putRoomsData(state, payload) {\n    return {\n        ...state,\n        rooms: payload\n    };\n}\n\nexport function putIsFetchRooms(state, payload) {\n    return {\n        ...state,\n        isFetchRooms: payload\n    };\n}\n\nexport function putPageCount(state, payload) {\n    return {\n        ...state,\n        pageCount: payload\n    };\n}","import {\n    PUT_SUR_REQ_PAGE_COUNT,\n    PUT_SUR_REQ_DATA,\n    PUT_IS_FETCH_SUR_REQ_DATA,\n    PUT_PICK_SUR_REQ,\n    PUT_PICKED_SUR_REQ,\n    PUT_PICK_TERM,\n    PUT_PICKED_TERM,\n    PUT_PICKED_ROOM\n} from '../constants';\n\nimport * as computationFunctions from './computation-functions';\n\nconst initialState = {\n    surgeryReq: [],\n    isFetchSurgeryReq: false,\n    pageCount: 0,\n    pickSurReq: false,\n    pickedSurReq: null,\n    pickTerm: false,\n    pickedTerm: null,\n    pickedRoom: null\n};\n\nconst surReqReducer = (state = initialState, { type, payload }) => {\n    if (actionHandler.hasOwnProperty(type)) {\n        return actionHandler[type](state, payload);\n    }\n    return state;\n};\n\nconst actionHandler = {\n    [PUT_SUR_REQ_PAGE_COUNT]: computationFunctions.putSurReqPageCount,\n    [PUT_SUR_REQ_DATA]: computationFunctions.putSurReqData,\n    [PUT_IS_FETCH_SUR_REQ_DATA]: computationFunctions.putIsFetchSurReqData,\n    [PUT_PICK_SUR_REQ]: computationFunctions.putPickSurReq,\n    [PUT_PICKED_SUR_REQ]: computationFunctions.putPickedSurReq,\n    [PUT_PICK_TERM]: computationFunctions.putPickTerm,\n    [PUT_PICKED_TERM]: computationFunctions.putPickedTerm,\n    [PUT_PICKED_ROOM]: computationFunctions.putPickedRoom\n};\n\nexport default surReqReducer;","export function putSurReqData(state, payload) {\n    return {\n        ...state,\n        surgeryReq: payload\n    };\n}\n\nexport function putIsFetchSurReqData(state, payload) {\n    return {\n        ...state,\n        isFetchSurgeryReq: payload\n    };\n}\n\nexport function putSurReqPageCount(state, payload) {\n    return {\n        ...state,\n        pageCount: payload\n    };\n}\n\nexport function putPickSurReq(state, payload) {\n    return {\n        ...state,\n        pickSurReq: payload\n    };\n}\n\nexport function putPickedSurReq(state, payload) {\n    return {\n        ...state,\n        pickedSurReq: payload\n    };\n}\n\nexport function putPickTerm(state, payload) {\n    return {\n        ...state,\n        pickTerm: payload\n    };\n}\n\nexport function putPickedTerm(state, payload) {\n    return {\n        ...state,\n        pickedTerm: payload\n    };\n}\n\nexport function putPickedRoom(state, payload) {\n    return {\n        ...state,\n        pickedRoom: payload\n    };\n}","import {\n    PUT_ERROR_MSG,\n    PUT_SUCCESS_MSG,\n    PUT_WARN_MSG,\n    PUT_INFO_MSG,\n    PUT_PAGE_CNT,\n    PUT_SEL_PAGE_CNT\n} from '../constants';\n\nimport * as computationFunctions from './computation-functions';\n\nconst initialState = {\n    error: null,\n    success: null,\n    warn: null,\n    info: null,\n    pageCnt: 0,\n    selPageCnt: 0\n};\n\nconst commonReducer = (state = initialState, { type, payload }) => {\n    if (actionHandler.hasOwnProperty(type)) {\n        return actionHandler[type](state, payload);\n    }\n    return state;\n};\n\nconst actionHandler = {\n    [PUT_ERROR_MSG]: computationFunctions.putError,\n    [PUT_SUCCESS_MSG]: computationFunctions.putSuccess,\n    [PUT_WARN_MSG]: computationFunctions.putWarn,\n    [PUT_INFO_MSG]: computationFunctions.putInfo,\n    [PUT_SEL_PAGE_CNT]: computationFunctions.putSelPageCnt,\n    [PUT_PAGE_CNT]: computationFunctions.putPageCnt\n};\n\nexport default commonReducer;","export const PUT_ERROR_MSG = \"put_error_msg\";\nexport const PUT_SUCCESS_MSG = \"put_success_msg\";\nexport const PUT_WARN_MSG = \"put_warn_msg\";\nexport const PUT_INFO_MSG = \"put_info_msg\";\nexport const PUT_SEL_PAGE_CNT = \"put_sel_page_cnt\";\nexport const PUT_PAGE_CNT = \"put_page_cnt\";","export function putError(state, payload) {\n    return {\n        ...state,\n        error: payload\n    };\n}\n\nexport function putSuccess(state, payload) {\n    return {\n        ...state,\n        success: payload\n    };\n}\n\n\nexport function putWarn(state, payload) {\n    return {\n        ...state,\n        warn: payload\n    };\n}\n\nexport function putInfo(state, payload) {\n    return {\n        ...state,\n        info: payload\n    };\n}\n\nexport function putPageCnt(state, payload) {\n    return {\n        ...state,\n        pageCnt: payload\n    };\n}\n\nexport function putSelPageCnt(state, payload) {\n    return {\n        ...state,\n        selPageCnt: payload\n    };\n}","import {\n    PUT_IS_FETCH_MEDICAL_RECORD,\n    PUT_MEDICAL_RECORD\n} from '../constants';\n\nimport * as computationFunctions from './computation-functions';\n\nconst initialState = {\n    medicalRecord: null,\n    isFetchMedicalRecord: false\n};\n\nconst medicalRecordReducer = (state = initialState, { type, payload }) => {\n    if (actionHandler.hasOwnProperty(type)) {\n        return actionHandler[type](state, payload);\n    }\n    return state;\n};\n\nconst actionHandler = {\n    [PUT_MEDICAL_RECORD]: computationFunctions.putMedicalRecord,\n    [PUT_IS_FETCH_MEDICAL_RECORD]: computationFunctions.putIsFetchMedicalRecord\n};\n\nexport default medicalRecordReducer;","export function putMedicalRecord(state, payload) {\n    return {\n        ...state,\n        medicalRecord: payload\n    };\n}\n\nexport function putIsFetchMedicalRecord(state, payload) {\n    return {\n        ...state,\n        isFetchMedicalRecord: payload\n    };\n}","import {\n    PUT_DOCTORS_MEDICAL_REPORTS,\n    PUT_IS_FETCH_MEDICAL_REPORT\n} from '../constants';\n\nimport * as computationFunctions from './computation-functions';\n\nconst initialState = {\n    medicalReport: null,\n    isFetchMedicalReport: false,\n    medicalReports: []\n};\n\nconst medicalReportReducer = (state = initialState, { type, payload }) => {\n    if (actionHandler.hasOwnProperty(type)) {\n        return actionHandler[type](state, payload);\n    }\n    return state;\n};\n\nconst actionHandler = {\n    [PUT_IS_FETCH_MEDICAL_REPORT]: computationFunctions.putIsFetchMedicalReport,\n    [PUT_DOCTORS_MEDICAL_REPORTS]: computationFunctions.putMedicalReports\n};\n\nexport default medicalReportReducer;","export function putMedicalReport(state, payload) {\n    return {\n        ...state,\n        medicalReport: payload\n    };\n}\n\nexport function putIsFetchMedicalReport(state, payload) {\n    return {\n        ...state,\n        isFetchMedicalReport: payload\n    };\n}\n\nexport function putMedicalReports(state, payload) {\n    return {\n        ...state,\n        medicalReports: payload\n    };\n}","export const ADD_APPOINTEMNT_REQUIREMENT = 'add_appointment_requirement';","import {\n    \n} from '../constants';\n\nimport * as computationFunctions from './computation-functions';\n\nconst initialState = {\n    appointmentReqs: [],\n    isFetchAppointmentReqs: false\n};\n\nconst appReqReducer = (state = initialState, { type, payload }) => {\n    if (actionHandler.hasOwnProperty(type)) {\n        return actionHandler[type](state, payload);\n    }\n    return state;\n};\n\nconst actionHandler = {\n\n};\n\nexport default appReqReducer;","import { combineReducers } from 'redux';\nimport userReducer from './user/reducer';\nimport regReqsReducer from './reg_req/reducer';\nimport patientsReducer from './patients/reducer';\nimport calendarReducer from './calendar/reducer';\nimport absenceHolidayReducer from './absence_holiday/reducer';\nimport prescriptionReducer from './prescriptions/reducer';\nimport medicineDiagnoseReducer from './medicine_diagnose/reducer';\nimport clinicReducer from './clinics/reducer';\nimport appointmentReducer from './appointments/reducer';\nimport doctorsReducer from './doctors/reducer';\nimport roomsReducer from './rooms/reducer';\nimport surReqReducer from './sur_req/reducer';\nimport commonReducer from './common/reducer';\nimport medicalRecordReducer from './medical_record/reducer';\nimport medicalReportReducer from './medical_report/reducer';\nimport appReqReducer from './app_req/reducer';\n\nconst rootReducer = combineReducers({\n    userReducer,\n    regReqsReducer,\n    patientsReducer,\n    calendarReducer,\n    absenceHolidayReducer,\n    prescriptionReducer,\n    medicineDiagnoseReducer,\n    clinicReducer,\n    appointmentReducer,\n    doctorsReducer,\n    roomsReducer,\n    surReqReducer,\n    commonReducer,\n    medicalRecordReducer,\n    medicalReportReducer,\n    appReqReducer\n});\n\n\nexport default (state, action) => {\n    return rootReducer(state, action);\n};","import {\n    PUT_SUCCESS_MSG,\n    PUT_ERROR_MSG,\n    PUT_WARN_MSG,\n    PUT_INFO_MSG,\n    PUT_PAGE_CNT,\n    PUT_SEL_PAGE_CNT\n} from './constants';\n\nexport const putPageCnt = payload => ({\n    type: PUT_PAGE_CNT,\n    payload\n});\n\nexport const putSelPageCnt = payload => ({\n    type: PUT_SEL_PAGE_CNT,\n    payload\n});\n\nexport const putInfoMsg = payload => ({\n    type: PUT_INFO_MSG,\n    payload\n});\n\nexport const putWarnMsg = payload => ({\n    type: PUT_WARN_MSG,\n    payload\n});\n\nexport const putSuccessMsg = payload => ({\n    type: PUT_SUCCESS_MSG,\n    payload\n});\n\nexport const putErrorMsg = payload => ({\n    type: PUT_ERROR_MSG,\n    payload\n});","export const API_BASE = {\n    URL: 'http://localhost:8080/api'\n};","import axios from 'axios';\nimport { API_BASE } from '../constants/api';\nimport { history } from '../index';\n\nclass HttpBaseClient {\n    constructor() {\n        this.client = axios.create({\n            baseURL: API_BASE.URL\n        });\n        this.setInterceptor();\n    }\n\n    setInterceptor = () => {\n        this.client.interceptors.request.use(config => {\n            const token = window.localStorage.getItem(\"token\");\n\n            if (!!token) {\n                Object.assign(config.headers, {\n                    Authorization: `Bearer ${token}`\n                });\n            }\n\n            return config;\n        });\n\n        this.client.interceptors.response.use(function (response) {\n            return response;\n        }, function (error) {\n            const { status, data, config } = error.response;\n            if (status === 401) {\n                history.push('/unauthorized');\n            }\n            throw error;\n        });\n    };\n\n    attachHeaders(headers) {\n        Object.assign(this.client.defaults.headers, headers);\n    }\n\n    detachHeader(headerKey) {\n        delete this.client.defaults.headers[headerKey];\n    }\n\n    getApiClient() {\n        return this.client;\n    }\n}\n\nexport default HttpBaseClient;\n\n","import HttpBaseClient from './HttpBaseClient';\nimport { history } from '../index';\n\nconst FINALPOINTS = {\n    LOGIN: '/sec/login',\n    REGISTRATION: '/sec/registration',\n    CHANGE_PASSWORD: '/sec/change-password'\n};\n\nclass AuthSecurityService extends HttpBaseClient {\n    login = async credentials => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.LOGIN,\n                credentials\n            );\n            \n\n            localStorage.setItem('token', data.token);\n            //brisi dole\n            localStorage.setItem('userID', data.id);\n            localStorage.setItem('roles', JSON.stringify(data.roles));\n\n            /* this.AuthenticatorAssertionResponse({\n                Authorization: `Bearer ${data.token}`\n            }); */\n            return { data };\n\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n    registration = async userData => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.REGISTRATION,\n                userData\n            );\n\n            history.push('/');\n\n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n    changePassword = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.CHANGE_PASSWORD,\n                payload\n            );\n\n            //putting new token in local storage\n            localStorage.setItem('token', data.token);\n            \n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n}\n\nexport default new AuthSecurityService(); ","import HttpClient from './HttpBaseClient';\nimport { history } from '../index';\nimport { format } from 'util';\n\nconst FINALPOINTS = {\n    FETCH_CCADMIN_DATA: '/cca/%s',\n    FETCH_REG_REQS_DATA: '/reg/regreqs/%s',\n    APPROVE_REG_REQ: '/reg/approve/%s',\n    REJECT_REG_REQ: '/reg/reject/%s/%s',\n    REG_CC_ADMIN: '/cca/reg-cca/%s',\n    REG_CLINIC: '/cca/reg-clinic',\n    FETCH_CLINICS: '/cca/clinics',\n};\n\nclass CCAdminService extends HttpClient {\n\n    fetchCCAdminData = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_CCADMIN_DATA, payload.ccAdminId)\n            );\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    fetchRegReqsData = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_REG_REQS_DATA, payload.pageCnt)\n            );\n            const reqData = data;\n            return { reqData };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    approveRegReq = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                format(FINALPOINTS.APPROVE_REG_REQ, payload.regReqId)\n            );\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n\n    };\n\n    rejectRegReq = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(format(FINALPOINTS.REJECT_REG_REQ, payload.reqId, payload.message));\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    regCCAdmin = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                format(FINALPOINTS.REG_CC_ADMIN, payload.ccaId),\n                payload\n            );\n\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    fetchClinicsData = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                FINALPOINTS.FETCH_CLINICS\n            );\n\n            const clinics = data;\n\n            return { clinics };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n}\n\nexport default new CCAdminService();","import HttpClient from './HttpBaseClient';\nimport { format } from 'util';\n\nconst FINALPOINTS = {\n    FETCH_NURSE_DATA: '/nurse/%s',\n    FETCH_RECEPIES: '/prescription/all/%s',\n    REWRITE_PRESCRIPTION: '/prescription/rewrite/%s/%s'\n};\n\nclass NurseService extends HttpClient {\n    fetchNurseData = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_NURSE_DATA, payload.id)\n            );\n\n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    }\n\n    fetchPrescriptions = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_RECEPIES, payload.clinicId)\n            );\n            \n            const prescriptions = data;\n            return { prescriptions };\n        } catch (error) {\n            return error.response;\n        }\n    }\n\n    reweritePrescription = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                format(FINALPOINTS.REWRITE_PRESCRIPTION, payload.nurseId, payload.prescriptionId)\n            );\n\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    }\n\n}\n\nexport default new NurseService();","import HttpClient from './HttpBaseClient';\nimport { history } from '../index';\nimport { format } from 'util';\n\nconst FINALPOINTS = {\n    FETCH_ADMINC_DATA: '/adm-cli/%s',\n    EDIT_USER_INFORMATION: '/user/edit-user-profile'\n};\n\n\nclass CAdminService extends HttpClient{\n\n    \n    fetchCAdminData = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_ADMINC_DATA, payload.id)\n            );\n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n    editUserInformation = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.EDIT_USER_INFORMATION, \n                payload\n            );\n            const response = data;\n            return { response };\n        } catch (error) {\n            console.log(error.response.data);\n            const response = error.response;\n            return {response};\n        }\n    };\n\n\n\n\n    \n\n   /* fetchDoctorData = async payload => {//eslint-disable-next-line\n\n        try {\n            const { data } = await this.getApiClient().get(\n                FINALPOINTS.FETCH_DOCTOR_DATA\n            );\n            const doctor = data;\n            return { doctor };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };*/\n\n    \n    \n\n    /*deleteDoctorsData = async payload => {\n        try {\n            const { data } = await this.getApiClient().delete(\n                FINALPOINTS.DELETE_DOCTORS_DATA\n            );\n\n            const doctors = data;\n            return { doctors };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };*/\n}\n\nexport default new CAdminService();","import HttpClient from './HttpBaseClient';\nimport { history } from '../index';\nimport { format } from 'util';\n\nconst FINALPOINTS = {\n    FETCH_PATIENT_DATA: '/pat/%s',\n    FETCH_DOCTORS_DATA_PATIENT: '/pat/doctors',\n    //FETCH_CLINICS_DATA_PATIENT: '/pat/clinics',\n    //SEARCH_DOCTORS_DATA_PATIENT: '/pat/search-doctors',\n    //SEARCH_CLINICS_DATA_PATIENT: '/pat/search-clinics',\n    FETCH_PATIENTS: '/pat/all',\n    FETCH_PATIENTS_BY_CLINIC_ID: '/pat/all/%s',\n    FETCH_PATIENT_BY_APP: 'pat/app/%s',\n    FETCH_PATIENTS_PAGINATION: 'pat/all/search'\n};\n\nclass PatientService extends HttpClient {\n\n    fetchPatientsByClinicId = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_PATIENTS_BY_CLINIC_ID, payload.clinicId)\n            );\n\n            const patients = data;\n            return { patients };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n    fetchDoctorsDataPatient = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                FINALPOINTS.FETCH_DOCTORS_DATA_PATIENT\n            );\n\n            const doctors = data;\n\n            return { doctors };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n    /*fetchClinicsDataPatient = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                FINALPOINTS.FETCH_CLINICS_DATA_PATIENT\n            );\n\n            const clinics = data;\n\n            return { clinics };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };*/\n\n    fetchPatientData = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_PATIENT_DATA, payload.patientId)\n            );\n\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    /*searchClinicsDataPatient = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                FINALPOINTS.SEARCH_CLINICS_DATA_PATIENT\n            );\n\n            const clinics = data;\n            return { clinics };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };*/\n\n    /*searchDoctorsDataPatient = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                FINALPOINTS.SEARCH_DOCTORS_DATA_PATIENT\n            );\n\n            const doctors = data;\n            return { doctors };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };*/\n\n    fetchPatientByApp = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_PATIENT_BY_APP, payload.typeId)\n            );\n\n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n    fetchPatinentsPagination = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.FETCH_PATIENTS_PAGINATION,\n                payload\n            );\n            const patients = data;\n            return { patients };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n}\n\nexport default new PatientService();\n","import HttpClient from './HttpBaseClient';\nimport { format } from 'util';\n\nconst FINALPOINTS = {\n    FETCH_DOCTOR_DATA: '/doctor/%s',\n    ADD_DOCTOR: '/doctor/add-doctor-on-clinic/%s',\n    FETCH_DOCTORS_DATA: '/doctor/doctors',\n    FETCH_DOCTORS_BY_CLINICID: '/doctor/all/%s',\n    DELETE_DOCTOR: '/doctor/delete/%s',\n    SEARCH_DOCTORS: '/doctor/search-doctors'\n};\n\nclass DoctorService extends HttpClient {\n\n    fetchDoctorsByClinicId = async payload => {\n        try {\n            console.log(payload);\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_DOCTORS_BY_CLINICID, payload.clinicId)\n            );\n            const doctors = data;\n            return { doctors };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n    fetchDoctorData = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_DOCTOR_DATA, payload.id)\n            );\n\n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n\n    fetchDoctorsData = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                FINALPOINTS.FETCH_DOCTORS_DATA\n            );\n\n            const doctors = data;\n\n            return { doctors };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n    addDoctor = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                format(FINALPOINTS.ADD_DOCTOR, payload.clinicId),\n                payload\n            );\n            const response = data;\n            return { response };\n        } catch (error) {\n            const response = error.response;\n            return {response};\n        }\n    };\n\n    //search bez paginije\n    searchDoctors = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.SEARCH_DOCTORS,\n                payload\n            );\n            console.log(\"DATA u service\");\n            console.log(data);\n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n    searchDoctor = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.SEARCH_DOCTOR,\n                payload\n            );\n\n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n    deleteDoctor = async payload => {\n        try {\n            console.log(\"U service\")\n           console.log(payload);\n            const { data } = await this.getApiClient().post(\n                format(FINALPOINTS.DELETE_DOCTOR, payload.id),\n                payload\n            );\n            console.log(\"ISPIS DATA\");\n            console.log(data);\n\n            const response = data;\n            return { response };\n        } catch (error) {\n            const response = error.response;\n            return {response};\n        }\n    };\n\n}\n\nexport default new DoctorService();","import { take, put, call, select } from 'redux-saga/effects';\nimport { history } from '../../index';\nimport {userDataSelector} from '../../store/user/selectors';\n\nimport {\n    LOGIN,\n    REGISTRATION,\n    CHANGE_PASSWORD,\n    SIGN_OUT,\n    FETCH_CCADMIN_DATA,\n    REG_CC_ADMIN,\n    FETCH_NURSE_DATA,\n    FETCH_CADMIN_DATA,\n    FETCH_PATIENT_DATA,\n    FETCH_DOCTOR_DATA,\n    EDIT_USER_INFORMATION\n} from './constants';\n\nimport authService from '../../services/AuthSecurity';\nimport CCAdminService from '../../services/CCAdminService';\nimport NurseService from '../../services/NurseService';\nimport CAdminService from '../../services/CAdminService';\nimport PatientService from '../../services/PatientService';\nimport DoctorService from '../../services/DoctorService';\n\n\nimport {\n    putUserData,\n    putUserToken,\n    putIsFetchUserData,\n    putUserId\n} from './actions';\n\nimport {\n    putSuccessMsg,\n    putErrorMsg\n} from '../common/actions';\n\n//patient sagas\nexport function* fetchPatientData() {\n    const { payload } = yield take(FETCH_PATIENT_DATA);\n    yield put(putIsFetchUserData(false));\n    const { data } = yield call(PatientService.fetchPatientData, payload);\n    yield put(putUserData(data));\n    yield put(putIsFetchUserData(true));\n\n}\n\n//cadmin sagas\nexport function* fetchCAdminData() {\n    const { payload } = yield take(FETCH_CADMIN_DATA);\n    yield put(putIsFetchUserData(false));\n    const { data } = yield call(CAdminService.fetchCAdminData, payload);\n    yield put(putUserData(data));\n    yield put(putIsFetchUserData(true));\n}\n//doctor sagas\nexport function* fetchDoctorData() {\n    const { payload } = yield take(FETCH_DOCTOR_DATA);\n    yield put(putIsFetchUserData(false));\n    const { data } = yield call(DoctorService.fetchDoctorData, payload);\n    yield put(putUserData(data));\n    yield put(putIsFetchUserData(true));\n}\n\n//nurse sagas\nexport function* fetchNurseData() {\n    const { payload } = yield take(FETCH_NURSE_DATA);\n    yield put(putIsFetchUserData(false));\n    const { data } = yield call(NurseService.fetchNurseData, payload);\n    yield put(putUserData(data));\n    yield put(putIsFetchUserData(true));\n}\n\n//clinic center admin sagas\nexport function* fetchCCAdminData() {\n    const { payload } = yield take(FETCH_CCADMIN_DATA);\n    yield put(putIsFetchUserData(false));\n    const { data } = yield call(CCAdminService.fetchCCAdminData, payload);\n    yield put(putUserData(data));\n    yield put(putIsFetchUserData(true));\n}\n\n\nexport function* regCCAdmin() {\n    const { payload } = yield take(REG_CC_ADMIN);\n    const { data } = yield call(CCAdminService.regCCAdmin, payload);\n    if (data === 'Successfully added new clinic center administrator') {\n        yield put(putSuccessMsg(data));\n        yield put(putSuccessMsg(null));\n    } else {\n        yield put(putErrorMsg(data));\n        yield put(putErrorMsg(null));\n    }\n}\n\n//user sagas\nexport function* signOut() {\n    const { payload } = yield take(SIGN_OUT);\n    localStorage.clear();\n    yield put(putUserData(payload));\n    yield put(putUserId(null));\n    yield put(putUserToken(null));\n    history.push('/');\n}\n\nexport function* registration() {\n    const { payload } = yield take(REGISTRATION);\n    yield call(authService.registration, payload);\n    alert('Successfuly submited!');\n}\n\nexport function* login() {\n    const { payload } = yield take(LOGIN);\n    const { data } = yield call(authService.login, payload);\n    yield put(putUserData(data));\n    yield put(putUserId(data.id));\n    yield put(putUserToken(data.token));\n    if (data.roles.includes('ROLE_PATIENT')) {\n        history.push('/pat');\n    } else if (data.roles.includes('ROLE_CCADMIN')) {\n        if (data.firstLogin) {\n            history.push('/change-pass');\n        } else {\n            history.push('/ccadmin');\n        }\n\n    } else if (data.roles.includes('ROLE_DOCTOR')) {\n        history.push('/doc');\n    } else if (data.roles.includes('ROLE_NURSE')) {\n        history.push('/nurse-page');\n    } else if (data.roles.includes('ROLE_ADMINC')) {\n        history.push('/adminc');\n    } else {\n        alert('Nije odobren pristup sistemu!');\n        history.push('/');\n    }\n}\n\nexport function* changePassword() {\n    const { payload } = yield take(CHANGE_PASSWORD);\n    const { data } = yield call(authService.changePassword, payload);\n    if (data !== undefined) {\n        yield put(putSuccessMsg('Successfuly changed password'));\n        yield put(putSuccessMsg(null));\n    } else {\n        yield put(putErrorMsg(data));\n        yield put(putErrorMsg(null));\n    }\n    yield put(putUserData(data));\n    yield put(putUserToken(data.token));\n\n    if (data.roles.includes('ROLE_PATIENT')) {\n        history.push('/pat');\n    } else if (data.roles.includes('ROLE_CCADMIN')) {\n        history.push('/ccadmin');\n    } else if (data.roles.includes('ROLE_DOCTOR')) {\n        history.push('/doc');\n    } else if (data.roles.includes('ROLE_NURSE')) {\n        history.push('/nurse-page');\n    } else if (data.roles.includes('ROLE_ADMINC')) {\n        history.push('/adminc');\n    } else {\n        alert('Nije odobren pristup sistemu!');\n    }\n}\n\nexport function* editUserInformation() {\n    const { payload } = yield take(EDIT_USER_INFORMATION);\n    const { response } = yield call(CAdminService.editUserInformation, payload);\n    if (response === 'Successfully edited users profile') {\n        yield put(putSuccessMsg(response));\n        yield put(putSuccessMsg(null));\n        const userData = yield select(userDataSelector);\n        if(userData.roles.includes(\"ROLE_DOCTOR\")){\n            yield put(putIsFetchUserData(false));\n            const { data } = yield call(DoctorService.fetchDoctorData, {id:payload.id});\n            yield put(putUserData(data));\n            yield put(putIsFetchUserData(true));\n        }else if(userData.roles.includes(\"ROLE_NURSE\")){\n            yield put(putIsFetchUserData(false));\n            const { data } = yield call(NurseService.fetchNurseData, {id:payload.id});\n            yield put(putUserData(data));\n            yield put(putIsFetchUserData(true));\n        }else if(userData.roles.includes(\"ROLE_ADMINC\")){\n            yield put(putIsFetchUserData(false));\n            const { data } = yield call(CAdminService.fetchCAdminData, {id:payload.id});\n            yield put(putUserData(data));\n            yield put(putIsFetchUserData(true));\n        }else if(userData.roles.includes(\"ROLE_PATIENT\")){\n            yield put(putIsFetchUserData(false));\n            const { data } = yield call(PatientService.fetchPatientData, {patientId:payload.id});\n            yield put(putUserData(data));\n            yield put(putIsFetchUserData(true));\n        }else{\n            yield put(putErrorMsg('Unknown user role'));\n            yield put(putErrorMsg(null));\n        }\n        \n    } else {\n        yield put(putErrorMsg(response));\n        yield put(putErrorMsg(null));\n    }\n}\n\n","import { take, put, call } from 'redux-saga/effects';\n\nimport {\n    FETCH_REG_REQS_DATA,\n    APPROVE_REG_REQ,\n    REJECT_REG_REQ,\n\n} from './constants';\n\nimport CCAdminService from '../../services/CCAdminService';\n\nimport {\n    putRegReqsData,\n    putIsFetchRegReqs,\n} from './actions';\n\nimport {\n    putPageCnt,\n    putSelPageCnt,\n    putSuccessMsg,\n    putErrorMsg\n} from '../common/actions';\n\nexport function* fetchRegReqsData() {\n    const { payload } = yield take(FETCH_REG_REQS_DATA);\n    yield put(putIsFetchRegReqs(false));\n    const { reqData } = yield call(CCAdminService.fetchRegReqsData, payload);\n    yield put(putSelPageCnt(payload.pageCnt));\n    yield put(putPageCnt(reqData.regReqsPageCnt));\n    yield put(putRegReqsData(reqData.reqs));\n    yield put(putIsFetchRegReqs(true));\n}\n\nexport function* approveRegReq() {\n    const { payload } = yield take(APPROVE_REG_REQ);\n    const { data } = yield call(CCAdminService.approveRegReq, payload);\n    if (data === 'Patient registration approved') {\n        yield put(putSuccessMsg(data));\n        yield put(putSuccessMsg(null));\n    } else {\n        yield put(putErrorMsg(data));\n        yield put(putErrorMsg(null));\n    }\n    yield put(putIsFetchRegReqs(false));\n    const { reqData } = yield call(CCAdminService.fetchRegReqsData, { pageCnt: 0 });\n    yield put(putSelPageCnt(0));\n    yield put(putPageCnt(reqData.regReqsPageCnt));\n    yield put(putRegReqsData(reqData.reqs));\n    yield put(putIsFetchRegReqs(true));\n}\n\nexport function* rejectRegReq() {\n    const { payload } = yield take(REJECT_REG_REQ);\n    const { data } = yield call(CCAdminService.rejectRegReq, payload);\n    if (data === 'Patient registration rejected') {\n        yield put(putSuccessMsg(data));\n        yield put(putSuccessMsg(null));\n    } else {\n        yield put(putErrorMsg(data));\n        yield put(putErrorMsg(null));\n    }\n    yield put(putIsFetchRegReqs(false));\n    const { reqData } = yield call(CCAdminService.fetchRegReqsData, { pageCnt: 0 });\n    yield put(putSelPageCnt(0));\n    yield put(putPageCnt(reqData.regReqsPageCnt));\n    yield put(putRegReqsData(reqData.reqs));\n    yield put(putIsFetchRegReqs(true));\n}","import { take, put, call } from 'redux-saga/effects';\nimport { history } from '../../index';\n\nimport {\n    FETCH_PATIENTS_DATA,\n    FETCH_PATIENTS_DATA_BY_CLINIC_ID,\n    FETCH_PATIENT_BY_APP,\n    FETCH_PATIENTS_PAGINATION\n} from './constants';\n\nimport PatientService from '../../services/PatientService';\n\nimport {\n    putPatientsData,\n    putIsFetchPatients,\n    putPatient\n} from './actions';\n\nimport {\n    putPageCnt,\n    putSelPageCnt,\n    putSuccessMsg,\n    putErrorMsg\n} from '../common/actions';\n\n\nexport function* fetchPatientsDataByClinicId() {\n    const { payload } = yield take(FETCH_PATIENTS_DATA_BY_CLINIC_ID);\n    yield put(putIsFetchPatients(false));\n    const { patients } = yield call(PatientService.fetchPatientsByClinicId, payload);\n    yield put(putPatientsData(patients));\n    yield put(putIsFetchPatients(true));\n}\n\nexport function* fetchPatinentsPagination() {\n    const { payload } = yield take(FETCH_PATIENTS_PAGINATION);\n    yield put(putIsFetchPatients(false));\n    const { patients } = yield call(PatientService.fetchPatinentsPagination, payload);\n    yield put(putSelPageCnt(payload.pageCnt));\n    yield put(putPageCnt(patients.patientPageCnt));\n    yield put(putPatientsData(patients.patients));\n    yield put(putIsFetchPatients(true));\n}\n\nexport function* fetchPatientByApp() {\n    const { payload } = yield take(FETCH_PATIENT_BY_APP);\n    yield put(putIsFetchPatients(false));\n    const { data } = yield call(PatientService.fetchPatientByApp, payload);\n    yield put(putPatient(data));\n    yield put(putIsFetchPatients(true));\n}","import HttpClient from './HttpBaseClient';\nimport { history } from '../index';\nimport { format } from 'util';\n\nconst FINALPOINTS = {\n    ABS_HOL_REQUEST: '/absence-hol/req',\n    FETCH_ABS_HOL_REQUEST: '/absence-hol/my-abs-hol/%s',\n    FETCH_CALENDAR: '/personnel/my-cal/%s'\n};\n\nclass PersonnelService extends HttpClient {\n    absHolRequest = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.ABS_HOL_REQUEST,\n                payload\n            );\n\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    }\n\n    fetchAbsHolRequests = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_ABS_HOL_REQUEST, payload.personnelId)\n            );\n\n            const absholrequests = data;\n            return { absholrequests };\n        } catch (error) {\n            return error.response;\n        }\n    }\n\n    fetchCalendar = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_CALENDAR, payload.personnelId)\n            );\n\n            let calendar = {\n                id: data.id,\n                calendarItemResponses: []\n            };\n\n            data.calendarItemResponses.forEach(element => calendar.calendarItemResponses.push({\n                id: element.id,\n                title: element.title,\n                start: new Date(element.start),\n                end: new Date(element.end),\n                type: element.type,\n                typeId: element.typeId,\n                allday: element.allday\n            }));\n\n            return { calendar };\n        } catch (error) {\n            return error.response;\n        }\n    }\n\n}\n\nexport default new PersonnelService();\n","import { take, put, call } from 'redux-saga/effects';\n\nimport {\n    FETCH_CALENDAR,\n} from './constants';\n\nimport PersonnelService from '../../services/PersonnelService';\n\nimport {\n    putCalendarData,\n    putIsFetchCalendar\n} from './actions';\n\nexport function* fetchCalendar() {\n    const { payload } = yield take(FETCH_CALENDAR);\n    yield put(putIsFetchCalendar(false));\n    const { calendar } = yield call(PersonnelService.fetchCalendar, payload);\n    yield put(putCalendarData(calendar));\n    yield put(putIsFetchCalendar(true));\n}","import { take, put, call } from 'redux-saga/effects';\n\nimport {\n    ABS_HOL_REQUEST,\n    FETCH_ABS_HOL_REQUESTS\n} from './constants';\n\nimport PersonnelService from '../../services/PersonnelService';\n\nimport {\n    putAbsHolRequest,\n    putIsFetchAbsHolRequests\n} from './actions';\n\nimport {\n    putSuccessMsg,\n    putErrorMsg,\n    putWarnMsg\n} from '../common/actions';\n\nexport function* fetchAbsHolRequest() {\n    const { payload } = yield take(FETCH_ABS_HOL_REQUESTS);\n    yield put(putIsFetchAbsHolRequests(false));\n    const { absholrequests } = yield call(PersonnelService.fetchAbsHolRequests, payload);\n    yield put(putAbsHolRequest(absholrequests));\n    yield put(putIsFetchAbsHolRequests(true));\n}\n\nexport function* absHolRequest() {\n    const { payload } = yield take(ABS_HOL_REQUEST);\n    const { data } = yield call(PersonnelService.absHolRequest, payload);\n    if (data !== undefined) {\n        if (data === 'Successfully created absence requirement') {\n            yield put(putSuccessMsg(data));\n            yield put(putSuccessMsg(null));\n            yield put(putIsFetchAbsHolRequests(false));\n            const { absholrequests } = yield call(PersonnelService.fetchAbsHolRequests, payload);\n            yield put(putAbsHolRequest(absholrequests));\n            yield put(putIsFetchAbsHolRequests(true));\n        } else {\n            yield put(putWarnMsg(data));\n            yield put(putWarnMsg(null));\n        }\n    } else {\n        yield put(putErrorMsg(data));\n        yield put(putErrorMsg(null));\n    }\n}","import { take, put, call } from 'redux-saga/effects';\n\nimport {\n    FETCH_PRESCRIPTIONS,\n    REWRITE_PRESCRIPTION\n} from './constants';\n\nimport NurseService from '../../services/NurseService';\n\nimport {\n    putIsFetchPrescriptions,\n    putPrescriptionsData\n} from './actions';\n\nimport {\n    putSuccessMsg,\n    putErrorMsg\n} from '../common/actions';\n\n\nexport function* rewritePrescription() {\n    const { payload } = yield take(REWRITE_PRESCRIPTION);\n    const { data } = yield call(NurseService.reweritePrescription, { nurseId: payload.nurseId, prescriptionId: payload.prescriptionId });\n    if (data === 'Successfully rewrited prescription') {\n        yield put(putSuccessMsg(data));\n        yield put(putSuccessMsg(null));\n    } else {\n        yield put(putErrorMsg(data));\n        yield put(putErrorMsg(null));\n    }\n    put(putIsFetchPrescriptions(false));\n    const { prescriptions } = yield call(NurseService.fetchPrescriptions, { clinicId: payload.clinicId });\n    yield put(putPrescriptionsData(prescriptions));\n    put(putIsFetchPrescriptions(true));\n\n}\n\nexport function* fetchPrescriptions() {\n    const { payload } = yield take(FETCH_PRESCRIPTIONS);\n    put(putIsFetchPrescriptions(false));\n    const { prescriptions } = yield call(NurseService.fetchPrescriptions, payload);\n    yield put(putPrescriptionsData(prescriptions));\n    put(putIsFetchPrescriptions(true));\n}\n\n","import HttpClient from './HttpBaseClient';\nimport { format } from 'util';\n\nconst FINALPOINTS = {\n    FETCH_MEDICINE_DATA: '/medicine/all/%s',\n    FETCH_DIAGNOSE_DATA: '/diagnose/all/%s',\n    FETCH_MEDICINE_ALL: '/medicine/all',\n    FETCH_DIAGNOSE_ALL: '/diagnose/all',\n    ADD_MEDICINE: '/medicine/add',\n    ADD_DIAGNOSE: '/diagnose/add',\n};\n\nclass MedDiagService extends HttpClient {\n\n    fetchMedicineData = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_MEDICINE_DATA, payload.pageCnt)\n            );\n            const medicines = data;\n            return { medicines };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    fetchDiagnoseData = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_DIAGNOSE_DATA, payload.pageCnt)\n            );\n            const diagnoses = data;\n            return { diagnoses };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    fetchMedicineAll = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                FINALPOINTS.FETCH_MEDICINE_ALL\n            );\n            const medicines = data;\n            return { medicines };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    fetchDiagnoseAll = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                FINALPOINTS.FETCH_DIAGNOSE_ALL\n            );\n            const diagnoses = data;\n            return { diagnoses };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    addMedicine = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.ADD_MEDICINE,\n                payload\n            );\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    addDiagnose = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.ADD_DIAGNOSE,\n                payload\n            );\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n}\n\nexport default new MedDiagService();","import { take, put, call } from 'redux-saga/effects';\n\nimport {\n    FETCH_MEDICINE_DATA,\n    FETCH_DIAGNOSE_DATA,\n    ADD_MEDICINE,\n    ADD_DIAGNOSE,\n    FETCH_MEDICINES_ALL,\n    FETCH_DIAGNOSES_ALL\n} from './constants';\n\nimport MedDiagService from '../../services/MedDiagService';\n\nimport {\n    putDiagnoseData,\n    putIsFetchDiagnose,\n    putMedicineData,\n    putIsFetchMedicine\n} from './actions';\n\nimport {\n    putPageCnt,\n    putSelPageCnt,\n    putSuccessMsg,\n    putErrorMsg\n} from '../common/actions';\n\nexport function* fetchMedicinesAll() {\n    const { payload } = yield take(FETCH_MEDICINES_ALL);\n    yield put(putIsFetchMedicine(false));\n    const { medicines } = yield call(MedDiagService.fetchMedicineAll, payload);\n    yield put(putMedicineData(medicines));\n    yield put(putIsFetchMedicine(true));\n}\n\nexport function* fetchDiagnosesAll() {\n    const { payload } = yield take(FETCH_DIAGNOSES_ALL);\n    yield put(putIsFetchDiagnose(false));\n    const { diagnoses } = yield call(MedDiagService.fetchDiagnoseAll, payload);\n    yield put(putDiagnoseData(diagnoses));\n    yield put(putIsFetchDiagnose(true));\n}\n\nexport function* fetchMedicineData() {\n    const { payload } = yield take(FETCH_MEDICINE_DATA);\n    yield put(putIsFetchMedicine(false));\n    const { medicines } = yield call(MedDiagService.fetchMedicineData, payload);\n    yield put(putMedicineData(medicines.medicines));\n    yield put(putSelPageCnt(payload.pageCnt));\n    yield put(putPageCnt(medicines.medicinePageCnt));\n    yield put(putIsFetchMedicine(true));\n}\n\nexport function* fetchDiagnoseData() {\n    const { payload } = yield take(FETCH_DIAGNOSE_DATA);\n    yield put(putIsFetchDiagnose(false));\n    const { diagnoses } = yield call(MedDiagService.fetchDiagnoseData, payload);\n    yield put(putDiagnoseData(diagnoses.diagnoses));\n    yield put(putSelPageCnt(payload.pageCnt));\n    yield put(putPageCnt(diagnoses.diagnosePageCnt));\n    yield put(putIsFetchDiagnose(true));\n}\n\nexport function* addMedicine() {\n    const { payload } = yield take(ADD_MEDICINE);\n    const { data } = yield call(MedDiagService.addMedicine, payload);\n    if (data === 'Medicine successfuly added') {\n        yield put(putSuccessMsg(data));\n        yield put(putSuccessMsg(null));\n        yield put(putIsFetchMedicine(false));\n        const { medicines } = yield call(MedDiagService.fetchMedicineData, { pageCnt: 0 });\n        yield put(putMedicineData(medicines.medicines));\n        yield put(putSelPageCnt(0));\n        yield put(putPageCnt(medicines.medicinePageCnt));\n        yield put(putIsFetchMedicine(true));\n    } else {\n        yield put(putErrorMsg(data));\n        yield put(putErrorMsg(null));\n    }\n}\n\nexport function* addDiagnose() {\n    const { payload } = yield take(ADD_DIAGNOSE);\n    const { data } = yield call(MedDiagService.addDiagnose, payload);\n    if (data === 'Diagnose successfuly added') {\n        yield put(putSuccessMsg(data));\n        yield put(putSuccessMsg(null));\n        yield put(putIsFetchDiagnose(false));\n        const { diagnoses } = yield call(MedDiagService.fetchDiagnoseData, { pageCnt: 0 });\n        yield put(putDiagnoseData(diagnoses.diagnoses));\n        yield put(putSelPageCnt(0));\n        yield put(putPageCnt(diagnoses.diagnosePageCnt));\n        yield put(putIsFetchDiagnose(true));\n    } else {\n        yield put(putErrorMsg(data));\n        yield put(putErrorMsg(null));\n    }\n}","import HttpClient from './HttpBaseClient';\nimport { history } from '../index';\nimport { format } from 'util';\n\nconst FINALPOINTS = {\n    FETCH_CLINICS_DATA: '/clinic/%s',\n    REG_CLINIC: '/clinic/reg-clinic',\n    FETCH_CLINICS: '/clinic/clinics',\n    REG_CLINIC_ADMIN: '/adm-cli/reg-clinic-admin',\n    FETCH_CLINIC_PAGINATION_DATA: '/clinic/all/%s',\n    SEARCH_CLINIC: 'clinic/all/search-clinics',\n};\n\nclass ClinicService extends HttpClient {\n\n    fetchClinicsData = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                FINALPOINTS.FETCH_CLINICS\n            );\n            const clinics = data;\n            return { clinics };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n\n    regClinic = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.REG_CLINIC,\n                payload\n            );\n\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    regClinicAdmin = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.REG_CLINIC_ADMIN,\n                payload\n            );\n\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    searchClinic = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.SEARCH_CLINIC,\n                payload\n            );\n\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n    \n    fetchClinicPaginationData = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_CLINIC_PAGINATION_DATA, payload.pageCnt)\n            );\n            \n            const clinicPag = data;\n            return { clinicPag };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    /*fetchClinicByApp = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_CLINIC_BY_APP, payload.typeId)\n            );\n\n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };*/\n\n\n}\n\nexport default new ClinicService();","import { take, put, call } from 'redux-saga/effects';\nimport { history } from '../../index';\n\nimport {\n    REG_CLINIC,\n    FETCH_CLINICS_DATA,\n    REG_CLINIC_ADMIN,\n    FETCH_CLINIC_PAGINATION_DATA,\n    SEARCH_CLINIC\n} from './constants';\n\nimport ClinicService from '../../services/ClinicService';\n\nimport {\n    putClinicsData,\n    putIsFetchClinicsData,\n    putPageCount\n} from './actions';\n\nimport {\n    putPageCnt,\n    putSelPageCnt,\n    putSuccessMsg,\n    putErrorMsg\n} from '../common/actions';\n\n\nexport function* regClinicAdmin() {\n    const { payload } = yield take(REG_CLINIC_ADMIN);\n    const { data } = yield call(ClinicService.regClinicAdmin, payload);\n    if (data === 'Clinic admin successfully registered') {\n        yield put(putSuccessMsg(data));\n        yield put(putSuccessMsg(null));\n    } else {\n        yield put(putErrorMsg(data));\n        yield put(putErrorMsg(null));\n    }\n}\n\nexport function* fetchClinicsData() {\n    const { payload } = yield take(FETCH_CLINICS_DATA);\n    yield put(putIsFetchClinicsData(false));\n    const { clinics } = yield call(ClinicService.fetchClinicsData, payload);\n    yield put(putClinicsData(clinics));\n    yield put(putIsFetchClinicsData(true));\n}\n\nexport function* fetchClinicPaginationData() {\n    const { payload } = yield take(FETCH_CLINIC_PAGINATION_DATA);\n    yield put(putIsFetchClinicsData(false));\n    const { clinicPag } = yield call(ClinicService.fetchClinicPaginationData, payload);\n    yield put(putSelPageCnt(payload.pageCnt));\n    yield put(putPageCnt(clinicPag.pageCnt));\n    yield put(putClinicsData(clinicPag.clinics));\n    yield put(putIsFetchClinicsData(true));\n}\n\nexport function* regClinic() {\n    const { payload } = yield take(REG_CLINIC);\n    const { data } = yield call(ClinicService.regClinic, payload);\n    if (data === 'Clinic successfuly added') {\n        yield put(putSuccessMsg(data));\n        yield put(putSuccessMsg(null));\n        yield put(putIsFetchClinicsData(false));\n        const { clinicPag } = yield call(ClinicService.fetchClinicPaginationData, { pageCnt: 0 });\n        yield put(putSelPageCnt(0));\n        yield put(putPageCnt(clinicPag.pageCnt));\n        yield put(putClinicsData(clinicPag.clinics))\n        yield put(putIsFetchClinicsData(true));\n    } else {\n        yield put(putErrorMsg(data));\n        yield put(putErrorMsg(null));\n    }\n}\n\nexport function* searchClinic() {\n    const { payload } = yield take(SEARCH_CLINIC);\n    yield put(putIsFetchClinicsData(false));\n    const { data } = yield call(ClinicService.searchClinic, payload);\n    yield put(putClinicsData(data.clinics));\n    yield put(putPageCount(data.pageCount));\n    yield put(putIsFetchClinicsData(true)); \n}\n","import HttpClient from './HttpBaseClient';\nimport { history } from '../index';\nimport { format } from 'util';\n\nconst FINALPOINTS = {\n    FETCH_APPOINTMENT_TYPES: '/appointment-type/all/%s',\n    ADD_APPOINTMENT_TYPE: '/appointment-type/add-appointment-type/%s',\n    DELETE_APPOINTMENTS_TYPE: '/appointment-type/delete-appointment-type/%s',\n    EDIT_APPOINTMENT_TYPE: '/appointment-type/edit-appointment-type',\n    SEARCH_APPOINTMENT_TYPE: 'appointment-type/search-appointment-type',\n    FETCH_APPOINTMENT: '/appointment/%s',\n    //SEARCH_APPOINTMENT_TYPE: 'admi-cli/appType/search/%s/%s',\n    // DELETE_ROOMS_DATA: 'admi-cli/appType/delete/%s',\n    //EDIT_APPOINTMENT_TYPE: 'admi-cli/appType/edit/%s',\n    //ADD_APPOINTMENT_TYPE: 'adm-cli/add-appointment-type'\n};\n\nclass AppointmentTypeService extends HttpClient {\n    fetchAppointmentType = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_APPOINTMENT_TYPES, payload.clinicId)\n            );\n\n            const appointmentTypes = data;\n\n            return { appointmentTypes };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n    addAppointmentType = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                format(FINALPOINTS.ADD_APPOINTMENT_TYPE, payload.clinicId),\n                { type: payload.type }\n\n            );\n            return { data };\n\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n    deleteAppointmentType = async payload => {\n        try {\n           \n            const { data } = await this.getApiClient().post(\n                format(FINALPOINTS.DELETE_APPOINTMENTS_TYPE, payload.id),\n                {id:payload.id}\n            );\n            \n\n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n    editAppointmentType = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.EDIT_APPOINTMENT_TYPE, \n                {type:payload.type, id:payload.clinicId}\n            );\n\n            const appointmentType = data;\n\n            return { appointmentType };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n    fetchAppointment = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_APPOINTMENT, payload.id)\n            );\n\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n    \n    \n    searchAppointmentType = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.SEARCH_APPOINTMENT_TYPE,\n                payload\n            );\n\n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n}\nexport default new AppointmentTypeService();","import { take, put, call } from 'redux-saga/effects';\n\nimport {\n    FETCH_APPOINTMENT_TYPE,\n    ADD_APPOINTMENT_TYPE,\n    DELETE_APPOINTMENT_TYPE,\n    EDIT_APPOINTMENT_TYPE,\n    SEARCH_APPOINTMENT_TYPE,\n    FETCH_APPOINTMENT\n} from './constants';\n\nimport AppointmentTypeService from '../../services/AppointmentTypeService';\n\nimport {\n    putAppointmentTypes,\n    putIsFetchAppointmentTypes,\n    putAppointment,\n    putIsFetchAppointment\n} from './actions';\n\nexport function* fetchAppointment() {\n    const { payload } = yield take(FETCH_APPOINTMENT);\n    yield put(putIsFetchAppointment(false));\n    const { data } = yield call(AppointmentTypeService.fetchAppointment, payload);\n    yield put(putAppointment(data));\n    yield put(putIsFetchAppointment(true));\n}\n\nexport function* fetchAppointmentType() {\n    const { payload } = yield take(FETCH_APPOINTMENT_TYPE);\n    yield put(putIsFetchAppointmentTypes(false));\n    const { appointmentTypes } = yield call(AppointmentTypeService.fetchAppointmentType, payload);\n    yield put(putAppointmentTypes(appointmentTypes));\n    yield put(putIsFetchAppointmentTypes(true));\n}\nexport function* addAppointmentType() {\n    const { payload } = yield take(ADD_APPOINTMENT_TYPE);\n    const { data } = yield call(AppointmentTypeService.addAppointmentType, payload);\n    yield put(putIsFetchAppointmentTypes(false));\n    const { appointmentTypes } = yield call(AppointmentTypeService.fetchAppointmentType, {clinicId:payload.clinicId});\n    yield put(putAppointmentTypes(appointmentTypes));\n    yield put(putIsFetchAppointmentTypes(true));\n}\n\nexport function* deleteAppointmentType() {\n    const { payload } = yield take(DELETE_APPOINTMENT_TYPE);\n    const { data } = yield call(AppointmentTypeService.deleteAppointmentType, {id:payload.id});\n    yield put(putIsFetchAppointmentTypes(false));\n    const { appointmentTypes } = yield call(AppointmentTypeService.fetchAppointmentType, {clinicId:payload.clinicId});\n    yield put(putAppointmentTypes(appointmentTypes));\n    yield put(putIsFetchAppointmentTypes(true));\n}\n\nexport function* editAppointmentType() {\n    const { payload } = yield take(EDIT_APPOINTMENT_TYPE);\n    yield call(AppointmentTypeService.editAppointmentType, payload);\n    yield put(putIsFetchAppointmentTypes(false));\n    const { appointmentTypes } = yield call(AppointmentTypeService.fetchAppointmentType, {clinicId:payload.clinicId});\n    yield put(putAppointmentTypes(appointmentTypes));\n    yield put(putIsFetchAppointmentTypes(true));\n}\n\nexport function* searchAppointmentType() {\n        const { payload } = yield take(SEARCH_APPOINTMENT_TYPE);\n        yield put(putIsFetchAppointmentTypes(false));\n        const { data } = yield call(AppointmentTypeService.searchAppointmentType,payload);\n        yield put(putAppointmentTypes(data));\n        yield put(putIsFetchAppointmentTypes(true));\n}\n\n","import { take, put, call } from 'redux-saga/effects';\n\nimport {\n    ADD_DOCTOR,\n    FETCH_DOCTORS_DATA,\n    FETCH_DOCTORS_DATA_ON_CLINIC,\n    SEARCH_DOCTOR,\n    SEARCH_DOCTORS,\n    FETCH_DOCTORS_BY_CLINICID,\n    DELETE_DOCTOR\n} from './constants';\n\nimport DoctorService from '../../services/DoctorService';\n\nimport {\n    putIsFetchDoctors,\n    putDoctorsData,\n    putPageCount\n} from './actions';\n\nimport {\n    putSuccessMsg,\n    putErrorMsg\n} from '../common/actions';\n\nexport function* fetchDoctorsData() {\n    const { payload } = yield take(FETCH_DOCTORS_DATA);\n    yield put(putIsFetchDoctors(false));\n    const { doctors } = yield call(DoctorService.fetchDoctorsByClinicId,payload);\n    yield put(putDoctorsData(doctors));\n    yield put(putIsFetchDoctors(true));\n}\n\nexport function* fetchDoctorsByClinicId() {\n    //eslint-disable-next-line\n    const { payload } = yield take(FETCH_DOCTORS_BY_CLINICID);\n    yield put(putIsFetchDoctors(false));\n    const { doctors } = yield call(DoctorService.fetchDoctorsByClinicId, payload);\n    yield put(putDoctorsData(doctors));\n    yield put(putIsFetchDoctors(true));\n}\n\nexport function* addDoctor() {\n    const { payload } = yield take(ADD_DOCTOR);\n    const {response} = yield call(DoctorService.addDoctor, payload);\n    if(response==='Successfully added doctor on clinic'){\n        yield put(putSuccessMsg(response));\n        yield put(putSuccessMsg(null));\n        yield put(putIsFetchDoctors(false));\n        const { doctors } = yield call(DoctorService.fetchDoctorsByClinicId, {clinicId:payload.clinicId});\n        yield put(putDoctorsData(doctors));\n        yield put(putIsFetchDoctors(true));\n    } else {\n        yield put(putErrorMsg(response));\n        yield put(putErrorMsg(null));\n    }\n}\n\nexport function* deleteDoctor() {\n    const { payload } = yield take(DELETE_DOCTOR);\n    const { response } = yield call(DoctorService.deleteDoctor, payload);\n    if(response === 'Successfully deleted doctor'){\n        yield put(putSuccessMsg(response));\n        yield put(putSuccessMsg(null));\n        yield put(putIsFetchDoctors(false));\n        const { doctors } = yield call(DoctorService.fetchDoctorsByClinicId, {clinicId:payload.clinicId});\n        yield put(putDoctorsData(doctors));\n        yield put(putIsFetchDoctors(true));\n    }else {\n        yield put(putErrorMsg(response));\n        yield put(putErrorMsg(null));\n    }\n}\n\n\nexport function* searchDoctor() {\n    const { payload } = yield take(SEARCH_DOCTOR);\n    yield put(putIsFetchDoctors(false));\n    const { data } = yield call(DoctorService.searchDoctor, payload);\n    yield put(putDoctorsData(data.doctors));\n    yield put(putPageCount(data.putPageCount));\n    yield put(putIsFetchDoctors(true));\n}\n\nexport function* searchDoctors() {\n    const { payload } = yield take(SEARCH_DOCTORS);\n    yield put(putIsFetchDoctors(false));\n    const { data } = yield call(DoctorService.searchDoctors,payload);\n    yield put(putDoctorsData(data));\n    yield put(putIsFetchDoctors(true));\n}\n","import HttpClient from './HttpBaseClient';\nimport { history } from '../index';\nimport { format } from 'util';\n\nconst FINALPOINTS = {\n    FETCH_ROOMS_DATA: '/room/all/%s/%s',\n    SEARCH_ROOMS_DATA: '/room/search',\n    DELETE_ROOMS_DATA: '/room/delete/%s',\n    SEARCH_ROOMS: '/room/search-rooms',\n    ADD_ROOM: '/room/add-room/%s',\n    EDIT_ROOM: '/room/edit-room',\n    DELETE_ROOM: '/room/delete-room/%s'\n\n};\n\nclass RoomService extends HttpClient {\n\n    fetchRoomsData = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_ROOMS_DATA, payload.clinicId, payload.pageCnt)\n            );\n\n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n    addRoomsDate = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.ADD_ROOMS_DATA,\n                payload\n            );\n\n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n    deleteRoomsData = async payload => {\n        try {\n            const { data } = await this.getApiClient().delete(\n                FINALPOINTS.DELETE_ROOMS_DATA,\n                payload\n            );\n\n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n    editRoomsData = async payload => {\n        try {\n            const { data } = await this.getApiClient().put(\n                FINALPOINTS.EDIT_ROOMS_DATA,\n                payload\n            );\n\n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n    searchRoomsData = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.SEARCH_ROOMS_DATA,\n                payload\n            );\n\n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n\n    searchRooms = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.SEARCH_ROOMS,\n                payload\n            );\n            return { data };\n        } catch (error) {\n            console.log(error.response.data);\n        }\n    };\n    \n    addRoom = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                format(FINALPOINTS.ADD_ROOM, payload.clinicId),\n                payload\n            );\n            const response = data;\n            return { response };\n        } catch (error) {\n            const response = error.response;\n            return {response};\n        }\n    };\n\n    editRoom = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.EDIT_ROOM,\n                payload\n            );\n            const response = data;\n            return { response };\n        } catch (error) {\n            const response = error.response.data;\n            return {response};\n        }\n    };\n\n    deleteRoom = async payload => {\n        try{\n            const {data} = await this.getApiClient().post(\n                format(FINALPOINTS.DELETE_ROOM, payload.id),\n                payload\n            )\n            const response = data;\n            return { response };\n        } catch (error) {\n            const response = error.response.data;\n            return {response};\n        }\n    }\n\n}\n\nexport default new RoomService();","import { take, put, call } from 'redux-saga/effects';\n\nimport {\n    FETCH_ROOMS_DATA,\n    SEARCH_ROOMS_DATA,\n    SEARCH_ROOMS,\n    ADD_ROOM,\n    EDIT_ROOM,\n    DELETE_ROOM\n} from './constants';\n\nimport RoomService from '../../services/RoomService';\n\nimport {\n    putRoomsData,\n    putIsFetchRooms,\n    putPageCount\n} from './actions';\n\n\nimport {\n    putSuccessMsg,\n    putErrorMsg\n} from '../common/actions';\n\n\nexport function* fetchRoomsData() {\n    const { payload } = yield take(FETCH_ROOMS_DATA);\n    yield put(putIsFetchRooms(false));\n    const { data } = yield call(RoomService.fetchRoomsData, payload);\n    yield put(putRoomsData(data.rooms));\n    yield put(putPageCount(data.pageCount));\n    yield put(putIsFetchRooms(true));\n}\n\nexport function* searchRoomsData(){\n    const { payload } = yield take (SEARCH_ROOMS_DATA);\n    yield put(putIsFetchRooms(false));\n    const { data } = yield call(RoomService.searchRoomsData, payload);\n    yield put(putRoomsData(data.rooms));\n    yield put(putPageCount(data.pageCount));\n    yield put(putIsFetchRooms(true));\n}\n\nexport function* searchRooms(){\n    const { payload } = yield take (SEARCH_ROOMS);\n    yield put(putIsFetchRooms(false));\n    const { data } = yield call(RoomService.searchRooms, payload);\n    yield put(putRoomsData(data));\n    yield put(putPageCount(data.pageCount));\n    yield put(putIsFetchRooms(true));\n}\n\nexport function* addRoom() {\n    const { payload } = yield take(ADD_ROOM);\n    const { response } = yield call(RoomService.addRoom, payload);\n    if (response === 'Successfully added room') {\n        yield put(putSuccessMsg(response));\n        yield put(putSuccessMsg(null));\n        yield put(putIsFetchRooms(false));\n        const { data } = yield call(RoomService.fetchRoomsData, payload);\n        yield put(putRoomsData(data.rooms));\n        yield put(putPageCount(data.pageCount));\n        yield put(putIsFetchRooms(true));\n    } else {\n        yield put(putErrorMsg(response));\n        yield put(putErrorMsg(null));\n    }\n    \n}\n\nexport function* editRoom() {\n    const { payload } = yield take(EDIT_ROOM);\n    const {response} = yield call(RoomService.editRoom, payload);\n    if (response === 'Successfully edited room') {\n        yield put(putSuccessMsg(response));\n        yield put(putSuccessMsg(null));\n        yield put(putIsFetchRooms(false));\n        const { data } = yield call(RoomService.fetchRoomsData, payload);\n        yield put(putRoomsData(data.rooms));\n        yield put(putPageCount(data.pageCount));\n        yield put(putIsFetchRooms(true));\n    } else {\n        yield put(putErrorMsg(response));\n        yield put(putErrorMsg(null));\n    }\n}\n\nexport function* deleteRoom() {\n    const { payload } = yield take(DELETE_ROOM);\n    const { response } = yield call(RoomService.deleteRoom, {id:payload.id});\n    if (response === 'Successfully deleted room') {\n        yield put(putSuccessMsg(response));\n        yield put(putSuccessMsg(null));\n        yield put(putIsFetchRooms(false));\n        const { data } = yield call(RoomService.fetchRoomsData, payload);\n        yield put(putRoomsData(data.rooms));\n        yield put(putPageCount(data.pageCount));\n        yield put(putIsFetchRooms(true));\n    } else {\n        yield put(putErrorMsg(response));\n        yield put(putErrorMsg(null));\n    }\n}\n\n\n/*export function* deleteRoomsData(){\n    const { payload } = yield take (DELETE_ROOMS_DATA);\n    const { data } = yield call(RoomService.deleteRoomsData, payload);\n    const { rooms } = yield call(RoomService.fetchRoomsData, {});\n    yield put(putRoomsData(rooms));\n}*/\n/*export function* addRoomsData(){\n    const { payload } = yield take (ADD_ROOMS_DATA);\n    const { data } = yield call(RoomService.addRoomsData, payload);\n    const { rooms } = yield call(RoomService.fetchRoomsData, {});\n    yield put(putRoomsData(rooms));\n}*/\n/*export function* editRoomsData(){\n    const { payload } = yield take (EDIT_ROOMS_DATA);\n    const { data } = yield call(RoomService.editRoomsData, payload);\n    const { rooms } = yield call(RoomService.fetchRoomsData, {});\n    yield put(putRoomsData(rooms));\n}*/\n\n","import HttpClient from './HttpBaseClient';\nimport { history } from '../index';\nimport { format } from 'util';\n\n\nconst FINALPOINTS = {\n    FETCH_SUR_REQ: '/sur-req/all/%s/%s',\n    FETCH_FINISH_RESERVATION: '/sur-req/reserve'\n};\n\nclass SurgeryRequirementService extends HttpClient {\n\n    fetchSurReqData = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_SUR_REQ, payload.clinicId, payload.pageCnt)\n            );\n\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    fetchFinishReservation = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.FETCH_FINISH_RESERVATION,\n                payload\n            );\n\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n\n}\n\nexport default new SurgeryRequirementService();","import { take, put, call } from 'redux-saga/effects';\nimport { history } from '../../index';\n\nimport {\n    FETCH_SUR_REQ_DATA,\n    FETCH_PICK_SUR_ROOM,\n    FETCH_PICK_DOC,\n    FETCH_FINISH_RESERVATION\n} from './constants';\n\nimport SurgeryRequirementService from '../../services/SurgeryRequirementService';\n\nimport {\n    putIsFetchSurReqData,\n    putSurReqData,\n    putSurReqPageCount,\n    putPickSurReq,\n    putPickedSurReq,\n    putPickTerm,\n    putPickedTerm,\n    putPickedRoom\n} from './actions';\n\nimport {\n    putSuccessMsg,\n    putWarnMsg\n} from '../common/actions';\n\nexport function* fetchFinishReservation() {\n    const { payload } = yield take(FETCH_FINISH_RESERVATION);\n    const { data } = yield call(SurgeryRequirementService.fetchFinishReservation, payload);\n    if (data === 'Room is reserved for surgery') {\n        yield put(putSuccessMsg(data));\n        yield put(putSuccessMsg(null));\n    } else {\n        yield put(putWarnMsg(data));\n        yield put(putWarnMsg(null));\n    }\n    yield put(putPickSurReq(false));\n    yield put(putPickedSurReq(null));\n    yield put(putPickTerm(false));\n    yield put(putPickedTerm(null));\n    yield put(putPickedRoom(null));\n    history.push('/adminc/sur-req/' + payload.pickedSurReq.clinicId);\n}\n\nexport function* fetchSurReqs() {\n    const { payload } = yield take(FETCH_SUR_REQ_DATA);\n    yield put(putIsFetchSurReqData(false));\n    const { data } = yield call(SurgeryRequirementService.fetchSurReqData, payload);\n    yield put(putSurReqData(data.surgeryRequirements));\n    yield put(putSurReqPageCount(data.pageCount));\n    yield put(putIsFetchSurReqData(true));\n}\n\nexport function* fetchPickSurRoom() {\n    const { payload } = yield take(FETCH_PICK_SUR_ROOM);\n    yield put(putPickedSurReq(payload.pickedSurReq));\n    yield put(putPickSurReq(true));\n    history.push('/adminc/room-search/SUR');\n}\n\nexport function* fetchPickDoc() {\n    const { payload } = yield take(FETCH_PICK_DOC);\n    yield put(putPickedRoom(payload.pickedRoom));\n    yield put(putPickedTerm(payload.pickedTerm));\n    yield put(putPickTerm(true));\n    history.push('/adminc/pick-doc');\n}","import HttpClient from './HttpBaseClient';\nimport { format } from 'util';\n\nconst FINALPOINTS = {\n    FETCH_MEDICAL_RECORD: '/med-rec/%s',\n    FETCH_MEDICAL_RECORD_BY_APP: '/med-rec/app/%s',\n    EDIT_MEDICAL_RECORD: '/med-rec/edit'\n};\n\nclass MedicalRecordService extends HttpClient {\n    fetchMedicalRecord = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_MEDICAL_RECORD, payload.id)\n            );\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    fetchMedicalRecordByApp = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_MEDICAL_RECORD_BY_APP, payload.typeId)\n            );\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    editMedicalRecord = async payload => {\n        try {\n            const { data } = await this.getApiClient().put(\n                FINALPOINTS.EDIT_MEDICAL_RECORD,\n                payload\n            );\n            const edit = data;\n            return { edit };\n        } catch (error) {\n            const edit = error.response.data;\n            return { edit };\n        }\n    };\n\n}\n\nexport default new MedicalRecordService();","import { take, put, call } from 'redux-saga/effects';\n\nimport {\n    FETCH_MEDICAL_RECORD,\n    FETCH_MEDICAL_RECORD_BY_APP,\n    EDIT_MEDICAL_RECORD\n} from './constants';\n\nimport MedicalRecordService from '../../services/MedicalRecordService';\n\nimport {\n    putIsFetchMedicalRecord,\n    putMedicalRecord\n} from './actions';\n\nimport {\n    putSuccessMsg,\n    putErrorMsg\n} from '../common/actions';\n\nexport function* editMedicalRecord() {\n    const { payload } = yield take(EDIT_MEDICAL_RECORD);\n    const { edit } = yield call(MedicalRecordService.editMedicalRecord, payload);\n    if (edit === 'Successfuly edited') {\n        yield put(putSuccessMsg(edit));\n        yield put(putSuccessMsg(null));\n    } else {\n        yield put(putErrorMsg(edit));\n        yield put(putErrorMsg(null));\n    }\n    yield put(putIsFetchMedicalRecord(false));\n    const { data } = yield call(MedicalRecordService.fetchMedicalRecord, payload);\n    yield put(putMedicalRecord(data));\n    yield put(putIsFetchMedicalRecord(true));\n}\n\nexport function* fetchMedicalRecord() {\n    const { payload } = yield take(FETCH_MEDICAL_RECORD);\n    yield put(putIsFetchMedicalRecord(false));\n    const { data } = yield call(MedicalRecordService.fetchMedicalRecord, payload);\n    yield put(putMedicalRecord(data));\n    yield put(putIsFetchMedicalRecord(true));\n}\n\nexport function* fetchMedicalRecordByApp() {\n    const { payload } = yield take(FETCH_MEDICAL_RECORD_BY_APP);\n    yield put(putIsFetchMedicalRecord(false));\n    const { data } = yield call(MedicalRecordService.fetchMedicalRecordByApp, payload);\n    yield put(putMedicalRecord(data));\n    yield put(putIsFetchMedicalRecord(true));\n}","import HttpClient from './HttpBaseClient';\nimport { format } from 'util';\n\nconst FINALPOINTS = {\n    ADD_MEDICAL_REPORT: '/med-rep/add',\n    FETCH_DOCTORS_MEDICAL_REPORTS: '/med-rep/all/%s',\n    EDIT_MEDICAL_REPORT: '/med-rep/edit'\n};\n\nclass MedicalReportService extends HttpClient {\n    addMedicalReport = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.ADD_MEDICAL_REPORT,\n                payload\n            );\n\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    fetchDoctorsMedicalReports = async payload => {\n        try {\n            const { data } = await this.getApiClient().get(\n                format(FINALPOINTS.FETCH_DOCTORS_MEDICAL_REPORTS, payload.doctorId)\n            );\n\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n\n    editMedicalReport = async payload => {\n        try {\n            const { data } = await this.getApiClient().put(\n                FINALPOINTS.EDIT_MEDICAL_REPORT,\n                payload\n            );\n            const msg = data;\n            return { msg };\n        } catch (error) {\n            const msg = error.response;\n            return { msg };\n        }\n    };\n}\n\nexport default new MedicalReportService();\n","import { take, put, call } from 'redux-saga/effects';\nimport { history } from '../../index';\n\nimport {\n    ADD_MEDICAL_REPORT,\n    FETCH_DOCTORS_MEDICAL_REPORTS,\n    EDIT_MEDICAL_REPORT\n} from './constants';\n\nimport MedicalReportService from '../../services/MedicalReportService';\n\nimport {\n    putIsFetchMedicalReport,\n    putDoctorsMedicalReports\n} from './actions';\n\nimport {\n    putSuccessMsg,\n    putErrorMsg\n} from '../common/actions';\n\nexport function* editMedicalReport() {\n    const { payload } = yield take(EDIT_MEDICAL_REPORT);\n    const { msg } = yield call(MedicalReportService.editMedicalReport, payload);\n    if (msg === 'Successfuly edited') {\n        yield put(putSuccessMsg(msg));\n        yield put(putSuccessMsg(null));\n    } else {\n        yield put(putErrorMsg(msg));\n        yield put(putErrorMsg(null));\n    }\n    yield put(putIsFetchMedicalReport(false));\n    const { data } = yield call(MedicalReportService.fetchDoctorsMedicalReports, { doctorId: payload.doctorId });\n    yield put(putDoctorsMedicalReports(data));\n    yield put(putIsFetchMedicalReport(true));\n}\n\nexport function* fetchDoctorsMedicalReports() {\n    const { payload } = yield take(FETCH_DOCTORS_MEDICAL_REPORTS);\n    yield put(putIsFetchMedicalReport(false));\n    const { data } = yield call(MedicalReportService.fetchDoctorsMedicalReports, payload);\n    yield put(putDoctorsMedicalReports(data));\n    yield put(putIsFetchMedicalReport(true));\n}\n\nexport function* addMedicalReport() {\n    const { payload } = yield take(ADD_MEDICAL_REPORT);\n    const { data } = yield call(MedicalReportService.addMedicalReport, payload);\n    if (data === 'Appointment finished') {\n        yield put(putSuccessMsg(data));\n        yield put(putSuccessMsg(null));\n    } else {\n        yield put(putErrorMsg(data));\n        yield put(putErrorMsg(null));\n    }\n    history.push('/doc');\n}","import HttpClient from './HttpBaseClient';\n\nconst FINALPOINTS = {\n    ADD_APPOINTMENT_REQUIREMENT: '/app-req/add'\n};\n\nclass AppointmentRequirementService extends HttpClient {\n    addAppointmentRequirement = async payload => {\n        try {\n            const { data } = await this.getApiClient().post(\n                FINALPOINTS.ADD_APPOINTMENT_REQUIREMENT,\n                payload\n            );\n            return { data };\n        } catch (error) {\n            return error.response;\n        }\n    };\n}\nexport default new AppointmentRequirementService();","import { take, put, call } from 'redux-saga/effects';\n\nimport {\n    ADD_APPOINTEMNT_REQUIREMENT\n} from './constants';\n\nimport AppointmentRequirementService from '../../services/AppointmentRequirementService';\n\nimport {\n} from './actions';\n\nimport {\n    putSuccessMsg,\n    putErrorMsg\n} from '../common/actions';\n\nexport function* addAppointmentRequirement() {\n    const { payload } = yield take(ADD_APPOINTEMNT_REQUIREMENT);\n    const { data } = yield call(AppointmentRequirementService.addAppointmentRequirement, payload);\n    if (data === 'Appointment requirement submited succesfully') {\n        yield put(putSuccessMsg(data));\n        yield put(putSuccessMsg(null));\n    } else {\n        yield put(putErrorMsg(data));\n        yield put(putErrorMsg(null));\n    }\n\n}","import { all, spawn, call, put } from 'redux-saga/effects';\nimport flatten from 'lodash/flatten';\nimport { putErrorMsg } from './common/actions';\nimport * as userSaga from './user/saga';\nimport * as regReqsSaga from './reg_req/saga';\nimport * as patientsSaga from './patients/saga';\nimport * as calendarSaga from './calendar/saga';\nimport * as absenceHolidaySaga from './absence_holiday/saga';\nimport * as prescriptionSaga from './prescriptions/saga';\nimport * as medicineDiagnoseSaga from './medicine_diagnose/saga';\nimport * as clinicSaga from './clinics/saga';\nimport * as appointmentsSaga from './appointments/saga';\nimport * as doctorsSaga from './doctors/saga';\nimport * as roomsSaga from './rooms/saga';\nimport * as surReqSaga from './sur_req/saga';\nimport * as medicalRecordSaga from './medical_record/saga';\nimport * as medicalReportSaga from './medical_report/saga';\nimport * as appReqSaga from './app_req/saga';\n\nexport default function* rootSaga() {\n  let sagas = flatten(\n    [userSaga,\n      regReqsSaga,\n      patientsSaga,\n      calendarSaga,\n      absenceHolidaySaga,\n      prescriptionSaga,\n      medicineDiagnoseSaga,\n      clinicSaga,\n      appointmentsSaga,\n      doctorsSaga,\n      roomsSaga,\n      surReqSaga,\n      medicalRecordSaga,\n      medicalReportSaga,\n      appReqSaga]\n      .map(saga => Object.keys(saga).map(sagaFunctionName => saga[sagaFunctionName]))\n  );\n\n  yield all(\n    sagas.map(saga =>\n      spawn(function* () {\n        while (true) {\n          try {\n            yield call(saga);\n          } catch (e) {\n            yield put(putErrorMsg(e.message));\n            yield put(putErrorMsg(null));\n          }\n        }\n      })\n    )\n  );\n}","import createSagaMiddleware from 'redux-saga';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './reducers-index';\nimport rootSaga from './sagas-index';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, {}, composeEnhancers(applyMiddleware(sagaMiddleware)));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from \"react-router-dom\";\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport NavBar from './components/NavBar';\nimport InformationToasts from './components/InformationToasts';\nimport { ToastProvider } from 'react-toast-notifications';\nimport AppRouter from './AppRouter';\nimport { createBrowserHistory } from 'history'\nimport Footer from './components/Footer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport store from './store';\n\nexport const history = createBrowserHistory();\n\n//<ToastProvider>\n//<InformationToasts />\n//</ToastProvider>\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router history={history}>\n            <NavBar />\n            <AppRouter />\n            <ToastProvider>\n                <InformationToasts />\n            </ToastProvider>\n            <Footer />\n        </Router>\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Navbar, Nav, } from 'react-bootstrap';\nimport { userDataSelector } from '../store/user/selectors';\nimport { useSelector } from 'react-redux';\nimport { signOut } from '../store/user/actions';\nimport { history } from '../index';\n\nexport default function NavBar() {\n    const dispatch = useDispatch();\n    const user = useSelector(userDataSelector);\n    const roles = user.roles;\n\n    const handleSignOut = () => {\n        dispatch(\n            signOut({\n                'id': null,\n                'firstName': '',\n                'lastName': '',\n                'email': '',\n                'firstLog': true,\n                'roles': []\n            })\n        );\n    };\n\n    //ne postoji razlik izmedju refresh page i close tab pa ako ovo radi onda prilikom refresha se takodje okine ova funkcija sto nije dobro \n    //window.addEventListener(\"unload\", handleSignOut);\n\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"#\" onClick={() => { history.push('/') }}>Clinic Center</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#\" onClick={() => { history.push('/') }}>Home</Nav.Link>\n                    {roles.includes('ROLE_CCADMIN') && <Nav.Link href=\"#\" onClick={() => { history.push('/ccadmin') }}>Clinic center admin profile</Nav.Link>}\n                    {roles.includes('ROLE_NURSE') && <Nav.Link href=\"#\" onClick={() => { history.push('/nurse-page') }}>Nurse homepage</Nav.Link>}\n                    {roles.includes('ROLE_ADMINC') && <Nav.Link href=\"#\" onClick={() => { history.push('/adminc') }}>Clinic admin profile</Nav.Link>}\n                    {roles.includes('ROLE_DOCTOR') && <Nav.Link href=\"#\" onClick={() => { history.push('/doc') }}>Doctor homepage</Nav.Link>}\n                    {roles.includes('ROLE_PATIENT') && <Nav.Link href=\"#\" onClick={() => { history.push('/pat') }}>Patient homepage</Nav.Link>}\n                </Nav>\n                <Nav className=\"ml-auto\">\n                    {roles.length == 0 && <Nav.Link href=\"#\" onClick={() => { history.push('/login') }}>Login</Nav.Link>}\n                    {roles.length == 0 && <Nav.Link href=\"#\" onClick={() => { history.push('/signup') }}>Sign Up</Nav.Link>}\n                    {roles.length != 0 && <Nav.Link href=\"#\" onClick={() => handleSignOut()}>Sign out</Nav.Link>}\n                </Nav>\n\n            </Navbar.Collapse>\n        </Navbar>\n\n    );\n}\n\n"],"sourceRoot":""}